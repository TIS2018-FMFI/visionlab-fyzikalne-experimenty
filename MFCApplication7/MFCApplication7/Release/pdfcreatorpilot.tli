// Created by Microsoft (R) C/C++ Compiler Version 14.16.27024.1 (99a33d53).
//
// c:\users\jozef\desktop\visionlab-fyzikalne-experimenty-sonka-almost-final\mfcapplication7\mfcapplication7\release\pdfcreatorpilot.tli
//
// Wrapper implementations for type library PDFCreatorPilot.dll
// compiler-generated file created 02/02/19 at 16:26:34 - DO NOT EDIT!

#pragma once

//
// interface IPDFDocument3 wrapper method implementations
//

inline HRESULT IPDFDocument3::BeginDoc ( ) {
    HRESULT _hr = raw_BeginDoc();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::EndDoc ( ) {
    HRESULT _hr = raw_EndDoc();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument3::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutFileName ( _bstr_t pVal ) {
    HRESULT _hr = put_FileName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetResolution ( ) {
    long _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutResolution ( long pVal ) {
    HRESULT _hr = put_Resolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetUseCurrentDocumentResolutionForNextPages ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCurrentDocumentResolutionForNextPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutUseCurrentDocumentResolutionForNextPages ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCurrentDocumentResolutionForNextPages(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPageHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_PageHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetPageWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_PageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetPDFPAGE_Height ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFPAGE_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFPAGE_Height ( long pVal ) {
    HRESULT _hr = put_PDFPAGE_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFPAGE_Width ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFPAGE_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFPAGE_Width ( long pVal ) {
    HRESULT _hr = put_PDFPAGE_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPageCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetPageNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_PageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetCurrentPageIndex ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetCurrentPageIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::SetCurrentPage ( long newIndex ) {
    HRESULT _hr = raw_SetCurrentPage(newIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_BeginText ( ) {
    HRESULT _hr = raw_PDFPAGE_BeginText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_EndText ( ) {
    HRESULT _hr = raw_PDFPAGE_EndText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_TextOut ( double x, double y, double orientation, _bstr_t text ) {
    HRESULT _hr = raw_PDFPAGE_TextOut(x, y, orientation, text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_RotateText ( double degrees ) {
    HRESULT _hr = raw_PDFPAGE_RotateText(degrees);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::GetPDFPAGE_Resolution ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFPAGE_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFPAGE_Resolution ( long pVal ) {
    HRESULT _hr = put_PDFPAGE_Resolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetLogActionsAndErrors ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LogActionsAndErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutLogActionsAndErrors ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LogActionsAndErrors(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetLastError ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IPDFDocument3::GetPrinting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Printing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IPDFDocument3::GetBinaryImage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BinaryImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IPDFDocument3::GetGenerateInMemoryFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GenerateInMemoryFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutGenerateInMemoryFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GenerateInMemoryFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetOutputByteStream ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutputByteStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IPDFDocument3::GetAutoLaunch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoLaunch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutAutoLaunch ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoLaunch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::PDFPAGE_SetTextPosition ( double x, double y ) {
    HRESULT _hr = raw_PDFPAGE_SetTextPosition(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_TextShow ( _bstr_t text ) {
    HRESULT _hr = raw_PDFPAGE_TextShow(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetActiveFont ( _bstr_t fontName, VARIANT_BOOL fontStyleBold, VARIANT_BOOL fontStyleItalic, VARIANT_BOOL fontStyleUnderline, VARIANT_BOOL fontStyleStrikeOut, double fontSize, TxFontCharset fontCharset ) {
    HRESULT _hr = raw_PDFPAGE_SetActiveFont(fontName, fontStyleBold, fontStyleItalic, fontStyleUnderline, fontStyleStrikeOut, fontSize, fontCharset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::NonEmbeddedFonts_Add ( _bstr_t fontName ) {
    HRESULT _hr = raw_NonEmbeddedFonts_Add(fontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument3::GetNonEmbeddedFonts ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NonEmbeddedFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutNonEmbeddedFonts ( _bstr_t pVal ) {
    HRESULT _hr = put_NonEmbeddedFonts(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::PDFPAGE_Rectangle ( double left, double top, double right, double bottom ) {
    HRESULT _hr = raw_PDFPAGE_Rectangle(left, top, right, bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_Stroke ( ) {
    HRESULT _hr = raw_PDFPAGE_Stroke();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::GetMemoryFileSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MemoryFileSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetGray ( double gray ) {
    HRESULT _hr = raw_PDFPAGE_SetGray(gray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetGrayFill ( double gray ) {
    HRESULT _hr = raw_PDFPAGE_SetGrayFill(gray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetGrayStroke ( double gray ) {
    HRESULT _hr = raw_PDFPAGE_SetGrayStroke(gray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetLineWidth ( double lineWidth ) {
    HRESULT _hr = raw_PDFPAGE_SetLineWidth(lineWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_TextBox ( double left, double top, double right, double bottom, _bstr_t text, TxHorJust horizontalJustification, TxVertJust verticalJustification ) {
    HRESULT _hr = raw_PDFPAGE_TextBox(left, top, right, bottom, text, horizontalJustification, verticalJustification);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetHorizontalScaling ( double scale ) {
    HRESULT _hr = raw_PDFPAGE_SetHorizontalScaling(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetWordSpacing ( double spacing ) {
    HRESULT _hr = raw_PDFPAGE_SetWordSpacing(spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetCharacterSpacing ( double spacing ) {
    HRESULT _hr = raw_PDFPAGE_SetCharacterSpacing(spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IPDFDocument3::PDFPAGE_GetTextWidth ( _bstr_t text ) {
    double _result = 0;
    HRESULT _hr = raw_PDFPAGE_GetTextWidth(text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::NewPage ( ) {
    HRESULT _hr = raw_NewPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetRGBColorFill ( double r, double g, double b ) {
    HRESULT _hr = raw_PDFPAGE_SetRGBColorFill(r, g, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetRGBColorStroke ( double r, double g, double b ) {
    HRESULT _hr = raw_PDFPAGE_SetRGBColorStroke(r, g, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetRGBColor ( double r, double g, double b ) {
    HRESULT _hr = raw_PDFPAGE_SetRGBColor(r, g, b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetTextRenderingMode ( TxTextRenderingMode mode ) {
    HRESULT _hr = raw_PDFPAGE_SetTextRenderingMode(mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetCMYKColorFill ( double c, double m, double y, double k ) {
    HRESULT _hr = raw_PDFPAGE_SetCMYKColorFill(c, m, y, k);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetCMYKColorStroke ( double c, double m, double y, double k ) {
    HRESULT _hr = raw_PDFPAGE_SetCMYKColorStroke(c, m, y, k);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetCMYKColor ( double c, double m, double y, double k ) {
    HRESULT _hr = raw_PDFPAGE_SetCMYKColor(c, m, y, k);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_MoveTo ( double x, double y ) {
    HRESULT _hr = raw_PDFPAGE_MoveTo(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_LineTo ( double x, double y ) {
    HRESULT _hr = raw_PDFPAGE_LineTo(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_NewPath ( ) {
    HRESULT _hr = raw_PDFPAGE_NewPath();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_Clip ( ) {
    HRESULT _hr = raw_PDFPAGE_Clip();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_ClosePath ( ) {
    HRESULT _hr = raw_PDFPAGE_ClosePath();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetDash ( _bstr_t dashString ) {
    HRESULT _hr = raw_PDFPAGE_SetDash(dashString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_NoDash ( ) {
    HRESULT _hr = raw_PDFPAGE_NoDash();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_GStateSave ( ) {
    HRESULT _hr = raw_PDFPAGE_GStateSave();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_GStateRestore ( ) {
    HRESULT _hr = raw_PDFPAGE_GStateRestore();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_FillAndStroke ( ) {
    HRESULT _hr = raw_PDFPAGE_FillAndStroke();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_Fill ( ) {
    HRESULT _hr = raw_PDFPAGE_Fill();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_EoFillAndStroke ( ) {
    HRESULT _hr = raw_PDFPAGE_EoFillAndStroke();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_EoFill ( ) {
    HRESULT _hr = raw_PDFPAGE_EoFill();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_EoClip ( ) {
    HRESULT _hr = raw_PDFPAGE_EoClip();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_RectRotated ( double left, double top, double width, double height, double degreeRotateAngle ) {
    HRESULT _hr = raw_PDFPAGE_RectRotated(left, top, width, height, degreeRotateAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_CurveTo ( double firstX, double firstY, double secondX, double secondY, double thirdX, double thirdY ) {
    HRESULT _hr = raw_PDFPAGE_CurveTo(firstX, firstY, secondX, secondY, thirdX, thirdY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_RoundRect ( double left, double top, double right, double bottom, double width, double height ) {
    HRESULT _hr = raw_PDFPAGE_RoundRect(left, top, right, bottom, width, height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_Circle ( double centerX, double centerY, double radius ) {
    HRESULT _hr = raw_PDFPAGE_Circle(centerX, centerY, radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_Ellipse ( double left, double top, double right, double bottom ) {
    HRESULT _hr = raw_PDFPAGE_Ellipse(left, top, right, bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_Arc2 ( double centerX, double centerY, double radiusX, double radiusY, double degreeStartAngle, double degreeSweepAngle, double * currentX, double * currentY ) {
    HRESULT _hr = raw_PDFPAGE_Arc2(centerX, centerY, radiusX, radiusY, degreeStartAngle, degreeSweepAngle, currentX, currentY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_Arc ( double left, double top, double right, double bottom, double firstX, double firstY, double secondX, double secondY, double * currentX, double * currentY ) {
    HRESULT _hr = raw_PDFPAGE_Arc(left, top, right, bottom, firstX, firstY, secondX, secondY, currentX, currentY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_Pie2 ( double left, double top, double right, double bottom, double degreeStartAngle, double degreeSweepAngle ) {
    HRESULT _hr = raw_PDFPAGE_Pie2(left, top, right, bottom, degreeStartAngle, degreeSweepAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_Pie ( double left, double top, double right, double bottom, double firstX, double firstY, double secondX, double secondY ) {
    HRESULT _hr = raw_PDFPAGE_Pie(left, top, right, bottom, firstX, firstY, secondX, secondY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::AddImageFromFilename ( _bstr_t FileName, TxImageCompressionType compressionType ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageFromFilename(FileName, compressionType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetJPEGQuality ( ) {
    long _result = 0;
    HRESULT _hr = get_JPEGQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutJPEGQuality ( long pVal ) {
    HRESULT _hr = put_JPEGQuality(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::PDFPAGE_Translate ( double x, double y ) {
    HRESULT _hr = raw_PDFPAGE_Translate(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_Scale ( double scaleX, double scaleY ) {
    HRESULT _hr = raw_PDFPAGE_Scale(scaleX, scaleY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_Rotate ( double angle ) {
    HRESULT _hr = raw_PDFPAGE_Rotate(angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_ShowImage ( long imageIndex, double left, double top, double width, double height, double angle ) {
    HRESULT _hr = raw_PDFPAGE_ShowImage(imageIndex, left, top, width, height, angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::AddImageFromBitmapHandle ( OLE_HANDLE handle, TxImageCompressionType compressionType ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageFromBitmapHandle(handle, compressionType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetPDFOUTLINES_Count ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFOUTLINES_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::PDFOUTLINES_Clear ( ) {
    HRESULT _hr = raw_PDFOUTLINES_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFOUTLINES_Delete ( long nodeIndex ) {
    HRESULT _hr = raw_PDFOUTLINES_Delete(nodeIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::PDFOUTLINES_GetFirstNode ( ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINES_GetFirstNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINES_Add ( long nodeIndex, _bstr_t nodeTitle, long actionIndex, TxFontCharset charset ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINES_Add(nodeIndex, nodeTitle, actionIndex, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINES_AddChild ( long parentNodeIndex, _bstr_t nodeTitle, long actionIndex, TxFontCharset charset ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINES_AddChild(parentNodeIndex, nodeTitle, actionIndex, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINES_AddFirst ( long nodeIndex, _bstr_t nodeTitle, long actionIndex, TxFontCharset charset ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINES_AddFirst(nodeIndex, nodeTitle, actionIndex, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINES_Insert ( long nodeIndex, _bstr_t nodeTitle, long actionIndex, TxFontCharset charset ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINES_Insert(nodeIndex, nodeTitle, actionIndex, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetPDFOUTLINENODE_Action ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFOUTLINENODE_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFOUTLINENODE_Action ( long pVal ) {
    HRESULT _hr = put_PDFOUTLINENODE_Action(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxFontCharset IPDFDocument3::GetPDFOUTLINENODE_Charset ( ) {
    TxFontCharset _result;
    HRESULT _hr = get_PDFOUTLINENODE_Charset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFOUTLINENODE_Charset ( TxFontCharset pVal ) {
    HRESULT _hr = put_PDFOUTLINENODE_Charset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFOUTLINENODE_Count ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFOUTLINENODE_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPDFDocument3::GetPDFOUTLINENODE_Expanded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFOUTLINENODE_Expanded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFOUTLINENODE_Expanded ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFOUTLINENODE_Expanded(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFOUTLINENODE_HasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFOUTLINENODE_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINENODE_GetSubItem ( long parentNodeIndex ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINENODE_GetSubItem(parentNodeIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPDFDocument3::GetPDFOUTLINENODE_Title ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PDFOUTLINENODE_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutPDFOUTLINENODE_Title ( _bstr_t pVal ) {
    HRESULT _hr = put_PDFOUTLINENODE_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::PDFOUTLINENODE_Delete ( ) {
    HRESULT _hr = raw_PDFOUTLINENODE_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFOUTLINENODE_DeleteChildren ( ) {
    HRESULT _hr = raw_PDFOUTLINENODE_DeleteChildren();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::PDFOUTLINENODE_GetFirstChild ( ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINENODE_GetFirstChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINENODE_GetLastChild ( ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINENODE_GetLastChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINENODE_GetNext ( ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINENODE_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINENODE_GetNextChild ( ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINENODE_GetNextChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINENODE_GetNextSibling ( ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINENODE_GetNextSibling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINENODE_GetPrev ( ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINENODE_GetPrev(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINENODE_GetPrevChild ( ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINENODE_GetPrevChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFOUTLINENODE_GetPrevSibling ( ) {
    long _result = 0;
    HRESULT _hr = raw_PDFOUTLINENODE_GetPrevSibling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::SetCurrentPDFOutlineNode ( long nodeIndex ) {
    HRESULT _hr = raw_SetCurrentPDFOutlineNode(nodeIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::GetCurrentPDFOutlineNode ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetCurrentPDFOutlineNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::CreateGoToPageAction ( long pageIndex, long topOffset ) {
    long _result = 0;
    HRESULT _hr = raw_CreateGoToPageAction(pageIndex, topOffset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPDFDocument3::GetViewerPreferences_vpHideToolBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ViewerPreferences_vpHideToolBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutViewerPreferences_vpHideToolBar ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ViewerPreferences_vpHideToolBar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetViewerPreferences_vpHideMenuBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ViewerPreferences_vpHideMenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutViewerPreferences_vpHideMenuBar ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ViewerPreferences_vpHideMenuBar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetViewerPreferences_vpHideWindowUI ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ViewerPreferences_vpHideWindowUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutViewerPreferences_vpHideWindowUI ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ViewerPreferences_vpHideWindowUI(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetViewerPreferences_vpFitWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ViewerPreferences_vpFitWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutViewerPreferences_vpFitWindow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ViewerPreferences_vpFitWindow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetViewerPreferences_vpCenterWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ViewerPreferences_vpCenterWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutViewerPreferences_vpCenterWindow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ViewerPreferences_vpCenterWindow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxPageLayout IPDFDocument3::GetPageLayout ( ) {
    TxPageLayout _result;
    HRESULT _hr = get_PageLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPageLayout ( TxPageLayout pVal ) {
    HRESULT _hr = put_PageLayout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxPageMode IPDFDocument3::GetPageMode ( ) {
    TxPageMode _result;
    HRESULT _hr = get_PageMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPageMode ( TxPageMode pVal ) {
    HRESULT _hr = put_PageMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::CreateURLAction ( _bstr_t url ) {
    long _result = 0;
    HRESULT _hr = raw_CreateURLAction(url, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetURL ( double left, double top, double right, double bottom, _bstr_t url ) {
    HRESULT _hr = raw_PDFPAGE_SetURL(left, top, right, bottom, url);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetLinkToPage ( double left, double bottom, double right, double top, long pageIndex, long topOffset ) {
    HRESULT _hr = raw_PDFPAGE_SetLinkToPage(left, bottom, right, top, pageIndex, topOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline DATE IPDFDocument3::GetDocumentInfo_CreationDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DocumentInfo_CreationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutDocumentInfo_CreationDate ( DATE pVal ) {
    HRESULT _hr = put_DocumentInfo_CreationDate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetDocumentInfo_Creator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentInfo_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutDocumentInfo_Creator ( _bstr_t pVal ) {
    HRESULT _hr = put_DocumentInfo_Creator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetDocumentInfo_Keywords ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentInfo_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutDocumentInfo_Keywords ( _bstr_t pVal ) {
    HRESULT _hr = put_DocumentInfo_Keywords(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetDocumentInfo_Subject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentInfo_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutDocumentInfo_Subject ( _bstr_t pVal ) {
    HRESULT _hr = put_DocumentInfo_Subject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetDocumentInfo_Title ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentInfo_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutDocumentInfo_Title ( _bstr_t pVal ) {
    HRESULT _hr = put_DocumentInfo_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetDocumentInfo_Author ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentInfo_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutDocumentInfo_Author ( _bstr_t pVal ) {
    HRESULT _hr = put_DocumentInfo_Author(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::PDFPAGE_SetFlat ( long flatness ) {
    HRESULT _hr = raw_PDFPAGE_SetFlat(flatness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetLineCap ( TxPDFLineCap lineCap ) {
    HRESULT _hr = raw_PDFPAGE_SetLineCap(lineCap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetLineJoin ( TxPDFLineJoin lineJoin ) {
    HRESULT _hr = raw_PDFPAGE_SetLineJoin(lineJoin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetMiterLimit ( double miterLimit ) {
    HRESULT _hr = raw_PDFPAGE_SetMiterLimit(miterLimit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::PDFPAGE_SetAction ( double left, double top, double right, double bottom, long actionIndex ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_SetAction(left, top, right, bottom, actionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IPDFDocument3::GetPDFANNOTATION_Box_X ( ) {
    double _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Box_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Box_X ( double pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Box_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPDFDocument3::GetPDFANNOTATION_Box_Y ( ) {
    double _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Box_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Box_Y ( double pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Box_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPDFDocument3::GetPDFANNOTATION_Box_W ( ) {
    double _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Box_W(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Box_W ( double pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Box_W(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPDFDocument3::GetPDFANNOTATION_Box_H ( ) {
    double _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Box_H(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Box_H ( double pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Box_H(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetCurrentAnnotationIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentAnnotationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutCurrentAnnotationIndex ( long pVal ) {
    HRESULT _hr = put_CurrentAnnotationIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::PDFPAGE_SetAnnotation ( double left, double top, double right, double bottom, _bstr_t title, _bstr_t contents, OLE_COLOR color, VARIANT_BOOL print, VARIANT_BOOL noZoom, VARIANT_BOOL noRotate, VARIANT_BOOL invisible, VARIANT_BOOL hidden, VARIANT_BOOL noView, VARIANT_BOOL readOnly, VARIANT_BOOL opened, TxFontCharset fontCharset ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_SetAnnotation(left, top, right, bottom, title, contents, color, print, noZoom, noRotate, invisible, hidden, noView, readOnly, opened, fontCharset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetPDFANNOTATION_Action ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Action ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Action(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Flags_afInvisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Flags_afInvisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Flags_afInvisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Flags_afInvisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Flags_afHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Flags_afHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Flags_afHidden ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Flags_afHidden(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Flags_afPrint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Flags_afPrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Flags_afPrint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Flags_afPrint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Flags_afNoZoom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Flags_afNoZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Flags_afNoZoom ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Flags_afNoZoom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Flags_afNoRotate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Flags_afNoRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Flags_afNoRotate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Flags_afNoRotate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Flags_afNoView ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Flags_afNoView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Flags_afNoView ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Flags_afNoView(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Flags_afReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Flags_afReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Flags_afReadOnly ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Flags_afReadOnly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Opened ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Opened(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Opened ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Opened(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxTextAnnotationIcon IPDFDocument3::GetPDFANNOTATION_TextAnnotationIcon ( ) {
    TxTextAnnotationIcon _result;
    HRESULT _hr = get_PDFANNOTATION_TextAnnotationIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_TextAnnotationIcon ( TxTextAnnotationIcon pVal ) {
    HRESULT _hr = put_PDFANNOTATION_TextAnnotationIcon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetPDFANNOTATION_Text ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutPDFANNOTATION_Text ( _bstr_t pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetPDFANNOTATION_Caption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutPDFANNOTATION_Caption ( _bstr_t pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Caption(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxAnnotationType IPDFDocument3::GetCurrentAnnotationType ( ) {
    TxAnnotationType _result;
    HRESULT _hr = get_CurrentAnnotationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline OLE_COLOR IPDFDocument3::GetPDFANNOTATION_BorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PDFANNOTATION_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_BorderColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_PDFANNOTATION_BorderColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetOwnerPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OwnerPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutOwnerPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_OwnerPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetProtectionEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutProtectionEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProtectionEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetUserPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutUserPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_UserPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetProtectionOptions_coPrint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionOptions_coPrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutProtectionOptions_coPrint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProtectionOptions_coPrint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetProtectionOptions_coModifyStructure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionOptions_coModifyStructure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutProtectionOptions_coModifyStructure ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProtectionOptions_coModifyStructure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetProtectionOptions_coModifyAnnotation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionOptions_coModifyAnnotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutProtectionOptions_coModifyAnnotation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProtectionOptions_coModifyAnnotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetProtectionOptions_coCopyInformation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionOptions_coCopyInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutProtectionOptions_coCopyInformation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProtectionOptions_coCopyInformation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetProtectionOptions_coFillAnnotation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionOptions_coFillAnnotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutProtectionOptions_coFillAnnotation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProtectionOptions_coFillAnnotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetProtectionOptions_coExtractInfo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionOptions_coExtractInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutProtectionOptions_coExtractInfo ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProtectionOptions_coExtractInfo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetProtectionOptions_coAssembly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionOptions_coAssembly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutProtectionOptions_coAssembly ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProtectionOptions_coAssembly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetProtectionOptions_coPrintHigh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectionOptions_coPrintHigh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutProtectionOptions_coPrintHigh ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProtectionOptions_coPrintHigh(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxCryptoKeyLength IPDFDocument3::GetProtectionKeyLength ( ) {
    TxCryptoKeyLength _result;
    HRESULT _hr = get_ProtectionKeyLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutProtectionKeyLength ( TxCryptoKeyLength pVal ) {
    HRESULT _hr = put_ProtectionKeyLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxCompressionType IPDFDocument3::GetCompression ( ) {
    TxCompressionType _result;
    HRESULT _hr = get_Compression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutCompression ( TxCompressionType pVal ) {
    HRESULT _hr = put_Compression(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::Abort ( ) {
    HRESULT _hr = raw_Abort();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPDFDocument3::GetAborted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Aborted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetTextRise ( double Rise ) {
    HRESULT _hr = raw_PDFPAGE_SetTextRise(Rise);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument3::GetDocumentInfo_Producer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentInfo_Producer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutDocumentInfo_Producer ( _bstr_t pVal ) {
    HRESULT _hr = put_DocumentInfo_Producer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::CreateJavascriptAction ( _bstr_t scriptContents ) {
    long _result = 0;
    HRESULT _hr = raw_CreateJavascriptAction(scriptContents, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetOpenDocumentAction ( ) {
    long _result = 0;
    HRESULT _hr = get_OpenDocumentAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutOpenDocumentAction ( long pVal ) {
    HRESULT _hr = put_OpenDocumentAction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::CreateWaterMark ( ) {
    long _result = 0;
    HRESULT _hr = raw_CreateWaterMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPDFDocument3::GetSwitchedToWatermark ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SwitchedToWatermark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutSwitchedToWatermark ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SwitchedToWatermark(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFPAGE_Watermark ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFPAGE_Watermark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFPAGE_Watermark ( long pVal ) {
    HRESULT _hr = put_PDFPAGE_Watermark(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::PDFPAGE_DrawWatermark ( long watermarkIndex ) {
    HRESULT _hr = raw_PDFPAGE_DrawWatermark(watermarkIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::GetCurrentWaterMarkIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentWaterMarkIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutCurrentWaterMarkIndex ( long pVal ) {
    HRESULT _hr = put_CurrentWaterMarkIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::PDFPAGE_CreateControl_Button ( _bstr_t buttonName, long left, long top, long right, long bottom ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_CreateControl_Button(buttonName, left, top, right, bottom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_ReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_ReadOnly ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_ReadOnly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Required ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Required(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Required ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Required(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetPDFANNOTATION_Name ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutPDFANNOTATION_Name ( _bstr_t pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline OLE_COLOR IPDFDocument3::GetPDFANNOTATION_Color ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PDFANNOTATION_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Color ( OLE_COLOR pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetPDFANNOTATION_Font_Name ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Font_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutPDFANNOTATION_Font_Name ( _bstr_t pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Font_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxFontCharset IPDFDocument3::GetPDFANNOTATION_Font_Charset ( ) {
    TxFontCharset _result;
    HRESULT _hr = get_PDFANNOTATION_Font_Charset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Font_Charset ( TxFontCharset pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Font_Charset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Font_Style_fsBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Font_Style_fsBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Font_Style_fsBold ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Font_Style_fsBold(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Font_Style_fsItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Font_Style_fsItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Font_Style_fsItalic ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Font_Style_fsItalic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Font_Style_fsUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Font_Style_fsUnderline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Font_Style_fsUnderline ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Font_Style_fsUnderline(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Font_Style_fsStrikeout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Font_Style_fsStrikeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Font_Style_fsStrikeout ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Font_Style_fsStrikeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFANNOTATION_Font_Size ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Font_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Font_Size ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Font_Size(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline OLE_COLOR IPDFDocument3::GetPDFANNOTATION_Font_Color ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PDFANNOTATION_Font_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Font_Color ( OLE_COLOR pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Font_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxPDFPageSize IPDFDocument3::GetPDFPAGE_Size ( ) {
    TxPDFPageSize _result;
    HRESULT _hr = get_PDFPAGE_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFPAGE_Size ( TxPDFPageSize pVal ) {
    HRESULT _hr = put_PDFPAGE_Size(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxPDFPageOrientation IPDFDocument3::GetPDFPAGE_Orientation ( ) {
    TxPDFPageOrientation _result;
    HRESULT _hr = get_PDFPAGE_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFPAGE_Orientation ( TxPDFPageOrientation pVal ) {
    HRESULT _hr = put_PDFPAGE_Orientation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxPDFPageRotate IPDFDocument3::GetPDFPAGE_PageRotate ( ) {
    TxPDFPageRotate _result;
    HRESULT _hr = get_PDFPAGE_PageRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFPAGE_PageRotate ( TxPDFPageRotate pVal ) {
    HRESULT _hr = put_PDFPAGE_PageRotate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFPAGE_TextInitiated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFPAGE_TextInitiated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::PDFPAGE_Comment ( _bstr_t Comment ) {
    HRESULT _hr = raw_PDFPAGE_Comment(Comment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::GetPDFANNOTATION_OnMouseUp ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_OnMouseUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_OnMouseUp ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_OnMouseUp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFANNOTATION_OnMouseDown ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_OnMouseDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_OnMouseDown ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_OnMouseDown(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFANNOTATION_OnMouseEnter ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_OnMouseEnter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_OnMouseEnter ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_OnMouseEnter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFANNOTATION_OnMouseExit ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_OnMouseExit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_OnMouseExit ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_OnMouseExit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFANNOTATION_OnSetFocus ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_OnSetFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_OnSetFocus ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_OnSetFocus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFANNOTATION_OnLostFocus ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_OnLostFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_OnLostFocus ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_OnLostFocus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::PDFPAGE_CreateControl_Checkbox ( _bstr_t checkBoxName, long left, long top, long right, long bottom ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_CreateControl_Checkbox(checkBoxName, left, top, right, bottom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Checked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Checked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Checked ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Checked(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::PDFPAGE_CreateControl_Edit ( _bstr_t editBoxName, long left, long top, long right, long bottom ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_CreateControl_Edit(editBoxName, left, top, right, bottom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetPDFANNOTATION_OnKeyPress ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_OnKeyPress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_OnKeyPress ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_OnKeyPress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFANNOTATION_OnBeforeFormatting ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_OnBeforeFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_OnBeforeFormatting ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_OnBeforeFormatting(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFANNOTATION_OnChange ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_OnChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_OnChange ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_OnChange(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFANNOTATION_OnOtherControlChanged ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_OnOtherControlChanged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_OnOtherControlChanged ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_OnOtherControlChanged(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetPDFANNOTATION_MaxLength ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFANNOTATION_MaxLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_MaxLength ( long pVal ) {
    HRESULT _hr = put_PDFANNOTATION_MaxLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_IsPassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_IsPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_IsPassword ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_IsPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_Multiline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Multiline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Multiline ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Multiline(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_ShowBorder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_ShowBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_ShowBorder ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_ShowBorder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxHorJust IPDFDocument3::GetPDFANNOTATION_Justification ( ) {
    TxHorJust _result;
    HRESULT _hr = get_PDFANNOTATION_Justification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Justification ( TxHorJust pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Justification(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::PDFPAGE_CreateControl_Combobox ( _bstr_t comboBoxName, long left, long top, long right, long bottom ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_CreateControl_Combobox(comboBoxName, left, top, right, bottom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPDFDocument3::GetPDFANNOTATION_EditEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFANNOTATION_EditEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_EditEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFANNOTATION_EditEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetPDFANNOTATION_Items ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Items(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutPDFANNOTATION_Items ( _bstr_t pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Items(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::PDFPAGE_CreateControl_RadioButton ( _bstr_t radioButtonName, long left, long top, long right, long bottom ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_CreateControl_RadioButton(radioButtonName, left, top, right, bottom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPDFDocument3::GetPDFANNOTATION_ExportValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PDFANNOTATION_ExportValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutPDFANNOTATION_ExportValue ( _bstr_t pVal ) {
    HRESULT _hr = put_PDFANNOTATION_ExportValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::CreateVisibleControlAction ( VARIANT_BOOL Visible ) {
    long _result = 0;
    HRESULT _hr = raw_CreateVisibleControlAction(Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::AddControlToAction ( long actionIndex, long controlIndex ) {
    long _result = 0;
    HRESULT _hr = raw_AddControlToAction(actionIndex, controlIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::CreateResetFormAction ( ) {
    long _result = 0;
    HRESULT _hr = raw_CreateResetFormAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::CreateImportDataAction ( _bstr_t FileName ) {
    long _result = 0;
    HRESULT _hr = raw_CreateImportDataAction(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::CreateSubmitFormAction ( _bstr_t url, VARIANT_BOOL sendEmptyFields, TxPDFSubmitType submitType ) {
    long _result = 0;
    HRESULT _hr = raw_CreateSubmitFormAction(url, sendEmptyFields, submitType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::PDFPAGE_UnicodeTextOut ( double x, double y, double orientation, _bstr_t unicodeText ) {
    HRESULT _hr = raw_PDFPAGE_UnicodeTextOut(x, y, orientation, unicodeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument3::GetPDFANNOTATION_BorderStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PDFANNOTATION_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutPDFANNOTATION_BorderStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_PDFANNOTATION_BorderStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxFontCharset IPDFDocument3::GetPDFANNOTATION_Charset ( ) {
    TxFontCharset _result;
    HRESULT _hr = get_PDFANNOTATION_Charset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Charset ( TxFontCharset pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Charset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::GetPDFANNOTATION_Hint_Caption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PDFANNOTATION_Hint_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutPDFANNOTATION_Hint_Caption ( _bstr_t pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Hint_Caption(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxFontCharset IPDFDocument3::GetPDFANNOTATION_Hint_Charset ( ) {
    TxFontCharset _result;
    HRESULT _hr = get_PDFANNOTATION_Hint_Charset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFANNOTATION_Hint_Charset ( TxFontCharset pVal ) {
    HRESULT _hr = put_PDFANNOTATION_Hint_Charset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetPDFPAGE_CanvasOver ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFPAGE_CanvasOver(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFPAGE_CanvasOver ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PDFPAGE_CanvasOver(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetOnePass ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OnePass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutOnePass ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OnePass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::PDFPAGE_SkewText ( double alpha, double beta ) {
    HRESULT _hr = raw_PDFPAGE_SkewText(alpha, beta);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IPDFDocument3::PDFPAGE_GetUnicodeTextWidth ( _bstr_t textString ) {
    double _result = 0;
    HRESULT _hr = raw_PDFPAGE_GetUnicodeTextWidth(textString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetHDC ( ) {
    long _result = 0;
    HRESULT _hr = get_HDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetUsedDC ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetUsedDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetUsedDCResolution ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetUsedDCResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPDFDocument3::GetUseScreenDC ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScreenDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutUseScreenDC ( VARIANT_BOOL value ) {
    HRESULT _hr = put_UseScreenDC(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::PDFPAGE_PlayMetaFile ( long metafileHandle ) {
    HRESULT _hr = raw_PDFPAGE_PlayMetaFile(metafileHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_PlayMetaFileEx ( long metafileHandle, double x, double y, double scaleX, double scaleY ) {
    HRESULT _hr = raw_PDFPAGE_PlayMetaFileEx(metafileHandle, x, y, scaleX, scaleY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_PlayMetaFileFromFileName ( _bstr_t FileName ) {
    HRESULT _hr = raw_PDFPAGE_PlayMetaFileFromFileName(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_PlayMetaFileExFromFileName ( _bstr_t FileName, double x, double y, double scaleX, double scaleY ) {
    HRESULT _hr = raw_PDFPAGE_PlayMetaFileExFromFileName(FileName, x, y, scaleX, scaleY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument3::GlyphsToUnicodeStr ( _bstr_t glyphs ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GlyphsToUnicodeStr(glyphs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IPDFDocument3::AddImageFromBuffer ( VARIANT * imageBuffer, TxImageCompressionType compressionType ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageFromBuffer(imageBuffer, compressionType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::AddImageFromMemory ( LPSTR imageBuffer, long bufferSizeInBytes, TxImageCompressionType compressionType ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageFromMemory(imageBuffer, bufferSizeInBytes, compressionType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IPDFDocument3::GetPDFPAGE_CurrentTextPositionX ( ) {
    double _result = 0;
    HRESULT _hr = get_PDFPAGE_CurrentTextPositionX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IPDFDocument3::GetPDFPAGE_CurrentTextPositionY ( ) {
    double _result = 0;
    HRESULT _hr = get_PDFPAGE_CurrentTextPositionY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::PDFPAGE_UnicodeTextShow ( _bstr_t unicodeText ) {
    HRESULT _hr = raw_PDFPAGE_UnicodeTextShow(unicodeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_UnicodeTextBox ( double left, double top, double right, double bottom, _bstr_t text, TxHorJust horizontalJustification, TxVertJust verticalJustification ) {
    HRESULT _hr = raw_PDFPAGE_UnicodeTextBox(left, top, right, bottom, text, horizontalJustification, verticalJustification);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::AddImageWithColorMask ( _bstr_t FileName, OLE_COLOR colorMask ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageWithColorMask(FileName, colorMask, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IPDFDocument3::GetPDFPAGE_InPath ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PDFPAGE_InPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IPDFDocument3::GetPDFPAGE_CanvasCurrentPointX ( ) {
    double _result = 0;
    HRESULT _hr = get_PDFPAGE_CanvasCurrentPointX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IPDFDocument3::GetPDFPAGE_CanvasCurrentPointY ( ) {
    double _result = 0;
    HRESULT _hr = get_PDFPAGE_CanvasCurrentPointY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPDFDocument3::AddTTFFontFromFile ( _bstr_t fontFile, TxFontCharset charset ) {
    BSTR _result = 0;
    HRESULT _hr = raw_AddTTFFontFromFile(fontFile, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline TxFontEmbeddingType IPDFDocument3::GetFontEmbedStyle ( ) {
    TxFontEmbeddingType _result;
    HRESULT _hr = get_FontEmbedStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutFontEmbedStyle ( TxFontEmbeddingType pVal ) {
    HRESULT _hr = put_FontEmbedStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument3::GetEmbedCommercialFonts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EmbedCommercialFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutEmbedCommercialFonts ( VARIANT_BOOL embed ) {
    HRESULT _hr = put_EmbedCommercialFonts(embed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::NotEmbedAnyFonts ( ) {
    HRESULT _hr = raw_NotEmbedAnyFonts();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPDFDocument3::GetAutoCreateURL ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoCreateURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutAutoCreateURL ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoCreateURL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::PDFPAGE_TextOutBox ( long left, long top, long interval, long boxWidth, long boxHeight, _bstr_t text ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_TextOutBox(left, top, interval, boxWidth, boxHeight, text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFPAGE_TextOutBox2 ( double left, double top, double boxWidth, double boxHeight, TxHorJust horizontalJustification, TxVertJust verticalJustification, _bstr_t contents ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_TextOutBox2(left, top, boxWidth, boxHeight, horizontalJustification, verticalJustification, contents, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFPAGE_UnicodeTextOutBox ( long left, long top, long interval, long boxWidth, long boxHeight, _bstr_t textString ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_UnicodeTextOutBox(left, top, interval, boxWidth, boxHeight, textString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::PDFPAGE_UnicodeTextOutBox2 ( double left, double top, double boxWidth, double boxHeight, TxHorJust horizontalJustification, TxVertJust verticalJustification, _bstr_t cContents ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_UnicodeTextOutBox2(left, top, boxWidth, boxHeight, horizontalJustification, verticalJustification, cContents, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::StartEngine ( _bstr_t userName, _bstr_t password ) {
    HRESULT _hr = raw_StartEngine(userName, password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::GetPDFPAGE_Thumbnail ( ) {
    long _result = 0;
    HRESULT _hr = get_PDFPAGE_Thumbnail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutPDFPAGE_Thumbnail ( long pVal ) {
    HRESULT _hr = put_PDFPAGE_Thumbnail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::PDFPAGE_Concat ( double A, double b, double c, double D, double E, double F ) {
    HRESULT _hr = raw_PDFPAGE_Concat(A, b, c, D, E, F);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline TxPDFVersion IPDFDocument3::GetVersion ( ) {
    TxPDFVersion _result;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutVersion ( TxPDFVersion pVal ) {
    HRESULT _hr = put_Version(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::GetMetafileImagesJpegCompression ( ) {
    long _result = 0;
    HRESULT _hr = get_MetafileImagesJpegCompression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutMetafileImagesJpegCompression ( long pVal ) {
    HRESULT _hr = put_MetafileImagesJpegCompression(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxImageCompressionType IPDFDocument3::GetMetafileImagesCompressionType ( ) {
    TxImageCompressionType _result;
    HRESULT _hr = get_MetafileImagesCompressionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutMetafileImagesCompressionType ( TxImageCompressionType pVal ) {
    HRESULT _hr = put_MetafileImagesCompressionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument3::AddType1FontFromFile ( _bstr_t afmFontFile, _bstr_t pfbFontFile, TxFontCharset charset ) {
    BSTR _result = 0;
    HRESULT _hr = raw_AddType1FontFromFile(afmFontFile, pfbFontFile, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IPDFDocument3::AddTTFFontFromFile2 ( _bstr_t fontFile ) {
    BSTR _result = 0;
    HRESULT _hr = raw_AddTTFFontFromFile2(fontFile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IPDFDocument3::PDFPAGE_SetPixel ( double x, double y, OLE_COLOR color ) {
    HRESULT _hr = raw_PDFPAGE_SetPixel(x, y, color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_ArcTo ( double left, double top, double right, double bottom, double firstX, double firstY, double secondX, double secondY, VARIANT_BOOL isClockwise, double * currentX, double * currentY ) {
    HRESULT _hr = raw_PDFPAGE_ArcTo(left, top, right, bottom, firstX, firstY, secondX, secondY, isClockwise, currentX, currentY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::LogTextOperations ( _bstr_t logFileName, VARIANT_BOOL asXML ) {
    HRESULT _hr = raw_LogTextOperations(logFileName, asXML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PlayEMF ( long metafileHandle, long reserved, double x, double y, double scaleX, double scaleY ) {
    HRESULT _hr = raw_PlayEMF(metafileHandle, reserved, x, y, scaleX, scaleY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::AddImageFromFile ( _bstr_t imageFileName ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageFromFile(imageFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetImageWidth ( long imageIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetImageWidth(imageIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetImageHeight ( long imageIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetImageHeight(imageIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetImageResolution ( long imageIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetImageResolution(imageIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument3::GetImageCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetImageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::PlaceImageToCurrentPage ( long imageIndex, double left, double top ) {
    HRESULT _hr = raw_PlaceImageToCurrentPage(imageIndex, left, top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::MakeImageNegative ( long imageIndex ) {
    HRESULT _hr = raw_MakeImageNegative(imageIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::FlipImage ( long imageIndex ) {
    HRESULT _hr = raw_FlipImage(imageIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::MakeImageGrayScale ( long imageIndex ) {
    HRESULT _hr = raw_MakeImageGrayScale(imageIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::AddImageWithMask ( _bstr_t FileName, _bstr_t maskFileName ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageWithMask(FileName, maskFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPDFDocument3::GetPrinterForVirtualDC ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrinterForVirtualDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument3::PutPrinterForVirtualDC ( _bstr_t printerName ) {
    HRESULT _hr = put_PrinterForVirtualDC(printerName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPDFDocument3::PDFPAGE_GetTextHeight ( _bstr_t text ) {
    double _result = 0;
    HRESULT _hr = raw_PDFPAGE_GetTextHeight(text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IPDFDocument3::PDFPAGE_GetUnicodeTextHeight ( _bstr_t text ) {
    double _result = 0;
    HRESULT _hr = raw_PDFPAGE_GetUnicodeTextHeight(text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IPDFDocument3::GetInitialZoom ( ) {
    int _result = 0;
    HRESULT _hr = get_InitialZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutInitialZoom ( int percent ) {
    HRESULT _hr = put_InitialZoom(percent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TxZoomLevel IPDFDocument3::GetInitialZoom2 ( ) {
    TxZoomLevel _result;
    HRESULT _hr = get_InitialZoom2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutInitialZoom2 ( TxZoomLevel level ) {
    HRESULT _hr = put_InitialZoom2(level);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument3::LoadICCProfile ( _bstr_t iccFileName ) {
    long _result = 0;
    HRESULT _hr = raw_LoadICCProfile(iccFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::SetPDFAOutputIntent ( long profileHandle ) {
    HRESULT _hr = raw_SetPDFAOutputIntent(profileHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::SetPDFXOutputIntent ( long profileHandle ) {
    HRESULT _hr = raw_SetPDFXOutputIntent(profileHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument3::PDFPAGE_GetColorSpace ( ) {
    long _result = 0;
    HRESULT _hr = raw_PDFPAGE_GetColorSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline TxColorSpaceType IPDFDocument3::PDFPAGE_GetColorSpaceType ( ) {
    TxColorSpaceType _result;
    HRESULT _hr = raw_PDFPAGE_GetColorSpaceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetColorSpace ( long profileHandle ) {
    HRESULT _hr = raw_PDFPAGE_SetColorSpace(profileHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetDefaultGrayColorSpace ( ) {
    HRESULT _hr = raw_PDFPAGE_SetDefaultGrayColorSpace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetDefaultRGBColorSpace ( ) {
    HRESULT _hr = raw_PDFPAGE_SetDefaultRGBColorSpace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetDefaultCMYKColorSpace ( ) {
    HRESULT _hr = raw_PDFPAGE_SetDefaultCMYKColorSpace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetColor ( double colorComponent1, double colorComponent2, double colorComponent3, double colorComponent4 ) {
    HRESULT _hr = raw_PDFPAGE_SetColor(colorComponent1, colorComponent2, colorComponent3, colorComponent4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetColorFill ( double colorComponent1, double colorComponent2, double colorComponent3, double colorComponent4 ) {
    HRESULT _hr = raw_PDFPAGE_SetColorFill(colorComponent1, colorComponent2, colorComponent3, colorComponent4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::PDFPAGE_SetColorStroke ( double colorComponent1, double colorComponent2, double colorComponent3, double colorComponent4 ) {
    HRESULT _hr = raw_PDFPAGE_SetColorStroke(colorComponent1, colorComponent2, colorComponent3, colorComponent4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::TransformColors ( _bstr_t colorspaceFile ) {
    HRESULT _hr = raw_TransformColors(colorspaceFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument3::AddColorTransformationRule ( float originalColor1, float originalColor2, float originalColor3, float originalColor4, float transformedColor1, float transformedColor2, float transformedColor3, float transformedColor4 ) {
    HRESULT _hr = raw_AddColorTransformationRule(originalColor1, originalColor2, originalColor3, originalColor4, transformedColor1, transformedColor2, transformedColor3, transformedColor4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPDFDocument3::GetProducePDFA ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProducePDFA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument3::PutProducePDFA ( VARIANT_BOOL produce ) {
    HRESULT _hr = put_ProducePDFA(produce);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument3::SetErrorMode ( unsigned int uiLevel ) {
    HRESULT _hr = raw_SetErrorMode(uiLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void IPDFDocument3::PutPDFANNOTATION_CheckSymbol ( TxCheckSymbol _arg1 ) {
    HRESULT _hr = put_PDFANNOTATION_CheckSymbol(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPDFDocument4 wrapper method implementations
//

inline HRESULT IPDFDocument4::SetLicenseData ( _bstr_t name, _bstr_t key ) {
    HRESULT _hr = raw_SetLicenseData(name, key);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPDFDocument4::GetAutoCreateURL ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoCreateURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAutoCreateURL ( VARIANT_BOOL createURL ) {
    HRESULT _hr = put_AutoCreateURL(createURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetProducePDFA ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProducePDFA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutProducePDFA ( VARIANT_BOOL pdfa ) {
    HRESULT _hr = put_ProducePDFA(pdfa);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetPDFAOutputIntent ( long intentNumber ) {
    HRESULT _hr = raw_SetPDFAOutputIntent(intentNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetPDFXOutputIntent ( long intentNumber ) {
    HRESULT _hr = raw_SetPDFXOutputIntent(intentNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SaveToFile ( _bstr_t name, VARIANT_BOOL AutoLaunch ) {
    HRESULT _hr = raw_SaveToFile(name, AutoLaunch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::GetBufferSize ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetBufferSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IPDFDocument4::GetBuffer ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetBuffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IPDFDocument4::GetBufferAsBSTR ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBufferAsBSTR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IPDFDocument4::SaveRangeToFile ( _bstr_t name, long startPageIndex, long endPageIndex, VARIANT_BOOL AutoLaunch ) {
    HRESULT _hr = raw_SaveRangeToFile(name, startPageIndex, endPageIndex, AutoLaunch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::Open ( _bstr_t FileName, _bstr_t password ) {
    HRESULT _hr = raw_Open(FileName, password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::Append ( _bstr_t FileName, _bstr_t password ) {
    HRESULT _hr = raw_Append(FileName, password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::OpenFromBLOB ( VARIANT * document, _bstr_t password ) {
    HRESULT _hr = raw_OpenFromBLOB(document, password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::AppendFromBLOB ( VARIANT * document, _bstr_t password ) {
    HRESULT _hr = raw_AppendFromBLOB(document, password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::OpenScale ( _bstr_t FileName, _bstr_t password, float scaleX, float scaleY ) {
    HRESULT _hr = raw_OpenScale(FileName, password, scaleX, scaleY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPDFDocument4::GetWasWrongPassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WasWrongPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline compressionType IPDFDocument4::GetCompression ( ) {
    compressionType _result;
    HRESULT _hr = get_Compression(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutCompression ( compressionType type ) {
    HRESULT _hr = put_Compression(type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument4::GetLastError ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IPDFDocument4::GetUseLogging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLogging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutUseLogging ( VARIANT_BOOL use ) {
    HRESULT _hr = put_UseLogging(use);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetCurrentPage ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutCurrentPage ( long PageNumber ) {
    HRESULT _hr = put_CurrentPage(PageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetPageCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::NewPage ( ) {
    HRESULT _hr = raw_NewPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::AddPage ( ) {
    HRESULT _hr = raw_AddPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::InsertPage ( long insertPosition ) {
    HRESULT _hr = raw_InsertPage(insertPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DeletePage ( long PageNumber ) {
    HRESULT _hr = raw_DeletePage(PageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ClearCanvas ( ) {
    HRESULT _hr = raw_ClearCanvas();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::MovePage ( long PageNumber, long newPagePosition ) {
    HRESULT _hr = raw_MovePage(PageNumber, newPagePosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ConvertToA3 ( ) {
    HRESULT _hr = raw_ConvertToA3();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawPageOnPage ( long srcPageIndex, long destPageIndex, float left, float top, float width, float height ) {
    HRESULT _hr = raw_DrawPageOnPage(srcPageIndex, destPageIndex, left, top, width, height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetUnicodeAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnicodeAuthor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutUnicodeAuthor ( _bstr_t author ) {
    HRESULT _hr = put_UnicodeAuthor(author);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetAuthor ( _bstr_t author, fontCharset charset ) {
    HRESULT _hr = raw_SetAuthor(author, charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetUnicodeCreator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnicodeCreator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutUnicodeCreator ( _bstr_t creator ) {
    HRESULT _hr = put_UnicodeCreator(creator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetCreator ( _bstr_t creator, fontCharset charset ) {
    HRESULT _hr = raw_SetCreator(creator, charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetUnicodeKeywords ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnicodeKeywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutUnicodeKeywords ( _bstr_t keywords ) {
    HRESULT _hr = put_UnicodeKeywords(keywords);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetKeywords ( _bstr_t keywords, fontCharset charset ) {
    HRESULT _hr = raw_SetKeywords(keywords, charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetUnicodeProducer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnicodeProducer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutUnicodeProducer ( _bstr_t producer ) {
    HRESULT _hr = put_UnicodeProducer(producer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetProducer ( _bstr_t producer, fontCharset charset ) {
    HRESULT _hr = raw_SetProducer(producer, charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetUnicodeSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnicodeSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutUnicodeSubject ( _bstr_t subject ) {
    HRESULT _hr = put_UnicodeSubject(subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetSubject ( _bstr_t subject, fontCharset charset ) {
    HRESULT _hr = raw_SetSubject(subject, charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetUnicodeTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnicodeTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutUnicodeTitle ( _bstr_t title ) {
    HRESULT _hr = put_UnicodeTitle(title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetTitle ( _bstr_t author, fontCharset charset ) {
    HRESULT _hr = raw_SetTitle(author, charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline DATE IPDFDocument4::GetCreationDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutCreationDate ( DATE CreationDate ) {
    HRESULT _hr = put_CreationDate(CreationDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ZoomName IPDFDocument4::GetInitialZoom ( ) {
    ZoomName _result;
    HRESULT _hr = get_InitialZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutInitialZoom ( ZoomName ZoomName ) {
    HRESULT _hr = put_InitialZoom(ZoomName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetInitialZoomPercent ( ) {
    long _result = 0;
    HRESULT _hr = get_InitialZoomPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutInitialZoomPercent ( long percent ) {
    HRESULT _hr = put_InitialZoomPercent(percent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetCenterWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CenterWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutCenterWindow ( VARIANT_BOOL CenterWindow ) {
    HRESULT _hr = put_CenterWindow(CenterWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetFitWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FitWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutFitWindow ( VARIANT_BOOL FitWindow ) {
    HRESULT _hr = put_FitWindow(FitWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetHideViewerMenuBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideViewerMenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutHideViewerMenuBar ( VARIANT_BOOL HideViewerMenuBar ) {
    HRESULT _hr = put_HideViewerMenuBar(HideViewerMenuBar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetHideViewerToolBar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideViewerToolBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutHideViewerToolBar ( VARIANT_BOOL HideViewerToolBar ) {
    HRESULT _hr = put_HideViewerToolBar(HideViewerToolBar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetHideViewerUI ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideViewerUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutHideViewerUI ( VARIANT_BOOL HideViewerUI ) {
    HRESULT _hr = put_HideViewerUI(HideViewerUI);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ModeType IPDFDocument4::GetViewerMode ( ) {
    ModeType _result;
    HRESULT _hr = get_ViewerMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutViewerMode ( ModeType mode ) {
    HRESULT _hr = put_ViewerMode(mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline LayoutType IPDFDocument4::GetViewerPageLayout ( ) {
    LayoutType _result;
    HRESULT _hr = get_ViewerPageLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutViewerPageLayout ( LayoutType layout ) {
    HRESULT _hr = put_ViewerPageLayout(layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DuplexType IPDFDocument4::GetViewerDuplex ( ) {
    DuplexType _result;
    HRESULT _hr = get_ViewerDuplex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutViewerDuplex ( DuplexType duplex ) {
    HRESULT _hr = put_ViewerDuplex(duplex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline EncryptionLevel IPDFDocument4::GetDocumentEncryption ( ) {
    EncryptionLevel _result;
    HRESULT _hr = get_DocumentEncryption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutDocumentEncryption ( EncryptionLevel level ) {
    HRESULT _hr = put_DocumentEncryption(level);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline AllowedPrintQuality IPDFDocument4::GetAllowPrintDocument ( ) {
    AllowedPrintQuality _result;
    HRESULT _hr = get_AllowPrintDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAllowPrintDocument ( AllowedPrintQuality printQuality ) {
    HRESULT _hr = put_AllowPrintDocument(printQuality);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline AllowedChanges IPDFDocument4::GetAllowChangeDocument ( ) {
    AllowedChanges _result;
    HRESULT _hr = get_AllowChangeDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAllowChangeDocument ( AllowedChanges AllowedChanges ) {
    HRESULT _hr = put_AllowChangeDocument(AllowedChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline AllowedCopyLevel IPDFDocument4::GetAllowCopyContent ( ) {
    AllowedCopyLevel _result;
    HRESULT _hr = get_AllowCopyContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAllowCopyContent ( AllowedCopyLevel allowedLevel ) {
    HRESULT _hr = put_AllowCopyContent(allowedLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetSecurityFlagsRaw ( long flags ) {
    HRESULT _hr = raw_SetSecurityFlagsRaw(flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetOwnerPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OwnerPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutOwnerPassword ( _bstr_t OwnerPassword ) {
    HRESULT _hr = put_OwnerPassword(OwnerPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument4::GetUserPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutUserPassword ( _bstr_t UserPassword ) {
    HRESULT _hr = put_UserPassword(UserPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::AddFont ( _bstr_t fontFace, VARIANT_BOOL bold, VARIANT_BOOL italic, VARIANT_BOOL underline, VARIANT_BOOL strikeout, fontCharset charset ) {
    long _result = 0;
    HRESULT _hr = raw_AddFont(fontFace, bold, italic, underline, strikeout, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddFontFromFile ( _bstr_t fontFileName, VARIANT_BOOL bold, VARIANT_BOOL italic, VARIANT_BOOL underline, VARIANT_BOOL strikeout ) {
    long _result = 0;
    HRESULT _hr = raw_AddFontFromFile(fontFileName, bold, italic, underline, strikeout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddBuiltInFont ( BuiltInFont font, VARIANT_BOOL underline, VARIANT_BOOL strikeout ) {
    long _result = 0;
    HRESULT _hr = raw_AddBuiltInFont(font, underline, strikeout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline EmbedStyle IPDFDocument4::GetFontEmbedStyle ( ) {
    EmbedStyle _result;
    HRESULT _hr = get_FontEmbedStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutFontEmbedStyle ( EmbedStyle style ) {
    HRESULT _hr = put_FontEmbedStyle(style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetFontCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetFontCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPDFDocument4::GetFontName ( long fontNumber ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFontName(fontNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IPDFDocument4::GetFontDataSize ( long fontNumber ) {
    long _result = 0;
    HRESULT _hr = raw_GetFontDataSize(fontNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IPDFDocument4::GetFontData ( long fontNumber ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetFontData(fontNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IPDFDocument4::SaveFontToFile ( long fontNumber, _bstr_t name ) {
    HRESULT _hr = raw_SaveFontToFile(fontNumber, name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPDFDocument4::GetEmbedCommercialFonts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EmbedCommercialFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutEmbedCommercialFonts ( VARIANT_BOOL embed ) {
    HRESULT _hr = put_EmbedCommercialFonts(embed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetDCResolution ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetDCResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline OLE_HANDLE IPDFDocument4::GetDC ( ) {
    OLE_HANDLE _result;
    HRESULT _hr = raw_GetDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPDFDocument4::GetPrinterNameForDC ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrinterNameForDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutPrinterNameForDC ( _bstr_t name ) {
    HRESULT _hr = put_PrinterNameForDC(name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetUseScreenBasedDC ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScreenBasedDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutUseScreenBasedDC ( VARIANT_BOOL use ) {
    HRESULT _hr = put_UseScreenBasedDC(use);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::FlushDC ( ) {
    HRESULT _hr = raw_FlushDC();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IPDFDocument4::GetOffsetXForDC ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetXForDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOffsetXForDC ( float offsetX ) {
    HRESULT _hr = put_OffsetXForDC(offsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IPDFDocument4::GetOffsetYForDC ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetYForDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOffsetYForDC ( float offsetY ) {
    HRESULT _hr = put_OffsetYForDC(offsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IPDFDocument4::GetScaleXForDC ( ) {
    float _result = 0;
    HRESULT _hr = get_ScaleXForDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutScaleXForDC ( float scaleX ) {
    HRESULT _hr = put_ScaleXForDC(scaleX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IPDFDocument4::GetScaleYForDC ( ) {
    float _result = 0;
    HRESULT _hr = get_ScaleYForDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutScaleYForDC ( float scaleY ) {
    HRESULT _hr = put_ScaleYForDC(scaleY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IPDFDocument4::PutDefaultFontFace ( _bstr_t _arg1 ) {
    HRESULT _hr = put_DefaultFontFace(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::AddWatermark ( ) {
    long _result = 0;
    HRESULT _hr = raw_AddWatermark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::SwitchToWatermark ( long watermarkNumber ) {
    HRESULT _hr = raw_SwitchToWatermark(watermarkNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SwitchToCurrentPage ( ) {
    HRESULT _hr = raw_SwitchToCurrentPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::AttachWatermark ( long PageNumber, long watermarkNumber ) {
    HRESULT _hr = raw_AttachWatermark(PageNumber, watermarkNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::AddWatermark2 ( VARIANT_BOOL showOnBackground ) {
    long _result = 0;
    HRESULT _hr = raw_AddWatermark2(showOnBackground, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::AddComment ( _bstr_t Comment ) {
    HRESULT _hr = raw_AddComment(Comment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SaveGraphicsState ( ) {
    HRESULT _hr = raw_SaveGraphicsState();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::RestoreGraphicsState ( ) {
    HRESULT _hr = raw_RestoreGraphicsState();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::GetPageHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_PageHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutPageHeight ( long height ) {
    HRESULT _hr = put_PageHeight(height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetPageWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_PageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutPageWidth ( long width ) {
    HRESULT _hr = put_PageWidth(width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PaperFormat IPDFDocument4::GetPageSize ( ) {
    PaperFormat _result;
    HRESULT _hr = get_PageSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutPageSize ( PaperFormat size ) {
    HRESULT _hr = put_PageSize(size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PaperOrientation IPDFDocument4::GetPageOrientation ( ) {
    PaperOrientation _result;
    HRESULT _hr = get_PageOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutPageOrientation ( PaperOrientation orientation ) {
    HRESULT _hr = put_PageOrientation(orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline RotateAngle IPDFDocument4::GetPageRotate ( ) {
    RotateAngle _result;
    HRESULT _hr = get_PageRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutPageRotate ( RotateAngle angle ) {
    HRESULT _hr = put_PageRotate(angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetPageResolution ( ) {
    long _result = 0;
    HRESULT _hr = get_PageResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutPageResolution ( long Resolution ) {
    HRESULT _hr = put_PageResolution(Resolution);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetThumbnail ( ) {
    long _result = 0;
    HRESULT _hr = get_Thumbnail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutThumbnail ( long imageNumber ) {
    HRESULT _hr = put_Thumbnail(imageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::AddLinkToPage ( float left, float top, float right, float bottom, long PageNumber, float topOffset ) {
    HRESULT _hr = raw_AddLinkToPage(left, top, right, bottom, PageNumber, topOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::AddHyperLink ( float left, float top, float right, float bottom, _bstr_t url ) {
    HRESULT _hr = raw_AddHyperLink(left, top, right, bottom, url);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::AddButton ( float left, float top, float right, float bottom, _bstr_t name ) {
    long _result = 0;
    HRESULT _hr = raw_AddButton(left, top, right, bottom, name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddCheckBox ( float left, float top, float right, float bottom, _bstr_t name ) {
    long _result = 0;
    HRESULT _hr = raw_AddCheckBox(left, top, right, bottom, name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddComboBox ( float left, float top, float right, float bottom, _bstr_t name ) {
    long _result = 0;
    HRESULT _hr = raw_AddComboBox(left, top, right, bottom, name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddEditBox ( float left, float top, float right, float bottom, _bstr_t name ) {
    long _result = 0;
    HRESULT _hr = raw_AddEditBox(left, top, right, bottom, name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddRadioButton ( float left, float top, float right, float bottom, _bstr_t name ) {
    long _result = 0;
    HRESULT _hr = raw_AddRadioButton(left, top, right, bottom, name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddActionArea ( float left, float top, float right, float bottom, long actionNumber ) {
    long _result = 0;
    HRESULT _hr = raw_AddActionArea(left, top, right, bottom, actionNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddTextAnnotation ( float x, float y, _bstr_t title, _bstr_t contents, fontCharset charset ) {
    long _result = 0;
    HRESULT _hr = raw_AddTextAnnotation(x, y, title, contents, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddUnicodeTextAnnotation ( float x, float y, _bstr_t title, _bstr_t contents ) {
    long _result = 0;
    HRESULT _hr = raw_AddUnicodeTextAnnotation(x, y, title, contents, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddFileAttachmentAnnotation ( float x, float y, _bstr_t title, _bstr_t contents, _bstr_t filePath, fontCharset charset ) {
    long _result = 0;
    HRESULT _hr = raw_AddFileAttachmentAnnotation(x, y, title, contents, filePath, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddUnicodeFileAttachmentAnnotation ( float x, float y, _bstr_t title, _bstr_t contents, _bstr_t filePath ) {
    long _result = 0;
    HRESULT _hr = raw_AddUnicodeFileAttachmentAnnotation(x, y, title, contents, filePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddSoundAnnotation ( float x, float y, _bstr_t title, _bstr_t contents, _bstr_t filePath, fontCharset charset ) {
    long _result = 0;
    HRESULT _hr = raw_AddSoundAnnotation(x, y, title, contents, filePath, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddUnicodeSoundAnnotation ( float x, float y, _bstr_t title, _bstr_t contents, _bstr_t filePath ) {
    long _result = 0;
    HRESULT _hr = raw_AddUnicodeSoundAnnotation(x, y, title, contents, filePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::PlayMetaFile ( _bstr_t metafileName, float x, float y, float scaleX, float scaleY ) {
    HRESULT _hr = raw_PlayMetaFile(metafileName, x, y, scaleX, scaleY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::PlayMetaFileFromHandle ( OLE_HANDLE metafileHandle, float x, float y, float scaleX, float scaleY ) {
    HRESULT _hr = raw_PlayMetaFileFromHandle(metafileHandle, x, y, scaleX, scaleY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::PlayMetaFileFromBuffer ( VARIANT * metafileBuffer, long metafileBufferSize, float x, float y, float scaleX, float scaleY ) {
    HRESULT _hr = raw_PlayMetaFileFromBuffer(metafileBuffer, metafileBufferSize, x, y, scaleX, scaleY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPDFDocument4::GetPlayMetafileMethodResult ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlayMetafileMethodResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::SetColor ( float component1, float component2, float component3, float component4 ) {
    HRESULT _hr = raw_SetColor(component1, component2, component3, component4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetColorFill ( float component1, float component2, float component3, float component4 ) {
    HRESULT _hr = raw_SetColorFill(component1, component2, component3, component4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetColorStroke ( float component1, float component2, float component3, float component4 ) {
    HRESULT _hr = raw_SetColorStroke(component1, component2, component3, component4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::AddColorSpace ( _bstr_t colorspaceFile ) {
    long _result = 0;
    HRESULT _hr = raw_AddColorSpace(colorspaceFile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::SetColorSpace ( long colorspaceNumber ) {
    HRESULT _hr = raw_SetColorSpace(colorspaceNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetColorSpaceType ( ColorSpaceType colorspace ) {
    HRESULT _hr = raw_SetColorSpaceType(colorspace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetColorSpaceFill ( long colorspaceNumber ) {
    HRESULT _hr = raw_SetColorSpaceFill(colorspaceNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetColorSpaceStroke ( long colorspaceNumber ) {
    HRESULT _hr = raw_SetColorSpaceStroke(colorspaceNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetColorSpaceTypeFill ( ColorSpaceType colorspace ) {
    HRESULT _hr = raw_SetColorSpaceTypeFill(colorspace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetColorSpaceTypeStroke ( ColorSpaceType colorspace ) {
    HRESULT _hr = raw_SetColorSpaceTypeStroke(colorspace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::TransformColors ( _bstr_t colorspaceFile ) {
    HRESULT _hr = raw_TransformColors(colorspaceFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::AddColorTransformationRule ( float originalColor1, float originalColor2, float originalColor3, float originalColor4, float transformedColor1, float transformedColor2, float transformedColor3, float transformedColor4 ) {
    HRESULT _hr = raw_AddColorTransformationRule(originalColor1, originalColor2, originalColor3, originalColor4, transformedColor1, transformedColor2, transformedColor3, transformedColor4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawArc ( float left, float top, float right, float bottom, float firstX, float firstY, float secondX, float secondY ) {
    HRESULT _hr = raw_DrawArc(left, top, right, bottom, firstX, firstY, secondX, secondY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawAngleArc ( float centerX, float centerY, float radiusX, float radiusY, float degreeStartAngle, float degreeSweepAngle ) {
    HRESULT _hr = raw_DrawAngleArc(centerX, centerY, radiusX, radiusY, degreeStartAngle, degreeSweepAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawArcTo ( float left, float top, float right, float bottom, float firstX, float firstY, float secondX, float secondY, VARIANT_BOOL isClockwise ) {
    HRESULT _hr = raw_DrawArcTo(left, top, right, bottom, firstX, firstY, secondX, secondY, isClockwise);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IPDFDocument4::GetCurrentX ( ) {
    float _result = 0;
    HRESULT _hr = raw_GetCurrentX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IPDFDocument4::GetCurrentY ( ) {
    float _result = 0;
    HRESULT _hr = raw_GetCurrentY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::DrawCircle ( float centerX, float centerY, float radius ) {
    HRESULT _hr = raw_DrawCircle(centerX, centerY, radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ClosePath ( ) {
    HRESULT _hr = raw_ClosePath();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawCurveTo ( float firstX, float firstY, float secondX, float secondY, float thirdX, float thirdY ) {
    HRESULT _hr = raw_DrawCurveTo(firstX, firstY, secondX, secondY, thirdX, thirdY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawEllipse ( float left, float top, float right, float bottom ) {
    HRESULT _hr = raw_DrawEllipse(left, top, right, bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::AlternateClip ( ) {
    HRESULT _hr = raw_AlternateClip();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::AlternateFill ( ) {
    HRESULT _hr = raw_AlternateFill();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::AlternateFillAndStroke ( ) {
    HRESULT _hr = raw_AlternateFillAndStroke();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::Clip ( ) {
    HRESULT _hr = raw_Clip();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::Fill ( ) {
    HRESULT _hr = raw_Fill();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::Stroke ( ) {
    HRESULT _hr = raw_Stroke();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::FillAndStroke ( ) {
    HRESULT _hr = raw_FillAndStroke();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPDFDocument4::InPath ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_InPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::DrawLineTo ( float x, float y ) {
    HRESULT _hr = raw_DrawLineTo(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::MoveTo ( float x, float y ) {
    HRESULT _hr = raw_MoveTo(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ResetPath ( ) {
    HRESULT _hr = raw_ResetPath();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawPie ( float left, float top, float right, float bottom, float firstX, float firstY, float secondX, float secondY ) {
    HRESULT _hr = raw_DrawPie(left, top, right, bottom, firstX, firstY, secondX, secondY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawAnglePie ( float left, float top, float right, float bottom, float degreeStartAngle, float degreeSweepAngle ) {
    HRESULT _hr = raw_DrawAnglePie(left, top, right, bottom, degreeStartAngle, degreeSweepAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawRectangle ( float left, float top, float width, float height, float RotateAngle ) {
    HRESULT _hr = raw_DrawRectangle(left, top, width, height, RotateAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawRoundRectangle ( float left, float top, float width, float height, float cornerWidth, float cornerHeight ) {
    HRESULT _hr = raw_DrawRoundRectangle(left, top, width, height, cornerWidth, cornerHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::RotateCoords ( float angle ) {
    HRESULT _hr = raw_RotateCoords(angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ScaleCoords ( float scaleX, float scaleY ) {
    HRESULT _hr = raw_ScaleCoords(scaleX, scaleY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::TranslateCoords ( float x, float y ) {
    HRESULT _hr = raw_TranslateCoords(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetLineDash ( _bstr_t dashString ) {
    HRESULT _hr = raw_SetLineDash(dashString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetFlatness ( long flatness ) {
    HRESULT _hr = raw_SetFlatness(flatness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetLineCapStyle ( LineCapStyle lineCap ) {
    HRESULT _hr = raw_SetLineCapStyle(lineCap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetLineJoinStyle ( LineJoinStyle lineJoin ) {
    HRESULT _hr = raw_SetLineJoinStyle(lineJoin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetLineWidth ( float lineWidth ) {
    HRESULT _hr = raw_SetLineWidth(lineWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetMiterLimit ( float miterLimit ) {
    HRESULT _hr = raw_SetMiterLimit(miterLimit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawImage ( long imageNumber, float left, float top, float width, float height, float angle ) {
    HRESULT _hr = raw_DrawImage(imageNumber, left, top, width, height, angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ShowImage ( long imageNumber, float left, float top ) {
    HRESULT _hr = raw_ShowImage(imageNumber, left, top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SkewCoords ( float xAngle, float yAngle ) {
    HRESULT _hr = raw_SkewCoords(xAngle, yAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::UseFont ( long fontNumber, float fontSizePt ) {
    HRESULT _hr = raw_UseFont(fontNumber, fontSizePt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IPDFDocument4::GetCurrentTextX ( ) {
    float _result = 0;
    HRESULT _hr = raw_GetCurrentTextX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IPDFDocument4::GetCurrentTextY ( ) {
    float _result = 0;
    HRESULT _hr = raw_GetCurrentTextY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IPDFDocument4::GetTextHeight ( _bstr_t text ) {
    float _result = 0;
    HRESULT _hr = raw_GetTextHeight(text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IPDFDocument4::GetTextWidth ( _bstr_t text ) {
    float _result = 0;
    HRESULT _hr = raw_GetTextWidth(text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IPDFDocument4::GetUnicodeTextHeight ( _bstr_t text ) {
    float _result = 0;
    HRESULT _hr = raw_GetUnicodeTextHeight(text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IPDFDocument4::GetUnicodeTextWidth ( _bstr_t text ) {
    float _result = 0;
    HRESULT _hr = raw_GetUnicodeTextWidth(text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IPDFDocument4::GetTextAngle ( ) {
    float _result = 0;
    HRESULT _hr = get_TextAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutTextAngle ( float angleDegrees ) {
    HRESULT _hr = put_TextAngle(angleDegrees);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetCharacterSpacing ( float spacing ) {
    HRESULT _hr = raw_SetCharacterSpacing(spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetTextHorizontalScaling ( float scaling ) {
    HRESULT _hr = raw_SetTextHorizontalScaling(scaling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetTextPosition ( float x, float y ) {
    HRESULT _hr = raw_SetTextPosition(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetTextRenderingMode ( TextRenderingMode mode ) {
    HRESULT _hr = raw_SetTextRenderingMode(mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetTextRise ( float Rise ) {
    HRESULT _hr = raw_SetTextRise(Rise);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetWordSpacing ( float spacing ) {
    HRESULT _hr = raw_SetWordSpacing(spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::UseFont2 ( long fontNumber, float fontSizePt, VARIANT_BOOL underline, VARIANT_BOOL strikeout ) {
    HRESULT _hr = raw_UseFont2(fontNumber, fontSizePt, underline, strikeout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline TextDirection IPDFDocument4::GetTextDirection ( ) {
    TextDirection _result;
    HRESULT _hr = raw_GetTextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::SetTextDirection ( TextDirection TextDirection ) {
    HRESULT _hr = raw_SetTextDirection(TextDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ShowText ( _bstr_t text ) {
    HRESULT _hr = raw_ShowText(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ShowTextAligned ( float left, float top, float right, float bottom, TextAlign align, VerticalAlign VerticalAlign, _bstr_t text ) {
    HRESULT _hr = raw_ShowTextAligned(left, top, right, bottom, align, VerticalAlign, text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ShowTextAt ( float x, float y, _bstr_t text ) {
    HRESULT _hr = raw_ShowTextAt(x, y, text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::ShowTextLines ( float left, float top, float right, float bottom, float interval, TextAlign align, VerticalAlign VerticalAlign, _bstr_t text ) {
    long _result = 0;
    HRESULT _hr = raw_ShowTextLines(left, top, right, bottom, interval, align, VerticalAlign, text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::ShowTextParagraph ( float x, float y, ParagraphAlign pAlign, float interval, float marginLeft, float marginTop, float marginRight, float marginBottom, _bstr_t text ) {
    HRESULT _hr = raw_ShowTextParagraph(x, y, pAlign, interval, marginLeft, marginTop, marginRight, marginBottom, text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ShowUnicodeText ( _bstr_t text ) {
    HRESULT _hr = raw_ShowUnicodeText(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ShowUnicodeTextAligned ( float left, float top, float right, float bottom, TextAlign align, VerticalAlign VerticalAlign, _bstr_t text ) {
    HRESULT _hr = raw_ShowUnicodeTextAligned(left, top, right, bottom, align, VerticalAlign, text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::ShowUnicodeTextAt ( float x, float y, _bstr_t text ) {
    HRESULT _hr = raw_ShowUnicodeTextAt(x, y, text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::ShowUnicodeTextLines ( float left, float top, float right, float bottom, float interval, TextAlign align, VerticalAlign VerticalAlign, _bstr_t text ) {
    long _result = 0;
    HRESULT _hr = raw_ShowUnicodeTextLines(left, top, right, bottom, interval, align, VerticalAlign, text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::ShowUnicodeTextParagraph ( float x, float y, ParagraphAlign pAlign, float interval, float marginLeft, float marginTop, float marginRight, float marginBottom, _bstr_t text ) {
    HRESULT _hr = raw_ShowUnicodeTextParagraph(x, y, pAlign, interval, marginLeft, marginTop, marginRight, marginBottom, text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetDocumentText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDocumentText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IPDFDocument4::GetPageText ( long PageNumber ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPageText(PageNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IPDFDocument4::AddImageFromHandle ( OLE_HANDLE handle ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageFromHandle(handle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddImageFromBuffer ( LPSTR imageBuffer, long bufferSizeInBytes ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageFromBuffer(imageBuffer, bufferSizeInBytes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddImageFromBLOB ( VARIANT * image ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageFromBLOB(image, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddImageFromFile ( _bstr_t name ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageFromFile(name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddImageWithColorMask ( _bstr_t FileName, OLE_COLOR rgbColor ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageWithColorMask(FileName, rgbColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddImageWithMask ( _bstr_t FileName, _bstr_t maskFileName ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageWithMask(FileName, maskFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::TransformImage ( long imageNumber, ImageTransformation transformation ) {
    HRESULT _hr = raw_TransformImage(imageNumber, transformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::GetImageCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetImageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetImageHeight ( long imageNumber ) {
    long _result = 0;
    HRESULT _hr = raw_GetImageHeight(imageNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetImageWidth ( long imageNumber ) {
    long _result = 0;
    HRESULT _hr = raw_GetImageWidth(imageNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetImageResolution ( long imageNumber ) {
    long _result = 0;
    HRESULT _hr = raw_GetImageResolution(imageNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddImageFromHandleWithColorMask ( OLE_HANDLE handle, OLE_COLOR rgbColor ) {
    long _result = 0;
    HRESULT _hr = raw_AddImageFromHandleWithColorMask(handle, rgbColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutCompressMonochromeImages ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_CompressMonochromeImages(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetImageDataSize ( long imageNumber ) {
    long _result = 0;
    HRESULT _hr = raw_GetImageDataSize(imageNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IPDFDocument4::GetImageData ( long imageNumber ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetImageData(imageNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IPDFDocument4::AddControlToAction ( long actionNumber, long controlNumber ) {
    HRESULT _hr = raw_AddControlToAction(actionNumber, controlNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::CreateGoToPageAction ( long PageNumber, float topOffset ) {
    long _result = 0;
    HRESULT _hr = raw_CreateGoToPageAction(PageNumber, topOffset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::CreateImportDataAction ( _bstr_t FileName ) {
    long _result = 0;
    HRESULT _hr = raw_CreateImportDataAction(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::CreateJavascriptAction ( _bstr_t scriptContents ) {
    long _result = 0;
    HRESULT _hr = raw_CreateJavascriptAction(scriptContents, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::CreateResetFormAction ( ) {
    long _result = 0;
    HRESULT _hr = raw_CreateResetFormAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::CreateSubmitFormAction ( _bstr_t url, VARIANT_BOOL sendEmptyFields, SubmitMethod SubmitMethod ) {
    long _result = 0;
    HRESULT _hr = raw_CreateSubmitFormAction(url, sendEmptyFields, SubmitMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::CreateHyperLinkAction ( _bstr_t url ) {
    long _result = 0;
    HRESULT _hr = raw_CreateHyperLinkAction(url, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::CreateShowControlAction ( ) {
    long _result = 0;
    HRESULT _hr = raw_CreateShowControlAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::CreateHideControlAction ( ) {
    long _result = 0;
    HRESULT _hr = raw_CreateHideControlAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetOnOpenDocument ( ) {
    long _result = 0;
    HRESULT _hr = get_OnOpenDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOnOpenDocument ( long actionNumber ) {
    HRESULT _hr = put_OnOpenDocument(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetCurrentAnnotation ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentAnnotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutCurrentAnnotation ( long annotNumber ) {
    HRESULT _hr = put_CurrentAnnotation(annotNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetOnControlBeforeFormatting ( ) {
    long _result = 0;
    HRESULT _hr = get_OnControlBeforeFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOnControlBeforeFormatting ( long actionNumber ) {
    HRESULT _hr = put_OnControlBeforeFormatting(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetOnControlChange ( ) {
    long _result = 0;
    HRESULT _hr = get_OnControlChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOnControlChange ( long actionNumber ) {
    HRESULT _hr = put_OnControlChange(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetOnControlKeyPress ( ) {
    long _result = 0;
    HRESULT _hr = get_OnControlKeyPress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOnControlKeyPress ( long actionNumber ) {
    HRESULT _hr = put_OnControlKeyPress(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetOnControlSetFocus ( ) {
    long _result = 0;
    HRESULT _hr = get_OnControlSetFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOnControlSetFocus ( long actionNumber ) {
    HRESULT _hr = put_OnControlSetFocus(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetOnControlLostFocus ( ) {
    long _result = 0;
    HRESULT _hr = get_OnControlLostFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOnControlLostFocus ( long actionNumber ) {
    HRESULT _hr = put_OnControlLostFocus(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetOnControlMouseDown ( ) {
    long _result = 0;
    HRESULT _hr = get_OnControlMouseDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOnControlMouseDown ( long actionNumber ) {
    HRESULT _hr = put_OnControlMouseDown(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetOnControlMouseUp ( ) {
    long _result = 0;
    HRESULT _hr = get_OnControlMouseUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOnControlMouseUp ( long actionNumber ) {
    HRESULT _hr = put_OnControlMouseUp(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetOnControlMouseEnter ( ) {
    long _result = 0;
    HRESULT _hr = get_OnControlMouseEnter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOnControlMouseEnter ( long actionNumber ) {
    HRESULT _hr = put_OnControlMouseEnter(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetOnControlMouseExit ( ) {
    long _result = 0;
    HRESULT _hr = get_OnControlMouseExit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOnControlMouseExit ( long actionNumber ) {
    HRESULT _hr = put_OnControlMouseExit(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetOnControlOtherChanged ( ) {
    long _result = 0;
    HRESULT _hr = get_OnControlOtherChanged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutOnControlOtherChanged ( long actionNumber ) {
    HRESULT _hr = put_OnControlOtherChanged(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline AnnotationType IPDFDocument4::GetAnnotType ( ) {
    AnnotationType _result;
    HRESULT _hr = raw_GetAnnotType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetAnnotAction ( ) {
    long _result = 0;
    HRESULT _hr = get_AnnotAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotAction ( long actionNumber ) {
    HRESULT _hr = put_AnnotAction(actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline OLE_COLOR IPDFDocument4::GetControlBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ControlBackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutControlBackColor ( OLE_COLOR color ) {
    HRESULT _hr = put_ControlBackColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline OLE_COLOR IPDFDocument4::GetAnnotBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_AnnotBorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotBorderColor ( OLE_COLOR color ) {
    HRESULT _hr = put_AnnotBorderColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline AnnotationBorderStyle IPDFDocument4::GetAnnotBorderStyle ( ) {
    AnnotationBorderStyle _result;
    HRESULT _hr = get_AnnotBorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotBorderStyle ( AnnotationBorderStyle style ) {
    HRESULT _hr = put_AnnotBorderStyle(style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IPDFDocument4::GetAnnotLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_AnnotLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotLeft ( float left ) {
    HRESULT _hr = put_AnnotLeft(left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IPDFDocument4::GetAnnotTop ( ) {
    float _result = 0;
    HRESULT _hr = get_AnnotTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotTop ( float top ) {
    HRESULT _hr = put_AnnotTop(top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IPDFDocument4::GetAnnotWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_AnnotWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotWidth ( float width ) {
    HRESULT _hr = put_AnnotWidth(width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IPDFDocument4::GetAnnotHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_AnnotHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotHeight ( float height ) {
    HRESULT _hr = put_AnnotHeight(height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetControlChecked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlChecked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutControlChecked ( VARIANT_BOOL checked ) {
    HRESULT _hr = put_ControlChecked(checked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetComboBoxEditEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComboBoxEditEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutComboBoxEditEnabled ( VARIANT_BOOL enabled ) {
    HRESULT _hr = put_ComboBoxEditEnabled(enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument4::GetRadioButtonExportValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RadioButtonExportValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutRadioButtonExportValue ( _bstr_t exportValue ) {
    HRESULT _hr = put_RadioButtonExportValue(exportValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetAnnotInvisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnnotInvisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotInvisible ( VARIANT_BOOL invisible ) {
    HRESULT _hr = put_AnnotInvisible(invisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetAnnotHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnnotHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotHidden ( VARIANT_BOOL hidden ) {
    HRESULT _hr = put_AnnotHidden(hidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetAnnotPrint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnnotPrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotPrint ( VARIANT_BOOL print ) {
    HRESULT _hr = put_AnnotPrint(print);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetAnnotNoZoom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnnotNoZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotNoZoom ( VARIANT_BOOL noZoom ) {
    HRESULT _hr = put_AnnotNoZoom(noZoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetAnnotNoRotate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnnotNoRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotNoRotate ( VARIANT_BOOL noRotate ) {
    HRESULT _hr = put_AnnotNoRotate(noRotate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetAnnotNoView ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnnotNoView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotNoView ( VARIANT_BOOL noView ) {
    HRESULT _hr = put_AnnotNoView(noView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetAnnotReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnnotReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotReadOnly ( VARIANT_BOOL readOnly ) {
    HRESULT _hr = put_AnnotReadOnly(readOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetAnnotLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnnotLocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotLocked ( VARIANT_BOOL locked ) {
    HRESULT _hr = put_AnnotLocked(locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetAnnotToggleNoView ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnnotToggleNoView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotToggleNoView ( VARIANT_BOOL toggleNoView ) {
    HRESULT _hr = put_AnnotToggleNoView(toggleNoView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetAnnotLockedContents ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnnotLockedContents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotLockedContents ( VARIANT_BOOL lockedContents ) {
    HRESULT _hr = put_AnnotLockedContents(lockedContents);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline OLE_COLOR IPDFDocument4::GetControlTextColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ControlTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutControlTextColor ( OLE_COLOR color ) {
    HRESULT _hr = put_ControlTextColor(color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetControlFont ( ) {
    long _result = 0;
    HRESULT _hr = get_ControlFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutControlFont ( long fontNumber ) {
    HRESULT _hr = put_ControlFont(fontNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IPDFDocument4::GetControlFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_ControlFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutControlFontSize ( float sizePt ) {
    HRESULT _hr = put_ControlFontSize(sizePt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument4::GetAnnotBorderDashPattern ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AnnotBorderDashPattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutAnnotBorderDashPattern ( _bstr_t dashPattern ) {
    HRESULT _hr = put_AnnotBorderDashPattern(dashPattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetIsPasswordEditBox ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPasswordEditBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutIsPasswordEditBox ( VARIANT_BOOL password ) {
    HRESULT _hr = put_IsPasswordEditBox(password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetIsOpenedTextAnnot ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOpenedTextAnnot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutIsOpenedTextAnnot ( VARIANT_BOOL opened ) {
    HRESULT _hr = put_IsOpenedTextAnnot(opened);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetIsReadOnlyControl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnlyControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutIsReadOnlyControl ( VARIANT_BOOL readOnly ) {
    HRESULT _hr = put_IsReadOnlyControl(readOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetIsRequiredControl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRequiredControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutIsRequiredControl ( VARIANT_BOOL required ) {
    HRESULT _hr = put_IsRequiredControl(required);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetIsMultilineEditBox ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMultilineEditBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutIsMultilineEditBox ( VARIANT_BOOL multiline ) {
    HRESULT _hr = put_IsMultilineEditBox(multiline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetAnnotBorderWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_AnnotBorderWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotBorderWidth ( long width ) {
    HRESULT _hr = put_AnnotBorderWidth(width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetIsRichTextEditBox ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRichTextEditBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutIsRichTextEditBox ( VARIANT_BOOL richText ) {
    HRESULT _hr = put_IsRichTextEditBox(richText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetRawControlBits ( ) {
    long _result = 0;
    HRESULT _hr = get_RawControlBits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutRawControlBits ( long value ) {
    HRESULT _hr = put_RawControlBits(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IPDFDocument4::PutCheckSymbol ( CheckSymbol _arg1 ) {
    HRESULT _hr = put_CheckSymbol(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TextAlign IPDFDocument4::GetControlTextAlign ( ) {
    TextAlign _result;
    HRESULT _hr = get_ControlTextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutControlTextAlign ( TextAlign align ) {
    HRESULT _hr = put_ControlTextAlign(align);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VerticalAlign IPDFDocument4::GetControlVerticalAlign ( ) {
    VerticalAlign _result;
    HRESULT _hr = get_ControlVerticalAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutControlVerticalAlign ( VerticalAlign align ) {
    HRESULT _hr = put_ControlVerticalAlign(align);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetEditBoxMaxLength ( ) {
    long _result = 0;
    HRESULT _hr = get_EditBoxMaxLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutEditBoxMaxLength ( long maxLength ) {
    HRESULT _hr = put_EditBoxMaxLength(maxLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument4::GetControlName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ControlName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutControlName ( _bstr_t name ) {
    HRESULT _hr = put_ControlName(name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IPDFDocument4::GetControlShowBorder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ControlShowBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutControlShowBorder ( VARIANT_BOOL show ) {
    HRESULT _hr = put_ControlShowBorder(show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TextAnnotationIcon IPDFDocument4::GetTextAnnotIcon ( ) {
    TextAnnotationIcon _result;
    HRESULT _hr = get_TextAnnotIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutTextAnnotIcon ( TextAnnotationIcon icon ) {
    HRESULT _hr = put_TextAnnotIcon(icon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPDFDocument4::GetComboBoxUnicodeItems ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ComboBoxUnicodeItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutComboBoxUnicodeItems ( _bstr_t items ) {
    HRESULT _hr = put_ComboBoxUnicodeItems(items);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetComboBoxItems ( _bstr_t items, fontCharset charset ) {
    HRESULT _hr = raw_SetComboBoxItems(items, charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetAnnotUnicodeCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AnnotUnicodeCaption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutAnnotUnicodeCaption ( _bstr_t caption ) {
    HRESULT _hr = put_AnnotUnicodeCaption(caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetAnnotCaption ( _bstr_t caption, fontCharset charset ) {
    HRESULT _hr = raw_SetAnnotCaption(caption, charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetControlUnicodeHint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ControlUnicodeHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutControlUnicodeHint ( _bstr_t hint ) {
    HRESULT _hr = put_ControlUnicodeHint(hint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetControlHint ( _bstr_t hint, fontCharset charset ) {
    HRESULT _hr = raw_SetControlHint(hint, charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetAnnotUnicodeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AnnotUnicodeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPDFDocument4::PutAnnotUnicodeText ( _bstr_t text ) {
    HRESULT _hr = put_AnnotUnicodeText(text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::SetAnnotText ( _bstr_t text, fontCharset charset ) {
    HRESULT _hr = raw_SetAnnotText(text, charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::GetAnnotCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetAnnotCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline FileAttachmentAnnotationIcon IPDFDocument4::GetFileAttachmentAnnotIcon ( ) {
    FileAttachmentAnnotationIcon _result;
    HRESULT _hr = get_FileAttachmentAnnotIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutFileAttachmentAnnotIcon ( FileAttachmentAnnotationIcon icon ) {
    HRESULT _hr = put_FileAttachmentAnnotIcon(icon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SoundAnnotationIcon IPDFDocument4::GetSoundAnnotIcon ( ) {
    SoundAnnotationIcon _result;
    HRESULT _hr = get_SoundAnnotIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutSoundAnnotIcon ( SoundAnnotationIcon icon ) {
    HRESULT _hr = put_SoundAnnotIcon(icon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IPDFDocument4::GetAnnotSamplingRate ( ) {
    float _result = 0;
    HRESULT _hr = get_AnnotSamplingRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotSamplingRate ( float rate ) {
    HRESULT _hr = put_AnnotSamplingRate(rate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetAnnotNumberOfSoundChannels ( ) {
    long _result = 0;
    HRESULT _hr = get_AnnotNumberOfSoundChannels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotNumberOfSoundChannels ( long numberChannels ) {
    HRESULT _hr = put_AnnotNumberOfSoundChannels(numberChannels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPDFDocument4::GetAnnotNumberOfBitsPerSample ( ) {
    long _result = 0;
    HRESULT _hr = get_AnnotNumberOfBitsPerSample(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotNumberOfBitsPerSample ( long numberBits ) {
    HRESULT _hr = put_AnnotNumberOfBitsPerSample(numberBits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline EncodingFormat IPDFDocument4::GetAnnotEncodingFormat ( ) {
    EncodingFormat _result;
    HRESULT _hr = get_AnnotEncodingFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPDFDocument4::PutAnnotEncodingFormat ( EncodingFormat format ) {
    HRESULT _hr = put_AnnotEncodingFormat(format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPDFDocument4::RemoveAnnotation ( long annotNumber ) {
    HRESULT _hr = raw_RemoveAnnotation(annotNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::GetAnnotationPage ( long annotNumber ) {
    long _result = 0;
    HRESULT _hr = raw_GetAnnotationPage(annotNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPDFDocument4::GetAttachmentAnnotationFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttachmentAnnotationFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IPDFDocument4::SaveAttachmentAnnotationToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveAttachmentAnnotationToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPDFDocument4::IsControlNameVacant ( _bstr_t name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsControlNameVacant(name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetRootOutline ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetRootOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetOutlineCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetOutlineCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetOutlineChildCount ( long outlineNode ) {
    long _result = 0;
    HRESULT _hr = raw_GetOutlineChildCount(outlineNode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetOutlineChild ( long outlineNode, long childIndex ) {
    long _result = 0;
    HRESULT _hr = raw_GetOutlineChild(outlineNode, childIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetOutlineFirstChild ( long outlineNode ) {
    long _result = 0;
    HRESULT _hr = raw_GetOutlineFirstChild(outlineNode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetOutlineLastChild ( long outlineNode ) {
    long _result = 0;
    HRESULT _hr = raw_GetOutlineLastChild(outlineNode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetNextOutline ( long outlineNode ) {
    long _result = 0;
    HRESULT _hr = raw_GetNextOutline(outlineNode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetNextSiblingOutline ( long outlineNode ) {
    long _result = 0;
    HRESULT _hr = raw_GetNextSiblingOutline(outlineNode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetPrevOutline ( long outlineNode ) {
    long _result = 0;
    HRESULT _hr = raw_GetPrevOutline(outlineNode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetPrevSiblingOutline ( long outlineNode ) {
    long _result = 0;
    HRESULT _hr = raw_GetPrevSiblingOutline(outlineNode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddOutlineBefore ( long outlineNode, _bstr_t title, fontCharset charset ) {
    long _result = 0;
    HRESULT _hr = raw_AddOutlineBefore(outlineNode, title, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddUnicodeOutlineBefore ( long outlineNode, _bstr_t title ) {
    long _result = 0;
    HRESULT _hr = raw_AddUnicodeOutlineBefore(outlineNode, title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddOutlineAfter ( long outlineNode, _bstr_t title, fontCharset charset ) {
    long _result = 0;
    HRESULT _hr = raw_AddOutlineAfter(outlineNode, title, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddUnicodeOutlineAfter ( long outlineNode, _bstr_t title ) {
    long _result = 0;
    HRESULT _hr = raw_AddUnicodeOutlineAfter(outlineNode, title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddOutlineChild ( long outlineNode, _bstr_t title, fontCharset charset ) {
    long _result = 0;
    HRESULT _hr = raw_AddOutlineChild(outlineNode, title, charset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddUnicodeOutlineChild ( long outlineNode, _bstr_t title ) {
    long _result = 0;
    HRESULT _hr = raw_AddUnicodeOutlineChild(outlineNode, title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::GetOutlineAction ( long outlineNode ) {
    long _result = 0;
    HRESULT _hr = raw_GetOutlineAction(outlineNode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::SetOutlineAction ( long outlineNode, long actionNumber ) {
    HRESULT _hr = raw_SetOutlineAction(outlineNode, actionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPDFDocument4::IsOutlineExpanded ( long outlineNode ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsOutlineExpanded(outlineNode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::SetOutlineExpanded ( long outlineNode, VARIANT_BOOL expanded ) {
    HRESULT _hr = raw_SetOutlineExpanded(outlineNode, expanded);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPDFDocument4::GetOutlineUnicodeTitle ( long outlineNode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOutlineUnicodeTitle(outlineNode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IPDFDocument4::SetOutlineUnicodeTitle ( long outlineNode, _bstr_t title ) {
    HRESULT _hr = raw_SetOutlineUnicodeTitle(outlineNode, title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetOutlineTitle ( long outlineNode, _bstr_t title, fontCharset charset ) {
    HRESULT _hr = raw_SetOutlineTitle(outlineNode, title, charset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DeleteOutline ( long outlineNode, VARIANT_BOOL onlyChildren ) {
    HRESULT _hr = raw_DeleteOutline(outlineNode, onlyChildren);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::RemoveOutlines ( ) {
    HRESULT _hr = raw_RemoveOutlines();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::AddColoredPattern ( PatternTilingType tilingType ) {
    long _result = 0;
    HRESULT _hr = raw_AddColoredPattern(tilingType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPDFDocument4::AddUnColoredPattern ( PatternTilingType tilingType, ColorSpaceType type ) {
    long _result = 0;
    HRESULT _hr = raw_AddUnColoredPattern(tilingType, type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::SwitchToPattern ( long patternNumber ) {
    HRESULT _hr = raw_SwitchToPattern(patternNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetPattern ( long patternNumber ) {
    HRESULT _hr = raw_SetPattern(patternNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetOpacity ( float opacity ) {
    HRESULT _hr = raw_SetOpacity(opacity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetOpacityFill ( float opacity ) {
    HRESULT _hr = raw_SetOpacityFill(opacity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetOpacityStroke ( float opacity ) {
    HRESULT _hr = raw_SetOpacityStroke(opacity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetBlendMode ( BlendMode mode ) {
    HRESULT _hr = raw_SetBlendMode(mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::CreateContentGroup ( _bstr_t groupName ) {
    long _result = 0;
    HRESULT _hr = raw_CreateContentGroup(groupName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::BeginMarkedContent ( long groupIndex ) {
    HRESULT _hr = raw_BeginMarkedContent(groupIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::EndMarkedContent ( ) {
    HRESULT _hr = raw_EndMarkedContent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPDFDocument4::GetContentGroupState ( long groupIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetContentGroupState(groupIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::SetContentGroupState ( long groupIndex, VARIANT_BOOL groupState ) {
    HRESULT _hr = raw_SetContentGroupState(groupIndex, groupState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::GetContentGroupCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetContentGroupCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPDFDocument4::GetContentGroupName ( long groupIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetContentGroupName(groupIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IPDFDocument4::SetContentGroupName ( long groupIndex, _bstr_t groupName ) {
    HRESULT _hr = raw_SetContentGroupName(groupIndex, groupName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::BeginOrder ( _bstr_t orderName ) {
    HRESULT _hr = raw_BeginOrder(orderName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::EndOrder ( ) {
    HRESULT _hr = raw_EndOrder();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::AddContentGroup ( long groupIndex ) {
    HRESULT _hr = raw_AddContentGroup(groupIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::RemoveOrders ( ) {
    HRESULT _hr = raw_RemoveOrders();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::DrawPageToDC ( OLE_HANDLE HDC, long PageNumber, float zoomX, float zoomY, VARIANT_BOOL drawControls ) {
    HRESULT _hr = raw_DrawPageToDC(HDC, PageNumber, zoomX, zoomY, drawControls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SavePageAsBMP ( long PageNumber, _bstr_t FileName, long dpiX, long dpiY ) {
    HRESULT _hr = raw_SavePageAsBMP(PageNumber, FileName, dpiX, dpiY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SavePageAsJPEG ( long PageNumber, _bstr_t FileName, long dpiX, long dpiY ) {
    HRESULT _hr = raw_SavePageAsJPEG(PageNumber, FileName, dpiX, dpiY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SavePageAsGIF ( long PageNumber, _bstr_t FileName, long dpiX, long dpiY ) {
    HRESULT _hr = raw_SavePageAsGIF(PageNumber, FileName, dpiX, dpiY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SavePageAsPNG ( long PageNumber, _bstr_t FileName, long dpiX, long dpiY ) {
    HRESULT _hr = raw_SavePageAsPNG(PageNumber, FileName, dpiX, dpiY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SavePageAsTIFF ( long PageNumber, _bstr_t FileName, long dpiX, long dpiY ) {
    HRESULT _hr = raw_SavePageAsTIFF(PageNumber, FileName, dpiX, dpiY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SavePageAsEMF ( long PageNumber, _bstr_t FileName, long dpiX, long dpiY ) {
    HRESULT _hr = raw_SavePageAsEMF(PageNumber, FileName, dpiX, dpiY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SaveDocumentAsTIFF ( _bstr_t FileName, long dpiX, long dpiY ) {
    HRESULT _hr = raw_SaveDocumentAsTIFF(FileName, dpiX, dpiY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPDFDocument4::AddTable ( long nColumn, long nRow, long defaultFont, float defaultFontSize ) {
    long _result = 0;
    HRESULT _hr = raw_AddTable(nColumn, nRow, defaultFont, defaultFontSize, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPDFDocument4::ShowTable ( long tableNumber, float left, float top, float scaleX, float scaleY ) {
    HRESULT _hr = raw_ShowTable(tableNumber, left, top, scaleX, scaleY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetTableColumnSize ( long tableNumber, long columnNumber, float width ) {
    HRESULT _hr = raw_SetTableColumnSize(tableNumber, columnNumber, width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetTableRowSize ( long tableNumber, long rowNumber, float height ) {
    HRESULT _hr = raw_SetTableRowSize(tableNumber, rowNumber, height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetCellTableFont ( long tableNumber, long columnNumber, long rowNumber, long fontNumber ) {
    HRESULT _hr = raw_SetCellTableFont(tableNumber, columnNumber, rowNumber, fontNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetCellTableFontSize ( long tableNumber, long columnNumber, long rowNumber, float fontSize ) {
    HRESULT _hr = raw_SetCellTableFontSize(tableNumber, columnNumber, rowNumber, fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetCellTableText ( long tableNumber, long columnNumber, long rowNumber, _bstr_t text ) {
    HRESULT _hr = raw_SetCellTableText(tableNumber, columnNumber, rowNumber, text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetCellTableTextAlign ( long tableNumber, long columnNumber, long rowNumber, TextAlign align ) {
    HRESULT _hr = raw_SetCellTableTextAlign(tableNumber, columnNumber, rowNumber, align);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetColumnTableFont ( long tableNumber, long columnNumber, long fontNumber ) {
    HRESULT _hr = raw_SetColumnTableFont(tableNumber, columnNumber, fontNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetRowTableFont ( long tableNumber, long rowNumber, long fontNumber ) {
    HRESULT _hr = raw_SetRowTableFont(tableNumber, rowNumber, fontNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetColumnTableFontSize ( long tableNumber, long columnNumber, float fontSize ) {
    HRESULT _hr = raw_SetColumnTableFontSize(tableNumber, columnNumber, fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetRowTableFontSize ( long tableNumber, long rowNumber, float fontSize ) {
    HRESULT _hr = raw_SetRowTableFontSize(tableNumber, rowNumber, fontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetColumnTableTextAlign ( long tableNumber, long columnNumber, TextAlign align ) {
    HRESULT _hr = raw_SetColumnTableTextAlign(tableNumber, columnNumber, align);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetRowTableTextAlign ( long tableNumber, long rowNumber, TextAlign align ) {
    HRESULT _hr = raw_SetRowTableTextAlign(tableNumber, rowNumber, align);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetTableLineWidth ( long tableNumber, float lineWidth ) {
    HRESULT _hr = raw_SetTableLineWidth(tableNumber, lineWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetTableLineColor ( long tableNumber, float colorComponent1, float colorComponent2, float colorComponent3, float colorComponent4 ) {
    HRESULT _hr = raw_SetTableLineColor(tableNumber, colorComponent1, colorComponent2, colorComponent3, colorComponent4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetCellTableTextColor ( long tableNumber, long columnNumber, long rowNumber, float colorComponent1, float colorComponent2, float colorComponent3, float colorComponent4 ) {
    HRESULT _hr = raw_SetCellTableTextColor(tableNumber, columnNumber, rowNumber, colorComponent1, colorComponent2, colorComponent3, colorComponent4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetRowTableTextColor ( long tableNumber, long rowNumber, float colorComponent1, float colorComponent2, float colorComponent3, float colorComponent4 ) {
    HRESULT _hr = raw_SetRowTableTextColor(tableNumber, rowNumber, colorComponent1, colorComponent2, colorComponent3, colorComponent4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetColumnTableTextColor ( long tableNumber, long columnNumber, float colorComponent1, float colorComponent2, float colorComponent3, float colorComponent4 ) {
    HRESULT _hr = raw_SetColumnTableTextColor(tableNumber, columnNumber, colorComponent1, colorComponent2, colorComponent3, colorComponent4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPDFDocument4::SetErrorMode ( unsigned int uiLevel ) {
    HRESULT _hr = raw_SetErrorMode(uiLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
