// Created by Microsoft (R) C/C++ Compiler Version 14.16.27024.1 (99a33d53).
//
// c:\users\jozef\desktop\visionlab-fyzikalne-experimenty-sonka-almost-final\mfcapplication7\mfcapplication7\release\pdfcreatorpilot.tlh
//
// C++ source equivalent of type library PDFCreatorPilot.dll
// compiler-generated file created 02/02/19 at 16:26:34 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace PDFCreatorPilotLib {

//
// Forward references and typedefs
//

struct __declspec(uuid("f68529f8-9f30-4aee-b5d0-6da79cb9e802"))
/* LIBID */ __PDFCreatorPilotLib;
struct /* coclass */ PDFDocument3;
struct __declspec(uuid("11d3d317-c7ad-4895-8be4-1236f78cc63a"))
/* dual interface */ IPDFDocument3;
enum __MIDL_IPDFDocument3_0001;
enum __MIDL_IPDFDocument3_0002;
enum __MIDL_IPDFDocument3_0003;
enum __MIDL_IPDFDocument3_0004;
enum __MIDL_IPDFDocument3_0005;
enum __MIDL_IPDFDocument3_0006;
enum __MIDL_IPDFDocument3_0007;
enum __MIDL_IPDFDocument3_0009;
enum __MIDL_IPDFDocument3_0008;
enum __MIDL_IPDFDocument3_0011;
enum __MIDL_IPDFDocument3_0010;
enum __MIDL_IPDFDocument3_0012;
enum __MIDL_IPDFDocument3_0013;
enum __MIDL_IPDFDocument3_0017;
enum __MIDL_IPDFDocument3_0014;
enum __MIDL_IPDFDocument3_0016;
enum __MIDL_IPDFDocument3_0018;
enum __MIDL_IPDFDocument3_0019;
enum __MIDL_IPDFDocument3_0020;
enum __MIDL_IPDFDocument3_0021;
enum __MIDL_IPDFDocument3_0022;
enum __MIDL_IPDFDocument3_0023;
struct /* coclass */ PDFDocument4;
struct __declspec(uuid("a6af52ae-5767-49fa-8a9e-7d22643d6301"))
/* dual interface */ IPDFDocument4;
enum __MIDL_IPDFDocument4_0001;
enum __MIDL_IPDFDocument4_0005;
enum __MIDL_IPDFDocument4_0002;
enum __MIDL_IPDFDocument4_0003;
enum __MIDL_IPDFDocument4_0004;
enum __MIDL_IPDFDocument4_0033;
enum __MIDL_IPDFDocument4_0024;
enum __MIDL_IPDFDocument4_0025;
enum __MIDL_IPDFDocument4_0026;
enum __MIDL_IPDFDocument4_0027;
enum __MIDL_IPDFDocument4_0006;
enum __MIDL_IPDFDocument4_0007;
enum __MIDL_IPDFDocument4_0008;
enum __MIDL_IPDFDocument4_0009;
enum __MIDL_IPDFDocument4_0010;
enum __MIDL_IPDFDocument4_0011;
enum __MIDL_IPDFDocument4_0012;
enum __MIDL_IPDFDocument4_0013;
enum __MIDL_IPDFDocument4_0014;
enum __MIDL_IPDFDocument4_0018;
enum __MIDL_IPDFDocument4_0015;
enum __MIDL_IPDFDocument4_0016;
enum __MIDL_IPDFDocument4_0017;
enum __MIDL_IPDFDocument4_0019;
enum __MIDL_IPDFDocument4_0020;
enum __MIDL_IPDFDocument4_0021;
enum __MIDL_IPDFDocument4_0023;
enum __MIDL_IPDFDocument4_0034;
enum __MIDL_IPDFDocument4_0022;
enum __MIDL_IPDFDocument4_0030;
enum __MIDL_IPDFDocument4_0031;
enum __MIDL_IPDFDocument4_0032;
enum __MIDL_IPDFDocument4_0028;
enum __MIDL_IPDFDocument4_0029;
typedef enum __MIDL_IPDFDocument3_0001 TxFontCharset;
typedef enum __MIDL_IPDFDocument3_0002 TxHorJust;
typedef enum __MIDL_IPDFDocument3_0003 TxVertJust;
typedef enum __MIDL_IPDFDocument3_0004 TxTextRenderingMode;
typedef enum __MIDL_IPDFDocument3_0005 TxImageCompressionType;
typedef enum __MIDL_IPDFDocument3_0006 TxPageLayout;
typedef enum __MIDL_IPDFDocument3_0007 TxPageMode;
typedef enum __MIDL_IPDFDocument3_0009 TxPDFLineCap;
typedef enum __MIDL_IPDFDocument3_0008 TxPDFLineJoin;
typedef enum __MIDL_IPDFDocument3_0011 TxTextAnnotationIcon;
typedef enum __MIDL_IPDFDocument3_0010 TxAnnotationType;
typedef enum __MIDL_IPDFDocument3_0012 TxCryptoKeyLength;
typedef enum __MIDL_IPDFDocument3_0013 TxCompressionType;
typedef enum __MIDL_IPDFDocument3_0017 TxPDFPageSize;
typedef enum __MIDL_IPDFDocument3_0014 TxPDFPageOrientation;
typedef enum __MIDL_IPDFDocument3_0016 TxPDFPageRotate;
typedef enum __MIDL_IPDFDocument3_0018 TxPDFSubmitType;
typedef enum __MIDL_IPDFDocument3_0019 TxFontEmbeddingType;
typedef enum __MIDL_IPDFDocument3_0020 TxPDFVersion;
typedef enum __MIDL_IPDFDocument3_0021 TxZoomLevel;
typedef enum __MIDL_IPDFDocument3_0022 TxColorSpaceType;
typedef enum __MIDL_IPDFDocument3_0023 TxCheckSymbol;
typedef enum __MIDL_IPDFDocument4_0001 compressionType;
typedef enum __MIDL_IPDFDocument4_0005 fontCharset;
typedef enum __MIDL_IPDFDocument4_0002 ZoomName;
typedef enum __MIDL_IPDFDocument4_0003 ModeType;
typedef enum __MIDL_IPDFDocument4_0004 LayoutType;
typedef enum __MIDL_IPDFDocument4_0033 DuplexType;
typedef enum __MIDL_IPDFDocument4_0024 EncryptionLevel;
typedef enum __MIDL_IPDFDocument4_0025 AllowedPrintQuality;
typedef enum __MIDL_IPDFDocument4_0026 AllowedChanges;
typedef enum __MIDL_IPDFDocument4_0027 AllowedCopyLevel;
typedef enum __MIDL_IPDFDocument4_0006 BuiltInFont;
typedef enum __MIDL_IPDFDocument4_0007 EmbedStyle;
typedef enum __MIDL_IPDFDocument4_0008 PaperFormat;
typedef enum __MIDL_IPDFDocument4_0009 PaperOrientation;
typedef enum __MIDL_IPDFDocument4_0010 RotateAngle;
typedef enum __MIDL_IPDFDocument4_0011 ColorSpaceType;
typedef enum __MIDL_IPDFDocument4_0012 LineCapStyle;
typedef enum __MIDL_IPDFDocument4_0013 LineJoinStyle;
typedef enum __MIDL_IPDFDocument4_0014 TextRenderingMode;
typedef enum __MIDL_IPDFDocument4_0018 TextDirection;
typedef enum __MIDL_IPDFDocument4_0015 TextAlign;
typedef enum __MIDL_IPDFDocument4_0016 VerticalAlign;
typedef enum __MIDL_IPDFDocument4_0017 ParagraphAlign;
typedef enum __MIDL_IPDFDocument4_0019 ImageTransformation;
typedef enum __MIDL_IPDFDocument4_0020 SubmitMethod;
typedef enum __MIDL_IPDFDocument4_0021 AnnotationType;
typedef enum __MIDL_IPDFDocument4_0023 AnnotationBorderStyle;
typedef enum __MIDL_IPDFDocument4_0034 CheckSymbol;
typedef enum __MIDL_IPDFDocument4_0022 TextAnnotationIcon;
typedef enum __MIDL_IPDFDocument4_0030 FileAttachmentAnnotationIcon;
typedef enum __MIDL_IPDFDocument4_0031 SoundAnnotationIcon;
typedef enum __MIDL_IPDFDocument4_0032 EncodingFormat;
typedef enum __MIDL_IPDFDocument4_0028 PatternTilingType;
typedef enum __MIDL_IPDFDocument4_0029 BlendMode;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IPDFDocument3, __uuidof(IPDFDocument3));
_COM_SMARTPTR_TYPEDEF(IPDFDocument4, __uuidof(IPDFDocument4));

//
// Type library items
//

struct __declspec(uuid("4c26e4f7-a871-4e64-a390-dbefce574904"))
PDFDocument3;
    // [ default ] interface IPDFDocument3

enum __MIDL_IPDFDocument3_0001
{
    charsetANSI_CHARSET = 0,
    charsetEASTEUROPE_CHARSET = 238,
    charsetRUSSIAN_CHARSET = 204,
    charsetGREEK_CHARSET = 161,
    charsetTURKISH_CHARSET = 162,
    charsetBALTIC_CHARSET = 186,
    charsetSHIFTJIS_CHARSET = 128,
    charsetHANGEUL_CHARSET = 129,
    charsetGB2312_CHARSET = 134,
    charsetCHINESEBIG5_CHARSET = 136,
    charsetDEFAULT_CHARSET = 1,
    charsetSYMBOL_CHARSET = 2,
    charsetMAC_CHARSET = 77,
    charsetJOHAB_CHARSET = 130,
    charsetVIETNAMESE_CHARSET = 163,
    charsetHEBREW_CHARSET = 177,
    charsetARABIC_CHARSET = 178,
    charsetTHAI_CHARSET = 222,
    charsetOEM_CHARSET = 255
};

enum __MIDL_IPDFDocument3_0002
{
    hjLeft = 0,
    hjCenter = 1,
    hjRight = 2
};

enum __MIDL_IPDFDocument3_0003
{
    vjUp = 0,
    vjCenter = 1,
    vjDown = 2
};

enum __MIDL_IPDFDocument3_0004
{
    trmFillText = 0,
    trmStrokeText = 1,
    trmFillAndStroke = 2,
    trmNeitherFillNorStoke = 3,
    trmFillTextAndAddPathForClipping = 4,
    trmStrokeTextAndAddPathForClipping = 5,
    trmFillStrokeAndAddPathForClipping = 6,
    trmAddTextToPathForClipping = 7
};

enum __MIDL_IPDFDocument3_0005
{
    itcFlate = 0,
    itcJpeg = 1,
    itcCCITT3 = 2,
    itcCCITT32d = 3,
    itcCCITT4 = 4
};

enum __MIDL_IPDFDocument3_0006
{
    plSinglePage = 0,
    plOneColumn = 1,
    plTwoColumnLeft = 2,
    plTwoColumnRight = 3
};

enum __MIDL_IPDFDocument3_0007
{
    pmUseNone = 0,
    pmUseOutlines = 1,
    pmUseThumbs = 2,
    pmFullScreen = 3
};

enum __MIDL_IPDFDocument3_0009
{
    lcButtEnd = 0,
    lcRound = 1,
    lcProjectingSquare = 2
};

enum __MIDL_IPDFDocument3_0008
{
    ljMiter = 0,
    ljRound = 1,
    ljBevel = 2
};

enum __MIDL_IPDFDocument3_0011
{
    taiComment = 0,
    taiKey = 1,
    taiNote = 2,
    taiHelp = 3,
    taiNewParagraph = 4,
    taiParagraph = 5,
    taiInsert = 6
};

enum __MIDL_IPDFDocument3_0010
{
    catActionAnnotation = 0,
    catTextAnnotation = 1,
    catCheckBox = 2,
    catComboBox = 3,
    catRadioButton = 4,
    catEdit = 5,
    catButton = 6
};

enum __MIDL_IPDFDocument3_0012
{
    ckl40 = 0,
    ckl128 = 1
};

enum __MIDL_IPDFDocument3_0013
{
    ctNone = 0,
    ctFlate = 1
};

enum __MIDL_IPDFDocument3_0017
{
    psUserDefined = 0,
    psLetter = 1,
    psA4 = 2,
    psA3 = 3,
    psLegal = 4,
    psB5 = 5,
    psC5 = 6,
    ps8x11 = 7,
    psB4 = 8,
    psA5 = 9,
    psFolio = 10,
    psExecutive = 11,
    psEnvB4 = 12,
    psEnvB5 = 13,
    psEnvC6 = 14,
    psEnvDL = 15,
    psEnvMonarch = 16,
    psEnv9 = 17,
    psEnv10 = 18,
    psEnv11 = 19
};

enum __MIDL_IPDFDocument3_0014
{
    poPagePortrait = 0,
    poPageLandscape = 1
};

enum __MIDL_IPDFDocument3_0016
{
    pr0 = 0,
    pr90 = 1,
    pr180 = 2,
    pr270 = 3
};

enum __MIDL_IPDFDocument3_0018
{
    stGet = 0,
    stPost = 1,
    stFDF = 2
};

enum __MIDL_IPDFDocument3_0019
{
    fetFullFont = 0,
    fetFullCharset = 1,
    fetUsedGlyphsOnly = 2,
    fetNotEmbed = 3
};

enum __MIDL_IPDFDocument3_0020
{
    v13 = 0,
    v14 = 1
};

enum __MIDL_IPDFDocument3_0021
{
    zlFitPage = 0,
    zlFitWidth = 1,
    zlFitHeight = 2,
    zlFitVisible = 3
};

enum __MIDL_IPDFDocument3_0022
{
    csDefaultGray = 0,
    csDefaultRGB = 1,
    csDefaultCMYK = 2,
    csICCBasedRGB = 3,
    csICCBasedCMYK = 4
};

struct __declspec(uuid("11d3d317-c7ad-4895-8be4-1236f78cc63a"))
IPDFDocument3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAborted))
    VARIANT_BOOL Aborted;
    __declspec(property(get=GetAutoCreateURL,put=PutAutoCreateURL))
    VARIANT_BOOL AutoCreateURL;
    __declspec(property(get=GetAutoLaunch,put=PutAutoLaunch))
    VARIANT_BOOL AutoLaunch;
    __declspec(property(get=GetHDC))
    long HDC;
    __declspec(property(get=GetCompression,put=PutCompression))
    TxCompressionType Compression;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetJPEGQuality,put=PutJPEGQuality))
    long JPEGQuality;
    __declspec(property(get=GetNonEmbeddedFonts,put=PutNonEmbeddedFonts))
    _bstr_t NonEmbeddedFonts;
    __declspec(property(get=GetOnePass,put=PutOnePass))
    VARIANT_BOOL OnePass;
    __declspec(property(get=GetOpenDocumentAction,put=PutOpenDocumentAction))
    long OpenDocumentAction;
    __declspec(property(get=GetSwitchedToWatermark,put=PutSwitchedToWatermark))
    VARIANT_BOOL SwitchedToWatermark;
    __declspec(property(get=GetDocumentInfo_Creator,put=PutDocumentInfo_Creator))
    _bstr_t DocumentInfo_Creator;
    __declspec(property(get=GetDocumentInfo_Keywords,put=PutDocumentInfo_Keywords))
    _bstr_t DocumentInfo_Keywords;
    __declspec(property(get=GetDocumentInfo_Subject,put=PutDocumentInfo_Subject))
    _bstr_t DocumentInfo_Subject;
    __declspec(property(get=GetDocumentInfo_Title,put=PutDocumentInfo_Title))
    _bstr_t DocumentInfo_Title;
    __declspec(property(get=GetDocumentInfo_Author,put=PutDocumentInfo_Author))
    _bstr_t DocumentInfo_Author;
    __declspec(property(get=GetOwnerPassword,put=PutOwnerPassword))
    _bstr_t OwnerPassword;
    __declspec(property(get=GetPageCount))
    long PageCount;
    __declspec(property(get=GetPageHeight))
    long PageHeight;
    __declspec(property(get=GetPageLayout,put=PutPageLayout))
    TxPageLayout PageLayout;
    __declspec(property(get=GetPageMode,put=PutPageMode))
    TxPageMode PageMode;
    __declspec(property(get=GetPageWidth))
    long PageWidth;
    __declspec(property(get=GetPageNumber))
    long PageNumber;
    __declspec(property(get=GetPrinting))
    VARIANT_BOOL Printing;
    __declspec(property(get=GetProtectionEnabled,put=PutProtectionEnabled))
    VARIANT_BOOL ProtectionEnabled;
    __declspec(property(get=GetProtectionOptions_coPrint,put=PutProtectionOptions_coPrint))
    VARIANT_BOOL ProtectionOptions_coPrint;
    __declspec(property(get=GetProtectionOptions_coModifyStructure,put=PutProtectionOptions_coModifyStructure))
    VARIANT_BOOL ProtectionOptions_coModifyStructure;
    __declspec(property(get=GetProtectionOptions_coModifyAnnotation,put=PutProtectionOptions_coModifyAnnotation))
    VARIANT_BOOL ProtectionOptions_coModifyAnnotation;
    __declspec(property(get=GetProtectionOptions_coCopyInformation,put=PutProtectionOptions_coCopyInformation))
    VARIANT_BOOL ProtectionOptions_coCopyInformation;
    __declspec(property(get=GetResolution,put=PutResolution))
    long Resolution;
    __declspec(property(get=GetUserPassword,put=PutUserPassword))
    _bstr_t UserPassword;
    __declspec(property(get=GetViewerPreferences_vpHideToolBar,put=PutViewerPreferences_vpHideToolBar))
    VARIANT_BOOL ViewerPreferences_vpHideToolBar;
    __declspec(property(get=GetViewerPreferences_vpHideMenuBar,put=PutViewerPreferences_vpHideMenuBar))
    VARIANT_BOOL ViewerPreferences_vpHideMenuBar;
    __declspec(property(get=GetViewerPreferences_vpHideWindowUI,put=PutViewerPreferences_vpHideWindowUI))
    VARIANT_BOOL ViewerPreferences_vpHideWindowUI;
    __declspec(property(get=GetViewerPreferences_vpFitWindow,put=PutViewerPreferences_vpFitWindow))
    VARIANT_BOOL ViewerPreferences_vpFitWindow;
    __declspec(property(get=GetViewerPreferences_vpCenterWindow,put=PutViewerPreferences_vpCenterWindow))
    VARIANT_BOOL ViewerPreferences_vpCenterWindow;
    __declspec(property(get=GetLogActionsAndErrors,put=PutLogActionsAndErrors))
    VARIANT_BOOL LogActionsAndErrors;
    __declspec(property(get=GetLastError))
    _bstr_t LastError;
    __declspec(property(get=GetUseCurrentDocumentResolutionForNextPages,put=PutUseCurrentDocumentResolutionForNextPages))
    VARIANT_BOOL UseCurrentDocumentResolutionForNextPages;
    __declspec(property(get=GetPDFPAGE_Resolution,put=PutPDFPAGE_Resolution))
    long PDFPAGE_Resolution;
    __declspec(property(get=GetProtectionKeyLength,put=PutProtectionKeyLength))
    TxCryptoKeyLength ProtectionKeyLength;
    __declspec(property(get=GetPDFPAGE_Height,put=PutPDFPAGE_Height))
    long PDFPAGE_Height;
    __declspec(property(get=GetPDFPAGE_Orientation,put=PutPDFPAGE_Orientation))
    TxPDFPageOrientation PDFPAGE_Orientation;
    __declspec(property(get=GetPDFPAGE_PageRotate,put=PutPDFPAGE_PageRotate))
    TxPDFPageRotate PDFPAGE_PageRotate;
    __declspec(property(get=GetPDFPAGE_TextInitiated))
    VARIANT_BOOL PDFPAGE_TextInitiated;
    __declspec(property(get=GetPDFPAGE_Thumbnail,put=PutPDFPAGE_Thumbnail))
    long PDFPAGE_Thumbnail;
    __declspec(property(get=GetPDFPAGE_Watermark,put=PutPDFPAGE_Watermark))
    long PDFPAGE_Watermark;
    __declspec(property(get=GetPDFPAGE_Width,put=PutPDFPAGE_Width))
    long PDFPAGE_Width;
    __declspec(property(get=GetPDFPAGE_CurrentTextPositionX))
    double PDFPAGE_CurrentTextPositionX;
    __declspec(property(get=GetPDFPAGE_CurrentTextPositionY))
    double PDFPAGE_CurrentTextPositionY;
    __declspec(property(get=GetPDFPAGE_InPath))
    VARIANT_BOOL PDFPAGE_InPath;
    __declspec(property(get=GetPDFPAGE_CanvasCurrentPointX))
    double PDFPAGE_CanvasCurrentPointX;
    __declspec(property(get=GetPDFPAGE_CanvasCurrentPointY))
    double PDFPAGE_CanvasCurrentPointY;
    __declspec(property(get=GetVersion,put=PutVersion))
    TxPDFVersion Version;
    __declspec(property(get=GetEmbedCommercialFonts,put=PutEmbedCommercialFonts))
    VARIANT_BOOL EmbedCommercialFonts;
    __declspec(property(get=GetMetafileImagesJpegCompression,put=PutMetafileImagesJpegCompression))
    long MetafileImagesJpegCompression;
    __declspec(property(get=GetMetafileImagesCompressionType,put=PutMetafileImagesCompressionType))
    TxImageCompressionType MetafileImagesCompressionType;
    __declspec(property(get=GetPrinterForVirtualDC,put=PutPrinterForVirtualDC))
    _bstr_t PrinterForVirtualDC;
    __declspec(property(get=GetPDFOUTLINES_Count))
    long PDFOUTLINES_Count;
    __declspec(property(get=GetInitialZoom,put=PutInitialZoom))
    int InitialZoom;
    __declspec(property(get=GetInitialZoom2,put=PutInitialZoom2))
    TxZoomLevel InitialZoom2;
    __declspec(property(get=GetPDFPAGE_Size,put=PutPDFPAGE_Size))
    TxPDFPageSize PDFPAGE_Size;
    __declspec(property(get=GetPDFPAGE_CanvasOver,put=PutPDFPAGE_CanvasOver))
    VARIANT_BOOL PDFPAGE_CanvasOver;
    __declspec(property(get=GetCurrentWaterMarkIndex,put=PutCurrentWaterMarkIndex))
    long CurrentWaterMarkIndex;
    __declspec(property(get=GetDocumentInfo_CreationDate,put=PutDocumentInfo_CreationDate))
    DATE DocumentInfo_CreationDate;
    __declspec(property(get=GetPDFOUTLINENODE_Action,put=PutPDFOUTLINENODE_Action))
    long PDFOUTLINENODE_Action;
    __declspec(property(get=GetPDFOUTLINENODE_Charset,put=PutPDFOUTLINENODE_Charset))
    TxFontCharset PDFOUTLINENODE_Charset;
    __declspec(property(get=GetPDFOUTLINENODE_Count))
    long PDFOUTLINENODE_Count;
    __declspec(property(get=GetPDFOUTLINENODE_Expanded,put=PutPDFOUTLINENODE_Expanded))
    VARIANT_BOOL PDFOUTLINENODE_Expanded;
    __declspec(property(get=GetPDFOUTLINENODE_HasChildren))
    VARIANT_BOOL PDFOUTLINENODE_HasChildren;
    __declspec(property(get=GetPDFOUTLINENODE_Title,put=PutPDFOUTLINENODE_Title))
    _bstr_t PDFOUTLINENODE_Title;
    __declspec(property(get=GetProducePDFA,put=PutProducePDFA))
    VARIANT_BOOL ProducePDFA;
    __declspec(property(get=GetPDFANNOTATION_Box_X,put=PutPDFANNOTATION_Box_X))
    double PDFANNOTATION_Box_X;
    __declspec(property(get=GetPDFANNOTATION_Box_Y,put=PutPDFANNOTATION_Box_Y))
    double PDFANNOTATION_Box_Y;
    __declspec(property(get=GetPDFANNOTATION_Box_W,put=PutPDFANNOTATION_Box_W))
    double PDFANNOTATION_Box_W;
    __declspec(property(get=GetPDFANNOTATION_Box_H,put=PutPDFANNOTATION_Box_H))
    double PDFANNOTATION_Box_H;
    __declspec(property(get=GetPDFANNOTATION_BorderStyle,put=PutPDFANNOTATION_BorderStyle))
    _bstr_t PDFANNOTATION_BorderStyle;
    __declspec(property(get=GetPDFANNOTATION_ReadOnly,put=PutPDFANNOTATION_ReadOnly))
    VARIANT_BOOL PDFANNOTATION_ReadOnly;
    __declspec(property(get=GetPDFANNOTATION_Flags_afInvisible,put=PutPDFANNOTATION_Flags_afInvisible))
    VARIANT_BOOL PDFANNOTATION_Flags_afInvisible;
    __declspec(property(get=GetPDFANNOTATION_Flags_afHidden,put=PutPDFANNOTATION_Flags_afHidden))
    VARIANT_BOOL PDFANNOTATION_Flags_afHidden;
    __declspec(property(get=GetPDFANNOTATION_Flags_afPrint,put=PutPDFANNOTATION_Flags_afPrint))
    VARIANT_BOOL PDFANNOTATION_Flags_afPrint;
    __declspec(property(get=GetPDFANNOTATION_Flags_afNoZoom,put=PutPDFANNOTATION_Flags_afNoZoom))
    VARIANT_BOOL PDFANNOTATION_Flags_afNoZoom;
    __declspec(property(get=GetPDFANNOTATION_Flags_afNoRotate,put=PutPDFANNOTATION_Flags_afNoRotate))
    VARIANT_BOOL PDFANNOTATION_Flags_afNoRotate;
    __declspec(property(get=GetPDFANNOTATION_Flags_afNoView,put=PutPDFANNOTATION_Flags_afNoView))
    VARIANT_BOOL PDFANNOTATION_Flags_afNoView;
    __declspec(property(get=GetPDFANNOTATION_Flags_afReadOnly,put=PutPDFANNOTATION_Flags_afReadOnly))
    VARIANT_BOOL PDFANNOTATION_Flags_afReadOnly;
    __declspec(property(get=GetPDFANNOTATION_BorderColor,put=PutPDFANNOTATION_BorderColor))
    OLE_COLOR PDFANNOTATION_BorderColor;
    __declspec(property(get=GetPDFANNOTATION_Required,put=PutPDFANNOTATION_Required))
    VARIANT_BOOL PDFANNOTATION_Required;
    __declspec(property(get=GetPDFANNOTATION_Name,put=PutPDFANNOTATION_Name))
    _bstr_t PDFANNOTATION_Name;
    __declspec(property(get=GetPDFANNOTATION_Color,put=PutPDFANNOTATION_Color))
    OLE_COLOR PDFANNOTATION_Color;
    __declspec(property(get=GetPDFANNOTATION_Font_Name,put=PutPDFANNOTATION_Font_Name))
    _bstr_t PDFANNOTATION_Font_Name;
    __declspec(property(get=GetPDFANNOTATION_Font_Charset,put=PutPDFANNOTATION_Font_Charset))
    TxFontCharset PDFANNOTATION_Font_Charset;
    __declspec(property(get=GetPDFANNOTATION_Font_Style_fsBold,put=PutPDFANNOTATION_Font_Style_fsBold))
    VARIANT_BOOL PDFANNOTATION_Font_Style_fsBold;
    __declspec(property(get=GetPDFANNOTATION_Font_Style_fsItalic,put=PutPDFANNOTATION_Font_Style_fsItalic))
    VARIANT_BOOL PDFANNOTATION_Font_Style_fsItalic;
    __declspec(property(get=GetPDFANNOTATION_Font_Style_fsUnderline,put=PutPDFANNOTATION_Font_Style_fsUnderline))
    VARIANT_BOOL PDFANNOTATION_Font_Style_fsUnderline;
    __declspec(property(get=GetPDFANNOTATION_Font_Style_fsStrikeout,put=PutPDFANNOTATION_Font_Style_fsStrikeout))
    VARIANT_BOOL PDFANNOTATION_Font_Style_fsStrikeout;
    __declspec(property(get=GetPDFANNOTATION_Font_Size,put=PutPDFANNOTATION_Font_Size))
    long PDFANNOTATION_Font_Size;
    __declspec(property(get=GetPDFANNOTATION_Font_Color,put=PutPDFANNOTATION_Font_Color))
    OLE_COLOR PDFANNOTATION_Font_Color;
    __declspec(property(get=GetPDFANNOTATION_Hint_Caption,put=PutPDFANNOTATION_Hint_Caption))
    _bstr_t PDFANNOTATION_Hint_Caption;
    __declspec(property(get=GetPDFANNOTATION_Hint_Charset,put=PutPDFANNOTATION_Hint_Charset))
    TxFontCharset PDFANNOTATION_Hint_Charset;
    __declspec(property(get=GetPDFANNOTATION_OnMouseUp,put=PutPDFANNOTATION_OnMouseUp))
    long PDFANNOTATION_OnMouseUp;
    __declspec(property(get=GetPDFANNOTATION_OnMouseDown,put=PutPDFANNOTATION_OnMouseDown))
    long PDFANNOTATION_OnMouseDown;
    __declspec(property(get=GetPDFANNOTATION_OnMouseEnter,put=PutPDFANNOTATION_OnMouseEnter))
    long PDFANNOTATION_OnMouseEnter;
    __declspec(property(get=GetPDFANNOTATION_OnMouseExit,put=PutPDFANNOTATION_OnMouseExit))
    long PDFANNOTATION_OnMouseExit;
    __declspec(property(get=GetPDFANNOTATION_OnSetFocus,put=PutPDFANNOTATION_OnSetFocus))
    long PDFANNOTATION_OnSetFocus;
    __declspec(property(get=GetPDFANNOTATION_OnLostFocus,put=PutPDFANNOTATION_OnLostFocus))
    long PDFANNOTATION_OnLostFocus;
    __declspec(property(get=GetCurrentAnnotationType))
    TxAnnotationType CurrentAnnotationType;
    __declspec(property(get=GetPDFANNOTATION_Caption,put=PutPDFANNOTATION_Caption))
    _bstr_t PDFANNOTATION_Caption;
    __declspec(property(get=GetPDFANNOTATION_OnKeyPress,put=PutPDFANNOTATION_OnKeyPress))
    long PDFANNOTATION_OnKeyPress;
    __declspec(property(get=GetPDFANNOTATION_OnBeforeFormatting,put=PutPDFANNOTATION_OnBeforeFormatting))
    long PDFANNOTATION_OnBeforeFormatting;
    __declspec(property(get=GetPDFANNOTATION_OnChange,put=PutPDFANNOTATION_OnChange))
    long PDFANNOTATION_OnChange;
    __declspec(property(get=GetPDFANNOTATION_OnOtherControlChanged,put=PutPDFANNOTATION_OnOtherControlChanged))
    long PDFANNOTATION_OnOtherControlChanged;
    __declspec(property(get=GetPDFANNOTATION_Checked,put=PutPDFANNOTATION_Checked))
    VARIANT_BOOL PDFANNOTATION_Checked;
    __declspec(property(get=GetPDFANNOTATION_Items,put=PutPDFANNOTATION_Items))
    _bstr_t PDFANNOTATION_Items;
    __declspec(property(get=GetPDFANNOTATION_EditEnabled,put=PutPDFANNOTATION_EditEnabled))
    VARIANT_BOOL PDFANNOTATION_EditEnabled;
    __declspec(property(get=GetPDFANNOTATION_Text,put=PutPDFANNOTATION_Text))
    _bstr_t PDFANNOTATION_Text;
    __declspec(property(get=GetPDFANNOTATION_Multiline,put=PutPDFANNOTATION_Multiline))
    VARIANT_BOOL PDFANNOTATION_Multiline;
    __declspec(property(get=GetPDFANNOTATION_IsPassword,put=PutPDFANNOTATION_IsPassword))
    VARIANT_BOOL PDFANNOTATION_IsPassword;
    __declspec(property(get=GetPDFANNOTATION_ShowBorder,put=PutPDFANNOTATION_ShowBorder))
    VARIANT_BOOL PDFANNOTATION_ShowBorder;
    __declspec(property(get=GetPDFANNOTATION_MaxLength,put=PutPDFANNOTATION_MaxLength))
    long PDFANNOTATION_MaxLength;
    __declspec(property(get=GetPDFANNOTATION_Justification,put=PutPDFANNOTATION_Justification))
    TxHorJust PDFANNOTATION_Justification;
    __declspec(property(get=GetPDFANNOTATION_ExportValue,put=PutPDFANNOTATION_ExportValue))
    _bstr_t PDFANNOTATION_ExportValue;
    __declspec(property(get=GetPDFANNOTATION_Action,put=PutPDFANNOTATION_Action))
    long PDFANNOTATION_Action;
    __declspec(property(get=GetPDFANNOTATION_TextAnnotationIcon,put=PutPDFANNOTATION_TextAnnotationIcon))
    TxTextAnnotationIcon PDFANNOTATION_TextAnnotationIcon;
    __declspec(property(get=GetPDFANNOTATION_Opened,put=PutPDFANNOTATION_Opened))
    VARIANT_BOOL PDFANNOTATION_Opened;
    __declspec(property(get=GetPDFANNOTATION_Charset,put=PutPDFANNOTATION_Charset))
    TxFontCharset PDFANNOTATION_Charset;
    __declspec(property(get=GetBinaryImage))
    _variant_t BinaryImage;
    __declspec(property(put=PutPDFANNOTATION_CheckSymbol))
    TxCheckSymbol PDFANNOTATION_CheckSymbol;
    __declspec(property(get=GetGenerateInMemoryFile,put=PutGenerateInMemoryFile))
    VARIANT_BOOL GenerateInMemoryFile;
    __declspec(property(get=GetOutputByteStream))
    _bstr_t OutputByteStream;
    __declspec(property(get=GetCurrentAnnotationIndex,put=PutCurrentAnnotationIndex))
    long CurrentAnnotationIndex;
    __declspec(property(get=GetFontEmbedStyle,put=PutFontEmbedStyle))
    TxFontEmbeddingType FontEmbedStyle;
    __declspec(property(get=GetUseScreenDC,put=PutUseScreenDC))
    VARIANT_BOOL UseScreenDC;
    __declspec(property(get=GetMemoryFileSize))
    long MemoryFileSize;
    __declspec(property(get=GetDocumentInfo_Producer,put=PutDocumentInfo_Producer))
    _bstr_t DocumentInfo_Producer;
    __declspec(property(get=GetProtectionOptions_coPrintHigh,put=PutProtectionOptions_coPrintHigh))
    VARIANT_BOOL ProtectionOptions_coPrintHigh;
    __declspec(property(get=GetProtectionOptions_coFillAnnotation,put=PutProtectionOptions_coFillAnnotation))
    VARIANT_BOOL ProtectionOptions_coFillAnnotation;
    __declspec(property(get=GetProtectionOptions_coExtractInfo,put=PutProtectionOptions_coExtractInfo))
    VARIANT_BOOL ProtectionOptions_coExtractInfo;
    __declspec(property(get=GetProtectionOptions_coAssembly,put=PutProtectionOptions_coAssembly))
    VARIANT_BOOL ProtectionOptions_coAssembly;

    //
    // Wrapper methods for error-handling
    //

    HRESULT BeginDoc ( );
    HRESULT EndDoc ( );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t pVal );
    long GetResolution ( );
    void PutResolution (
        long pVal );
    VARIANT_BOOL GetUseCurrentDocumentResolutionForNextPages ( );
    void PutUseCurrentDocumentResolutionForNextPages (
        VARIANT_BOOL pVal );
    long GetPageHeight ( );
    long GetPageWidth ( );
    long GetPDFPAGE_Height ( );
    void PutPDFPAGE_Height (
        long pVal );
    long GetPDFPAGE_Width ( );
    void PutPDFPAGE_Width (
        long pVal );
    long GetPageCount ( );
    long GetPageNumber ( );
    long GetCurrentPageIndex ( );
    HRESULT SetCurrentPage (
        long newIndex );
    HRESULT PDFPAGE_BeginText ( );
    HRESULT PDFPAGE_EndText ( );
    HRESULT PDFPAGE_TextOut (
        double x,
        double y,
        double orientation,
        _bstr_t text );
    HRESULT PDFPAGE_RotateText (
        double degrees );
    long GetPDFPAGE_Resolution ( );
    void PutPDFPAGE_Resolution (
        long pVal );
    VARIANT_BOOL GetLogActionsAndErrors ( );
    void PutLogActionsAndErrors (
        VARIANT_BOOL pVal );
    _bstr_t GetLastError ( );
    VARIANT_BOOL GetPrinting ( );
    _variant_t GetBinaryImage ( );
    VARIANT_BOOL GetGenerateInMemoryFile ( );
    void PutGenerateInMemoryFile (
        VARIANT_BOOL pVal );
    _bstr_t GetOutputByteStream ( );
    VARIANT_BOOL GetAutoLaunch ( );
    void PutAutoLaunch (
        VARIANT_BOOL pVal );
    HRESULT PDFPAGE_SetTextPosition (
        double x,
        double y );
    HRESULT PDFPAGE_TextShow (
        _bstr_t text );
    HRESULT PDFPAGE_SetActiveFont (
        _bstr_t fontName,
        VARIANT_BOOL fontStyleBold,
        VARIANT_BOOL fontStyleItalic,
        VARIANT_BOOL fontStyleUnderline,
        VARIANT_BOOL fontStyleStrikeOut,
        double fontSize,
        TxFontCharset fontCharset );
    HRESULT NonEmbeddedFonts_Add (
        _bstr_t fontName );
    _bstr_t GetNonEmbeddedFonts ( );
    void PutNonEmbeddedFonts (
        _bstr_t pVal );
    HRESULT PDFPAGE_Rectangle (
        double left,
        double top,
        double right,
        double bottom );
    HRESULT PDFPAGE_Stroke ( );
    long GetMemoryFileSize ( );
    HRESULT PDFPAGE_SetGray (
        double gray );
    HRESULT PDFPAGE_SetGrayFill (
        double gray );
    HRESULT PDFPAGE_SetGrayStroke (
        double gray );
    HRESULT PDFPAGE_SetLineWidth (
        double lineWidth );
    HRESULT PDFPAGE_TextBox (
        double left,
        double top,
        double right,
        double bottom,
        _bstr_t text,
        TxHorJust horizontalJustification,
        TxVertJust verticalJustification );
    HRESULT PDFPAGE_SetHorizontalScaling (
        double scale );
    HRESULT PDFPAGE_SetWordSpacing (
        double spacing );
    HRESULT PDFPAGE_SetCharacterSpacing (
        double spacing );
    double PDFPAGE_GetTextWidth (
        _bstr_t text );
    HRESULT NewPage ( );
    HRESULT PDFPAGE_SetRGBColorFill (
        double r,
        double g,
        double b );
    HRESULT PDFPAGE_SetRGBColorStroke (
        double r,
        double g,
        double b );
    HRESULT PDFPAGE_SetRGBColor (
        double r,
        double g,
        double b );
    HRESULT PDFPAGE_SetTextRenderingMode (
        TxTextRenderingMode mode );
    HRESULT PDFPAGE_SetCMYKColorFill (
        double c,
        double m,
        double y,
        double k );
    HRESULT PDFPAGE_SetCMYKColorStroke (
        double c,
        double m,
        double y,
        double k );
    HRESULT PDFPAGE_SetCMYKColor (
        double c,
        double m,
        double y,
        double k );
    HRESULT PDFPAGE_MoveTo (
        double x,
        double y );
    HRESULT PDFPAGE_LineTo (
        double x,
        double y );
    HRESULT PDFPAGE_NewPath ( );
    HRESULT PDFPAGE_Clip ( );
    HRESULT PDFPAGE_ClosePath ( );
    HRESULT PDFPAGE_SetDash (
        _bstr_t dashString );
    HRESULT PDFPAGE_NoDash ( );
    HRESULT PDFPAGE_GStateSave ( );
    HRESULT PDFPAGE_GStateRestore ( );
    HRESULT PDFPAGE_FillAndStroke ( );
    HRESULT PDFPAGE_Fill ( );
    HRESULT PDFPAGE_EoFillAndStroke ( );
    HRESULT PDFPAGE_EoFill ( );
    HRESULT PDFPAGE_EoClip ( );
    HRESULT PDFPAGE_RectRotated (
        double left,
        double top,
        double width,
        double height,
        double degreeRotateAngle );
    HRESULT PDFPAGE_CurveTo (
        double firstX,
        double firstY,
        double secondX,
        double secondY,
        double thirdX,
        double thirdY );
    HRESULT PDFPAGE_RoundRect (
        double left,
        double top,
        double right,
        double bottom,
        double width,
        double height );
    HRESULT PDFPAGE_Circle (
        double centerX,
        double centerY,
        double radius );
    HRESULT PDFPAGE_Ellipse (
        double left,
        double top,
        double right,
        double bottom );
    HRESULT PDFPAGE_Arc2 (
        double centerX,
        double centerY,
        double radiusX,
        double radiusY,
        double degreeStartAngle,
        double degreeSweepAngle,
        double * currentX,
        double * currentY );
    HRESULT PDFPAGE_Arc (
        double left,
        double top,
        double right,
        double bottom,
        double firstX,
        double firstY,
        double secondX,
        double secondY,
        double * currentX,
        double * currentY );
    HRESULT PDFPAGE_Pie2 (
        double left,
        double top,
        double right,
        double bottom,
        double degreeStartAngle,
        double degreeSweepAngle );
    HRESULT PDFPAGE_Pie (
        double left,
        double top,
        double right,
        double bottom,
        double firstX,
        double firstY,
        double secondX,
        double secondY );
    long AddImageFromFilename (
        _bstr_t FileName,
        TxImageCompressionType compressionType );
    long GetJPEGQuality ( );
    void PutJPEGQuality (
        long pVal );
    HRESULT PDFPAGE_Translate (
        double x,
        double y );
    HRESULT PDFPAGE_Scale (
        double scaleX,
        double scaleY );
    HRESULT PDFPAGE_Rotate (
        double angle );
    HRESULT PDFPAGE_ShowImage (
        long imageIndex,
        double left,
        double top,
        double width,
        double height,
        double angle );
    long AddImageFromBitmapHandle (
        OLE_HANDLE handle,
        TxImageCompressionType compressionType );
    long GetPDFOUTLINES_Count ( );
    HRESULT PDFOUTLINES_Clear ( );
    HRESULT PDFOUTLINES_Delete (
        long nodeIndex );
    long PDFOUTLINES_GetFirstNode ( );
    long PDFOUTLINES_Add (
        long nodeIndex,
        _bstr_t nodeTitle,
        long actionIndex,
        TxFontCharset charset );
    long PDFOUTLINES_AddChild (
        long parentNodeIndex,
        _bstr_t nodeTitle,
        long actionIndex,
        TxFontCharset charset );
    long PDFOUTLINES_AddFirst (
        long nodeIndex,
        _bstr_t nodeTitle,
        long actionIndex,
        TxFontCharset charset );
    long PDFOUTLINES_Insert (
        long nodeIndex,
        _bstr_t nodeTitle,
        long actionIndex,
        TxFontCharset charset );
    long GetPDFOUTLINENODE_Action ( );
    void PutPDFOUTLINENODE_Action (
        long pVal );
    TxFontCharset GetPDFOUTLINENODE_Charset ( );
    void PutPDFOUTLINENODE_Charset (
        TxFontCharset pVal );
    long GetPDFOUTLINENODE_Count ( );
    VARIANT_BOOL GetPDFOUTLINENODE_Expanded ( );
    void PutPDFOUTLINENODE_Expanded (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFOUTLINENODE_HasChildren ( );
    long PDFOUTLINENODE_GetSubItem (
        long parentNodeIndex );
    _bstr_t GetPDFOUTLINENODE_Title ( );
    void PutPDFOUTLINENODE_Title (
        _bstr_t pVal );
    HRESULT PDFOUTLINENODE_Delete ( );
    HRESULT PDFOUTLINENODE_DeleteChildren ( );
    long PDFOUTLINENODE_GetFirstChild ( );
    long PDFOUTLINENODE_GetLastChild ( );
    long PDFOUTLINENODE_GetNext ( );
    long PDFOUTLINENODE_GetNextChild ( );
    long PDFOUTLINENODE_GetNextSibling ( );
    long PDFOUTLINENODE_GetPrev ( );
    long PDFOUTLINENODE_GetPrevChild ( );
    long PDFOUTLINENODE_GetPrevSibling ( );
    HRESULT SetCurrentPDFOutlineNode (
        long nodeIndex );
    long GetCurrentPDFOutlineNode ( );
    long CreateGoToPageAction (
        long pageIndex,
        long topOffset );
    VARIANT_BOOL GetViewerPreferences_vpHideToolBar ( );
    void PutViewerPreferences_vpHideToolBar (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetViewerPreferences_vpHideMenuBar ( );
    void PutViewerPreferences_vpHideMenuBar (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetViewerPreferences_vpHideWindowUI ( );
    void PutViewerPreferences_vpHideWindowUI (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetViewerPreferences_vpFitWindow ( );
    void PutViewerPreferences_vpFitWindow (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetViewerPreferences_vpCenterWindow ( );
    void PutViewerPreferences_vpCenterWindow (
        VARIANT_BOOL pVal );
    TxPageLayout GetPageLayout ( );
    void PutPageLayout (
        TxPageLayout pVal );
    TxPageMode GetPageMode ( );
    void PutPageMode (
        TxPageMode pVal );
    long CreateURLAction (
        _bstr_t url );
    HRESULT PDFPAGE_SetURL (
        double left,
        double top,
        double right,
        double bottom,
        _bstr_t url );
    HRESULT PDFPAGE_SetLinkToPage (
        double left,
        double bottom,
        double right,
        double top,
        long pageIndex,
        long topOffset );
    DATE GetDocumentInfo_CreationDate ( );
    void PutDocumentInfo_CreationDate (
        DATE pVal );
    _bstr_t GetDocumentInfo_Creator ( );
    void PutDocumentInfo_Creator (
        _bstr_t pVal );
    _bstr_t GetDocumentInfo_Keywords ( );
    void PutDocumentInfo_Keywords (
        _bstr_t pVal );
    _bstr_t GetDocumentInfo_Subject ( );
    void PutDocumentInfo_Subject (
        _bstr_t pVal );
    _bstr_t GetDocumentInfo_Title ( );
    void PutDocumentInfo_Title (
        _bstr_t pVal );
    _bstr_t GetDocumentInfo_Author ( );
    void PutDocumentInfo_Author (
        _bstr_t pVal );
    HRESULT PDFPAGE_SetFlat (
        long flatness );
    HRESULT PDFPAGE_SetLineCap (
        TxPDFLineCap lineCap );
    HRESULT PDFPAGE_SetLineJoin (
        TxPDFLineJoin lineJoin );
    HRESULT PDFPAGE_SetMiterLimit (
        double miterLimit );
    long PDFPAGE_SetAction (
        double left,
        double top,
        double right,
        double bottom,
        long actionIndex );
    double GetPDFANNOTATION_Box_X ( );
    void PutPDFANNOTATION_Box_X (
        double pVal );
    double GetPDFANNOTATION_Box_Y ( );
    void PutPDFANNOTATION_Box_Y (
        double pVal );
    double GetPDFANNOTATION_Box_W ( );
    void PutPDFANNOTATION_Box_W (
        double pVal );
    double GetPDFANNOTATION_Box_H ( );
    void PutPDFANNOTATION_Box_H (
        double pVal );
    long GetCurrentAnnotationIndex ( );
    void PutCurrentAnnotationIndex (
        long pVal );
    long PDFPAGE_SetAnnotation (
        double left,
        double top,
        double right,
        double bottom,
        _bstr_t title,
        _bstr_t contents,
        OLE_COLOR color,
        VARIANT_BOOL print,
        VARIANT_BOOL noZoom,
        VARIANT_BOOL noRotate,
        VARIANT_BOOL invisible,
        VARIANT_BOOL hidden,
        VARIANT_BOOL noView,
        VARIANT_BOOL readOnly,
        VARIANT_BOOL opened,
        TxFontCharset fontCharset );
    long GetPDFANNOTATION_Action ( );
    void PutPDFANNOTATION_Action (
        long pVal );
    VARIANT_BOOL GetPDFANNOTATION_Flags_afInvisible ( );
    void PutPDFANNOTATION_Flags_afInvisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Flags_afHidden ( );
    void PutPDFANNOTATION_Flags_afHidden (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Flags_afPrint ( );
    void PutPDFANNOTATION_Flags_afPrint (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Flags_afNoZoom ( );
    void PutPDFANNOTATION_Flags_afNoZoom (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Flags_afNoRotate ( );
    void PutPDFANNOTATION_Flags_afNoRotate (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Flags_afNoView ( );
    void PutPDFANNOTATION_Flags_afNoView (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Flags_afReadOnly ( );
    void PutPDFANNOTATION_Flags_afReadOnly (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Opened ( );
    void PutPDFANNOTATION_Opened (
        VARIANT_BOOL pVal );
    TxTextAnnotationIcon GetPDFANNOTATION_TextAnnotationIcon ( );
    void PutPDFANNOTATION_TextAnnotationIcon (
        TxTextAnnotationIcon pVal );
    _bstr_t GetPDFANNOTATION_Text ( );
    void PutPDFANNOTATION_Text (
        _bstr_t pVal );
    _bstr_t GetPDFANNOTATION_Caption ( );
    void PutPDFANNOTATION_Caption (
        _bstr_t pVal );
    TxAnnotationType GetCurrentAnnotationType ( );
    OLE_COLOR GetPDFANNOTATION_BorderColor ( );
    void PutPDFANNOTATION_BorderColor (
        OLE_COLOR pVal );
    _bstr_t GetOwnerPassword ( );
    void PutOwnerPassword (
        _bstr_t pVal );
    VARIANT_BOOL GetProtectionEnabled ( );
    void PutProtectionEnabled (
        VARIANT_BOOL pVal );
    _bstr_t GetUserPassword ( );
    void PutUserPassword (
        _bstr_t pVal );
    VARIANT_BOOL GetProtectionOptions_coPrint ( );
    void PutProtectionOptions_coPrint (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetProtectionOptions_coModifyStructure ( );
    void PutProtectionOptions_coModifyStructure (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetProtectionOptions_coModifyAnnotation ( );
    void PutProtectionOptions_coModifyAnnotation (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetProtectionOptions_coCopyInformation ( );
    void PutProtectionOptions_coCopyInformation (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetProtectionOptions_coFillAnnotation ( );
    void PutProtectionOptions_coFillAnnotation (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetProtectionOptions_coExtractInfo ( );
    void PutProtectionOptions_coExtractInfo (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetProtectionOptions_coAssembly ( );
    void PutProtectionOptions_coAssembly (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetProtectionOptions_coPrintHigh ( );
    void PutProtectionOptions_coPrintHigh (
        VARIANT_BOOL pVal );
    TxCryptoKeyLength GetProtectionKeyLength ( );
    void PutProtectionKeyLength (
        TxCryptoKeyLength pVal );
    TxCompressionType GetCompression ( );
    void PutCompression (
        TxCompressionType pVal );
    HRESULT Abort ( );
    VARIANT_BOOL GetAborted ( );
    HRESULT PDFPAGE_SetTextRise (
        double Rise );
    _bstr_t GetDocumentInfo_Producer ( );
    void PutDocumentInfo_Producer (
        _bstr_t pVal );
    long CreateJavascriptAction (
        _bstr_t scriptContents );
    long GetOpenDocumentAction ( );
    void PutOpenDocumentAction (
        long pVal );
    long CreateWaterMark ( );
    VARIANT_BOOL GetSwitchedToWatermark ( );
    void PutSwitchedToWatermark (
        VARIANT_BOOL pVal );
    long GetPDFPAGE_Watermark ( );
    void PutPDFPAGE_Watermark (
        long pVal );
    HRESULT PDFPAGE_DrawWatermark (
        long watermarkIndex );
    long GetCurrentWaterMarkIndex ( );
    void PutCurrentWaterMarkIndex (
        long pVal );
    long PDFPAGE_CreateControl_Button (
        _bstr_t buttonName,
        long left,
        long top,
        long right,
        long bottom );
    VARIANT_BOOL GetPDFANNOTATION_ReadOnly ( );
    void PutPDFANNOTATION_ReadOnly (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Required ( );
    void PutPDFANNOTATION_Required (
        VARIANT_BOOL pVal );
    _bstr_t GetPDFANNOTATION_Name ( );
    void PutPDFANNOTATION_Name (
        _bstr_t pVal );
    OLE_COLOR GetPDFANNOTATION_Color ( );
    void PutPDFANNOTATION_Color (
        OLE_COLOR pVal );
    _bstr_t GetPDFANNOTATION_Font_Name ( );
    void PutPDFANNOTATION_Font_Name (
        _bstr_t pVal );
    TxFontCharset GetPDFANNOTATION_Font_Charset ( );
    void PutPDFANNOTATION_Font_Charset (
        TxFontCharset pVal );
    VARIANT_BOOL GetPDFANNOTATION_Font_Style_fsBold ( );
    void PutPDFANNOTATION_Font_Style_fsBold (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Font_Style_fsItalic ( );
    void PutPDFANNOTATION_Font_Style_fsItalic (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Font_Style_fsUnderline ( );
    void PutPDFANNOTATION_Font_Style_fsUnderline (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Font_Style_fsStrikeout ( );
    void PutPDFANNOTATION_Font_Style_fsStrikeout (
        VARIANT_BOOL pVal );
    long GetPDFANNOTATION_Font_Size ( );
    void PutPDFANNOTATION_Font_Size (
        long pVal );
    OLE_COLOR GetPDFANNOTATION_Font_Color ( );
    void PutPDFANNOTATION_Font_Color (
        OLE_COLOR pVal );
    TxPDFPageSize GetPDFPAGE_Size ( );
    void PutPDFPAGE_Size (
        TxPDFPageSize pVal );
    TxPDFPageOrientation GetPDFPAGE_Orientation ( );
    void PutPDFPAGE_Orientation (
        TxPDFPageOrientation pVal );
    TxPDFPageRotate GetPDFPAGE_PageRotate ( );
    void PutPDFPAGE_PageRotate (
        TxPDFPageRotate pVal );
    VARIANT_BOOL GetPDFPAGE_TextInitiated ( );
    HRESULT PDFPAGE_Comment (
        _bstr_t Comment );
    long GetPDFANNOTATION_OnMouseUp ( );
    void PutPDFANNOTATION_OnMouseUp (
        long pVal );
    long GetPDFANNOTATION_OnMouseDown ( );
    void PutPDFANNOTATION_OnMouseDown (
        long pVal );
    long GetPDFANNOTATION_OnMouseEnter ( );
    void PutPDFANNOTATION_OnMouseEnter (
        long pVal );
    long GetPDFANNOTATION_OnMouseExit ( );
    void PutPDFANNOTATION_OnMouseExit (
        long pVal );
    long GetPDFANNOTATION_OnSetFocus ( );
    void PutPDFANNOTATION_OnSetFocus (
        long pVal );
    long GetPDFANNOTATION_OnLostFocus ( );
    void PutPDFANNOTATION_OnLostFocus (
        long pVal );
    long PDFPAGE_CreateControl_Checkbox (
        _bstr_t checkBoxName,
        long left,
        long top,
        long right,
        long bottom );
    VARIANT_BOOL GetPDFANNOTATION_Checked ( );
    void PutPDFANNOTATION_Checked (
        VARIANT_BOOL pVal );
    long PDFPAGE_CreateControl_Edit (
        _bstr_t editBoxName,
        long left,
        long top,
        long right,
        long bottom );
    long GetPDFANNOTATION_OnKeyPress ( );
    void PutPDFANNOTATION_OnKeyPress (
        long pVal );
    long GetPDFANNOTATION_OnBeforeFormatting ( );
    void PutPDFANNOTATION_OnBeforeFormatting (
        long pVal );
    long GetPDFANNOTATION_OnChange ( );
    void PutPDFANNOTATION_OnChange (
        long pVal );
    long GetPDFANNOTATION_OnOtherControlChanged ( );
    void PutPDFANNOTATION_OnOtherControlChanged (
        long pVal );
    long GetPDFANNOTATION_MaxLength ( );
    void PutPDFANNOTATION_MaxLength (
        long pVal );
    VARIANT_BOOL GetPDFANNOTATION_IsPassword ( );
    void PutPDFANNOTATION_IsPassword (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_Multiline ( );
    void PutPDFANNOTATION_Multiline (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPDFANNOTATION_ShowBorder ( );
    void PutPDFANNOTATION_ShowBorder (
        VARIANT_BOOL pVal );
    TxHorJust GetPDFANNOTATION_Justification ( );
    void PutPDFANNOTATION_Justification (
        TxHorJust pVal );
    long PDFPAGE_CreateControl_Combobox (
        _bstr_t comboBoxName,
        long left,
        long top,
        long right,
        long bottom );
    VARIANT_BOOL GetPDFANNOTATION_EditEnabled ( );
    void PutPDFANNOTATION_EditEnabled (
        VARIANT_BOOL pVal );
    _bstr_t GetPDFANNOTATION_Items ( );
    void PutPDFANNOTATION_Items (
        _bstr_t pVal );
    long PDFPAGE_CreateControl_RadioButton (
        _bstr_t radioButtonName,
        long left,
        long top,
        long right,
        long bottom );
    _bstr_t GetPDFANNOTATION_ExportValue ( );
    void PutPDFANNOTATION_ExportValue (
        _bstr_t pVal );
    long CreateVisibleControlAction (
        VARIANT_BOOL Visible );
    long AddControlToAction (
        long actionIndex,
        long controlIndex );
    long CreateResetFormAction ( );
    long CreateImportDataAction (
        _bstr_t FileName );
    long CreateSubmitFormAction (
        _bstr_t url,
        VARIANT_BOOL sendEmptyFields,
        TxPDFSubmitType submitType );
    HRESULT PDFPAGE_UnicodeTextOut (
        double x,
        double y,
        double orientation,
        _bstr_t unicodeText );
    _bstr_t GetPDFANNOTATION_BorderStyle ( );
    void PutPDFANNOTATION_BorderStyle (
        _bstr_t pVal );
    TxFontCharset GetPDFANNOTATION_Charset ( );
    void PutPDFANNOTATION_Charset (
        TxFontCharset pVal );
    _bstr_t GetPDFANNOTATION_Hint_Caption ( );
    void PutPDFANNOTATION_Hint_Caption (
        _bstr_t pVal );
    TxFontCharset GetPDFANNOTATION_Hint_Charset ( );
    void PutPDFANNOTATION_Hint_Charset (
        TxFontCharset pVal );
    VARIANT_BOOL GetPDFPAGE_CanvasOver ( );
    void PutPDFPAGE_CanvasOver (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOnePass ( );
    void PutOnePass (
        VARIANT_BOOL pVal );
    HRESULT PDFPAGE_SkewText (
        double alpha,
        double beta );
    double PDFPAGE_GetUnicodeTextWidth (
        _bstr_t textString );
    long GetHDC ( );
    long GetUsedDC ( );
    long GetUsedDCResolution ( );
    VARIANT_BOOL GetUseScreenDC ( );
    void PutUseScreenDC (
        VARIANT_BOOL value );
    HRESULT PDFPAGE_PlayMetaFile (
        long metafileHandle );
    HRESULT PDFPAGE_PlayMetaFileEx (
        long metafileHandle,
        double x,
        double y,
        double scaleX,
        double scaleY );
    HRESULT PDFPAGE_PlayMetaFileFromFileName (
        _bstr_t FileName );
    HRESULT PDFPAGE_PlayMetaFileExFromFileName (
        _bstr_t FileName,
        double x,
        double y,
        double scaleX,
        double scaleY );
    _bstr_t GlyphsToUnicodeStr (
        _bstr_t glyphs );
    long AddImageFromBuffer (
        VARIANT * imageBuffer,
        TxImageCompressionType compressionType );
    long AddImageFromMemory (
        LPSTR imageBuffer,
        long bufferSizeInBytes,
        TxImageCompressionType compressionType );
    double GetPDFPAGE_CurrentTextPositionX ( );
    double GetPDFPAGE_CurrentTextPositionY ( );
    HRESULT PDFPAGE_UnicodeTextShow (
        _bstr_t unicodeText );
    HRESULT PDFPAGE_UnicodeTextBox (
        double left,
        double top,
        double right,
        double bottom,
        _bstr_t text,
        TxHorJust horizontalJustification,
        TxVertJust verticalJustification );
    long AddImageWithColorMask (
        _bstr_t FileName,
        OLE_COLOR colorMask );
    VARIANT_BOOL GetPDFPAGE_InPath ( );
    double GetPDFPAGE_CanvasCurrentPointX ( );
    double GetPDFPAGE_CanvasCurrentPointY ( );
    _bstr_t AddTTFFontFromFile (
        _bstr_t fontFile,
        TxFontCharset charset );
    TxFontEmbeddingType GetFontEmbedStyle ( );
    void PutFontEmbedStyle (
        TxFontEmbeddingType pVal );
    VARIANT_BOOL GetEmbedCommercialFonts ( );
    void PutEmbedCommercialFonts (
        VARIANT_BOOL embed );
    HRESULT NotEmbedAnyFonts ( );
    VARIANT_BOOL GetAutoCreateURL ( );
    void PutAutoCreateURL (
        VARIANT_BOOL pVal );
    long PDFPAGE_TextOutBox (
        long left,
        long top,
        long interval,
        long boxWidth,
        long boxHeight,
        _bstr_t text );
    long PDFPAGE_TextOutBox2 (
        double left,
        double top,
        double boxWidth,
        double boxHeight,
        TxHorJust horizontalJustification,
        TxVertJust verticalJustification,
        _bstr_t contents );
    long PDFPAGE_UnicodeTextOutBox (
        long left,
        long top,
        long interval,
        long boxWidth,
        long boxHeight,
        _bstr_t textString );
    long PDFPAGE_UnicodeTextOutBox2 (
        double left,
        double top,
        double boxWidth,
        double boxHeight,
        TxHorJust horizontalJustification,
        TxVertJust verticalJustification,
        _bstr_t cContents );
    HRESULT StartEngine (
        _bstr_t userName,
        _bstr_t password );
    long GetPDFPAGE_Thumbnail ( );
    void PutPDFPAGE_Thumbnail (
        long pVal );
    HRESULT PDFPAGE_Concat (
        double A,
        double b,
        double c,
        double D,
        double E,
        double F );
    TxPDFVersion GetVersion ( );
    void PutVersion (
        TxPDFVersion pVal );
    long GetMetafileImagesJpegCompression ( );
    void PutMetafileImagesJpegCompression (
        long pVal );
    TxImageCompressionType GetMetafileImagesCompressionType ( );
    void PutMetafileImagesCompressionType (
        TxImageCompressionType pVal );
    _bstr_t AddType1FontFromFile (
        _bstr_t afmFontFile,
        _bstr_t pfbFontFile,
        TxFontCharset charset );
    _bstr_t AddTTFFontFromFile2 (
        _bstr_t fontFile );
    HRESULT PDFPAGE_SetPixel (
        double x,
        double y,
        OLE_COLOR color );
    HRESULT PDFPAGE_ArcTo (
        double left,
        double top,
        double right,
        double bottom,
        double firstX,
        double firstY,
        double secondX,
        double secondY,
        VARIANT_BOOL isClockwise,
        double * currentX,
        double * currentY );
    HRESULT LogTextOperations (
        _bstr_t logFileName,
        VARIANT_BOOL asXML );
    HRESULT PlayEMF (
        long metafileHandle,
        long reserved,
        double x,
        double y,
        double scaleX,
        double scaleY );
    long AddImageFromFile (
        _bstr_t imageFileName );
    long GetImageWidth (
        long imageIndex );
    long GetImageHeight (
        long imageIndex );
    long GetImageResolution (
        long imageIndex );
    long GetImageCount ( );
    HRESULT PlaceImageToCurrentPage (
        long imageIndex,
        double left,
        double top );
    HRESULT MakeImageNegative (
        long imageIndex );
    HRESULT FlipImage (
        long imageIndex );
    HRESULT MakeImageGrayScale (
        long imageIndex );
    long AddImageWithMask (
        _bstr_t FileName,
        _bstr_t maskFileName );
    _bstr_t GetPrinterForVirtualDC ( );
    void PutPrinterForVirtualDC (
        _bstr_t printerName );
    double PDFPAGE_GetTextHeight (
        _bstr_t text );
    double PDFPAGE_GetUnicodeTextHeight (
        _bstr_t text );
    int GetInitialZoom ( );
    void PutInitialZoom (
        int percent );
    TxZoomLevel GetInitialZoom2 ( );
    void PutInitialZoom2 (
        TxZoomLevel level );
    long LoadICCProfile (
        _bstr_t iccFileName );
    HRESULT SetPDFAOutputIntent (
        long profileHandle );
    HRESULT SetPDFXOutputIntent (
        long profileHandle );
    long PDFPAGE_GetColorSpace ( );
    TxColorSpaceType PDFPAGE_GetColorSpaceType ( );
    HRESULT PDFPAGE_SetColorSpace (
        long profileHandle );
    HRESULT PDFPAGE_SetDefaultGrayColorSpace ( );
    HRESULT PDFPAGE_SetDefaultRGBColorSpace ( );
    HRESULT PDFPAGE_SetDefaultCMYKColorSpace ( );
    HRESULT PDFPAGE_SetColor (
        double colorComponent1,
        double colorComponent2,
        double colorComponent3,
        double colorComponent4 );
    HRESULT PDFPAGE_SetColorFill (
        double colorComponent1,
        double colorComponent2,
        double colorComponent3,
        double colorComponent4 );
    HRESULT PDFPAGE_SetColorStroke (
        double colorComponent1,
        double colorComponent2,
        double colorComponent3,
        double colorComponent4 );
    HRESULT TransformColors (
        _bstr_t colorspaceFile );
    HRESULT AddColorTransformationRule (
        float originalColor1,
        float originalColor2,
        float originalColor3,
        float originalColor4,
        float transformedColor1,
        float transformedColor2,
        float transformedColor3,
        float transformedColor4 );
    VARIANT_BOOL GetProducePDFA ( );
    void PutProducePDFA (
        VARIANT_BOOL produce );
    HRESULT SetErrorMode (
        unsigned int uiLevel );
    void PutPDFANNOTATION_CheckSymbol (
        TxCheckSymbol _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginDoc ( ) = 0;
      virtual HRESULT __stdcall raw_EndDoc ( ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Resolution (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UseCurrentDocumentResolutionForNextPages (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseCurrentDocumentResolutionForNextPages (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PageHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PageWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFPAGE_Height (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFPAGE_Width (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PageCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PageNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentPageIndex (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentPage (
        /*[in]*/ long newIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_BeginText ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_EndText ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_TextOut (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double orientation,
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_RotateText (
        /*[in]*/ double degrees ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_Resolution (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFPAGE_Resolution (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LogActionsAndErrors (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LogActionsAndErrors (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Printing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_BinaryImage (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_GenerateInMemoryFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GenerateInMemoryFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OutputByteStream (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AutoLaunch (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoLaunch (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetTextPosition (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_TextShow (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetActiveFont (
        /*[in]*/ BSTR fontName,
        /*[in]*/ VARIANT_BOOL fontStyleBold,
        /*[in]*/ VARIANT_BOOL fontStyleItalic,
        /*[in]*/ VARIANT_BOOL fontStyleUnderline,
        /*[in]*/ VARIANT_BOOL fontStyleStrikeOut,
        /*[in]*/ double fontSize,
        /*[in]*/ TxFontCharset fontCharset ) = 0;
      virtual HRESULT __stdcall raw_NonEmbeddedFonts_Add (
        /*[in]*/ BSTR fontName ) = 0;
      virtual HRESULT __stdcall get_NonEmbeddedFonts (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NonEmbeddedFonts (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Rectangle (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Stroke ( ) = 0;
      virtual HRESULT __stdcall get_MemoryFileSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetGray (
        /*[in]*/ double gray ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetGrayFill (
        /*[in]*/ double gray ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetGrayStroke (
        /*[in]*/ double gray ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetLineWidth (
        /*[in]*/ double lineWidth ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_TextBox (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom,
        /*[in]*/ BSTR text,
        /*[in]*/ TxHorJust horizontalJustification,
        /*[in]*/ TxVertJust verticalJustification ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetHorizontalScaling (
        /*[in]*/ double scale ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetWordSpacing (
        /*[in]*/ double spacing ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetCharacterSpacing (
        /*[in]*/ double spacing ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_GetTextWidth (
        /*[in]*/ BSTR text,
        /*[out,retval]*/ double * width ) = 0;
      virtual HRESULT __stdcall raw_NewPage ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetRGBColorFill (
        /*[in]*/ double r,
        /*[in]*/ double g,
        /*[in]*/ double b ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetRGBColorStroke (
        /*[in]*/ double r,
        /*[in]*/ double g,
        /*[in]*/ double b ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetRGBColor (
        /*[in]*/ double r,
        /*[in]*/ double g,
        /*[in]*/ double b ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetTextRenderingMode (
        /*[in]*/ TxTextRenderingMode mode ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetCMYKColorFill (
        /*[in]*/ double c,
        /*[in]*/ double m,
        /*[in]*/ double y,
        /*[in]*/ double k ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetCMYKColorStroke (
        /*[in]*/ double c,
        /*[in]*/ double m,
        /*[in]*/ double y,
        /*[in]*/ double k ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetCMYKColor (
        /*[in]*/ double c,
        /*[in]*/ double m,
        /*[in]*/ double y,
        /*[in]*/ double k ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_MoveTo (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_LineTo (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_NewPath ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Clip ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_ClosePath ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetDash (
        /*[in]*/ BSTR dashString ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_NoDash ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_GStateSave ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_GStateRestore ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_FillAndStroke ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Fill ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_EoFillAndStroke ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_EoFill ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_EoClip ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_RectRotated (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double width,
        /*[in]*/ double height,
        /*[in]*/ double degreeRotateAngle ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_CurveTo (
        /*[in]*/ double firstX,
        /*[in]*/ double firstY,
        /*[in]*/ double secondX,
        /*[in]*/ double secondY,
        /*[in]*/ double thirdX,
        /*[in]*/ double thirdY ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_RoundRect (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom,
        /*[in]*/ double width,
        /*[in]*/ double height ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Circle (
        /*[in]*/ double centerX,
        /*[in]*/ double centerY,
        /*[in]*/ double radius ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Ellipse (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Arc2 (
        /*[in]*/ double centerX,
        /*[in]*/ double centerY,
        /*[in]*/ double radiusX,
        /*[in]*/ double radiusY,
        /*[in]*/ double degreeStartAngle,
        /*[in]*/ double degreeSweepAngle,
        /*[out]*/ double * currentX,
        /*[out]*/ double * currentY ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Arc (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom,
        /*[in]*/ double firstX,
        /*[in]*/ double firstY,
        /*[in]*/ double secondX,
        /*[in]*/ double secondY,
        /*[out]*/ double * currentX,
        /*[out]*/ double * currentY ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Pie2 (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom,
        /*[in]*/ double degreeStartAngle,
        /*[in]*/ double degreeSweepAngle ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Pie (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom,
        /*[in]*/ double firstX,
        /*[in]*/ double firstY,
        /*[in]*/ double secondX,
        /*[in]*/ double secondY ) = 0;
      virtual HRESULT __stdcall raw_AddImageFromFilename (
        /*[in]*/ BSTR FileName,
        /*[in]*/ TxImageCompressionType compressionType,
        /*[out,retval]*/ long * addedImageIndex ) = 0;
      virtual HRESULT __stdcall get_JPEGQuality (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_JPEGQuality (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Translate (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Scale (
        /*[in]*/ double scaleX,
        /*[in]*/ double scaleY ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Rotate (
        /*[in]*/ double angle ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_ShowImage (
        /*[in]*/ long imageIndex,
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double width,
        /*[in]*/ double height,
        /*[in]*/ double angle ) = 0;
      virtual HRESULT __stdcall raw_AddImageFromBitmapHandle (
        /*[in]*/ OLE_HANDLE handle,
        /*[in]*/ TxImageCompressionType compressionType,
        /*[out,retval]*/ long * addedImageIndex ) = 0;
      virtual HRESULT __stdcall get_PDFOUTLINES_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINES_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINES_Delete (
        /*[in]*/ long nodeIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINES_GetFirstNode (
        /*[out,retval]*/ long * firstNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINES_Add (
        /*[in]*/ long nodeIndex,
        /*[in]*/ BSTR nodeTitle,
        /*[in]*/ long actionIndex,
        /*[in]*/ TxFontCharset charset,
        /*[out,retval]*/ long * addedNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINES_AddChild (
        /*[in]*/ long parentNodeIndex,
        /*[in]*/ BSTR nodeTitle,
        /*[in]*/ long actionIndex,
        /*[in]*/ TxFontCharset charset,
        /*[out,retval]*/ long * addedNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINES_AddFirst (
        /*[in]*/ long nodeIndex,
        /*[in]*/ BSTR nodeTitle,
        /*[in]*/ long actionIndex,
        /*[in]*/ TxFontCharset charset,
        /*[out,retval]*/ long * addedNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINES_Insert (
        /*[in]*/ long nodeIndex,
        /*[in]*/ BSTR nodeTitle,
        /*[in]*/ long actionIndex,
        /*[in]*/ TxFontCharset charset,
        /*[out,retval]*/ long * addedNodeIndex ) = 0;
      virtual HRESULT __stdcall get_PDFOUTLINENODE_Action (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFOUTLINENODE_Action (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFOUTLINENODE_Charset (
        /*[out,retval]*/ TxFontCharset * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFOUTLINENODE_Charset (
        /*[in]*/ TxFontCharset pVal ) = 0;
      virtual HRESULT __stdcall get_PDFOUTLINENODE_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PDFOUTLINENODE_Expanded (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFOUTLINENODE_Expanded (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFOUTLINENODE_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINENODE_GetSubItem (
        /*[in]*/ long parentNodeIndex,
        /*[out,retval]*/ long * childNodeIndex ) = 0;
      virtual HRESULT __stdcall get_PDFOUTLINENODE_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFOUTLINENODE_Title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINENODE_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINENODE_DeleteChildren ( ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINENODE_GetFirstChild (
        /*[out,retval]*/ long * firstChildNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINENODE_GetLastChild (
        /*[out,retval]*/ long * lastChildIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINENODE_GetNext (
        /*[out,retval]*/ long * nextNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINENODE_GetNextChild (
        /*[out,retval]*/ long * nodeIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINENODE_GetNextSibling (
        /*[out,retval]*/ long * nextSiblingNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINENODE_GetPrev (
        /*[out,retval]*/ long * previousNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINENODE_GetPrevChild (
        /*[out,retval]*/ long * previousChildNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFOUTLINENODE_GetPrevSibling (
        /*[out,retval]*/ long * previousSiblingNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentPDFOutlineNode (
        /*[in]*/ long nodeIndex ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentPDFOutlineNode (
        /*[out,retval]*/ long * currentOutlineNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_CreateGoToPageAction (
        /*[in]*/ long pageIndex,
        /*[in]*/ long topOffset,
        /*[out,retval]*/ long * addedActionIndex ) = 0;
      virtual HRESULT __stdcall get_ViewerPreferences_vpHideToolBar (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewerPreferences_vpHideToolBar (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ViewerPreferences_vpHideMenuBar (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewerPreferences_vpHideMenuBar (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ViewerPreferences_vpHideWindowUI (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewerPreferences_vpHideWindowUI (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ViewerPreferences_vpFitWindow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewerPreferences_vpFitWindow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ViewerPreferences_vpCenterWindow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewerPreferences_vpCenterWindow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PageLayout (
        /*[out,retval]*/ TxPageLayout * pVal ) = 0;
      virtual HRESULT __stdcall put_PageLayout (
        /*[in]*/ TxPageLayout pVal ) = 0;
      virtual HRESULT __stdcall get_PageMode (
        /*[out,retval]*/ TxPageMode * pVal ) = 0;
      virtual HRESULT __stdcall put_PageMode (
        /*[in]*/ TxPageMode pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateURLAction (
        /*[in]*/ BSTR url,
        /*[out,retval]*/ long * addedActionIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetURL (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom,
        /*[in]*/ BSTR url ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetLinkToPage (
        /*[in]*/ double left,
        /*[in]*/ double bottom,
        /*[in]*/ double right,
        /*[in]*/ double top,
        /*[in]*/ long pageIndex,
        /*[in]*/ long topOffset ) = 0;
      virtual HRESULT __stdcall get_DocumentInfo_CreationDate (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_DocumentInfo_CreationDate (
        /*[in]*/ DATE pVal ) = 0;
      virtual HRESULT __stdcall get_DocumentInfo_Creator (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DocumentInfo_Creator (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DocumentInfo_Keywords (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DocumentInfo_Keywords (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DocumentInfo_Subject (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DocumentInfo_Subject (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DocumentInfo_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DocumentInfo_Title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DocumentInfo_Author (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DocumentInfo_Author (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetFlat (
        /*[in]*/ long flatness ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetLineCap (
        /*[in]*/ TxPDFLineCap lineCap ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetLineJoin (
        /*[in]*/ TxPDFLineJoin lineJoin ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetMiterLimit (
        /*[in]*/ double miterLimit ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetAction (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom,
        /*[in]*/ long actionIndex,
        /*[out,retval]*/ long * createdAnnotationIndex ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Box_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Box_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Box_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Box_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Box_W (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Box_W (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Box_H (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Box_H (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentAnnotationIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CurrentAnnotationIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetAnnotation (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom,
        /*[in]*/ BSTR title,
        /*[in]*/ BSTR contents,
        /*[in]*/ OLE_COLOR color,
        /*[in]*/ VARIANT_BOOL print,
        /*[in]*/ VARIANT_BOOL noZoom,
        /*[in]*/ VARIANT_BOOL noRotate,
        /*[in]*/ VARIANT_BOOL invisible,
        /*[in]*/ VARIANT_BOOL hidden,
        /*[in]*/ VARIANT_BOOL noView,
        /*[in]*/ VARIANT_BOOL readOnly,
        /*[in]*/ VARIANT_BOOL opened,
        /*[in]*/ TxFontCharset fontCharset,
        /*[out,retval]*/ long * addedAnnotationIndex ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Action (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Action (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Flags_afInvisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Flags_afInvisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Flags_afHidden (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Flags_afHidden (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Flags_afPrint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Flags_afPrint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Flags_afNoZoom (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Flags_afNoZoom (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Flags_afNoRotate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Flags_afNoRotate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Flags_afNoView (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Flags_afNoView (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Flags_afReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Flags_afReadOnly (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Opened (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Opened (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_TextAnnotationIcon (
        /*[out,retval]*/ TxTextAnnotationIcon * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_TextAnnotationIcon (
        /*[in]*/ TxTextAnnotationIcon pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Caption (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Caption (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentAnnotationType (
        /*[out,retval]*/ TxAnnotationType * pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_BorderColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_BorderColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_OwnerPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OwnerPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProtectionEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtectionEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UserPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProtectionOptions_coPrint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtectionOptions_coPrint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProtectionOptions_coModifyStructure (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtectionOptions_coModifyStructure (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProtectionOptions_coModifyAnnotation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtectionOptions_coModifyAnnotation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProtectionOptions_coCopyInformation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtectionOptions_coCopyInformation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProtectionOptions_coFillAnnotation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtectionOptions_coFillAnnotation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProtectionOptions_coExtractInfo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtectionOptions_coExtractInfo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProtectionOptions_coAssembly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtectionOptions_coAssembly (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProtectionOptions_coPrintHigh (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtectionOptions_coPrintHigh (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProtectionKeyLength (
        /*[out,retval]*/ TxCryptoKeyLength * pVal ) = 0;
      virtual HRESULT __stdcall put_ProtectionKeyLength (
        /*[in]*/ TxCryptoKeyLength pVal ) = 0;
      virtual HRESULT __stdcall get_Compression (
        /*[out,retval]*/ TxCompressionType * pVal ) = 0;
      virtual HRESULT __stdcall put_Compression (
        /*[in]*/ TxCompressionType pVal ) = 0;
      virtual HRESULT __stdcall raw_Abort ( ) = 0;
      virtual HRESULT __stdcall get_Aborted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetTextRise (
        double Rise ) = 0;
      virtual HRESULT __stdcall get_DocumentInfo_Producer (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DocumentInfo_Producer (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateJavascriptAction (
        /*[in]*/ BSTR scriptContents,
        /*[out,retval]*/ long * addedActionIndex ) = 0;
      virtual HRESULT __stdcall get_OpenDocumentAction (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OpenDocumentAction (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateWaterMark (
        /*[out,retval]*/ long * createdWaremarkIndex ) = 0;
      virtual HRESULT __stdcall get_SwitchedToWatermark (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SwitchedToWatermark (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_Watermark (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFPAGE_Watermark (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_DrawWatermark (
        /*[in]*/ long watermarkIndex ) = 0;
      virtual HRESULT __stdcall get_CurrentWaterMarkIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CurrentWaterMarkIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_CreateControl_Button (
        /*[in]*/ BSTR buttonName,
        /*[in]*/ long left,
        /*[in]*/ long top,
        /*[in]*/ long right,
        /*[in]*/ long bottom,
        /*[out,retval]*/ long * createdControlIndex ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_ReadOnly (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Required (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Required (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Font_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Font_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Font_Charset (
        /*[out,retval]*/ TxFontCharset * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Font_Charset (
        /*[in]*/ TxFontCharset pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Font_Style_fsBold (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Font_Style_fsBold (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Font_Style_fsItalic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Font_Style_fsItalic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Font_Style_fsUnderline (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Font_Style_fsUnderline (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Font_Style_fsStrikeout (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Font_Style_fsStrikeout (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Font_Size (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Font_Size (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Font_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Font_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_Size (
        /*[out,retval]*/ TxPDFPageSize * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFPAGE_Size (
        /*[in]*/ TxPDFPageSize pVal ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_Orientation (
        /*[out,retval]*/ TxPDFPageOrientation * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFPAGE_Orientation (
        /*[in]*/ TxPDFPageOrientation pVal ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_PageRotate (
        /*[out,retval]*/ TxPDFPageRotate * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFPAGE_PageRotate (
        /*[in]*/ TxPDFPageRotate pVal ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_TextInitiated (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Comment (
        /*[in]*/ BSTR Comment ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_OnMouseUp (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_OnMouseUp (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_OnMouseDown (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_OnMouseDown (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_OnMouseEnter (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_OnMouseEnter (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_OnMouseExit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_OnMouseExit (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_OnSetFocus (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_OnSetFocus (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_OnLostFocus (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_OnLostFocus (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_CreateControl_Checkbox (
        /*[in]*/ BSTR checkBoxName,
        /*[in]*/ long left,
        /*[in]*/ long top,
        /*[in]*/ long right,
        /*[in]*/ long bottom,
        /*[out,retval]*/ long * createdCheckBoxIndex ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Checked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Checked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_CreateControl_Edit (
        /*[in]*/ BSTR editBoxName,
        /*[in]*/ long left,
        /*[in]*/ long top,
        /*[in]*/ long right,
        /*[in]*/ long bottom,
        /*[out,retval]*/ long * createdEditBoxIndex ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_OnKeyPress (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_OnKeyPress (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_OnBeforeFormatting (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_OnBeforeFormatting (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_OnChange (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_OnChange (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_OnOtherControlChanged (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_OnOtherControlChanged (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_MaxLength (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_MaxLength (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_IsPassword (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_IsPassword (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Multiline (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Multiline (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_ShowBorder (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_ShowBorder (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Justification (
        /*[out,retval]*/ TxHorJust * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Justification (
        /*[in]*/ TxHorJust pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_CreateControl_Combobox (
        /*[in]*/ BSTR comboBoxName,
        /*[in]*/ long left,
        /*[in]*/ long top,
        /*[in]*/ long right,
        /*[in]*/ long bottom,
        /*[out,retval]*/ long * createdComboBoxIndex ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_EditEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_EditEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Items (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Items (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_CreateControl_RadioButton (
        /*[in]*/ BSTR radioButtonName,
        /*[in]*/ long left,
        /*[in]*/ long top,
        /*[in]*/ long right,
        /*[in]*/ long bottom,
        /*[out,retval]*/ long * createdRadioButtonIndex ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_ExportValue (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_ExportValue (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVisibleControlAction (
        /*[in]*/ VARIANT_BOOL Visible,
        /*[out,retval]*/ long * createdActionIndex ) = 0;
      virtual HRESULT __stdcall raw_AddControlToAction (
        /*[in]*/ long actionIndex,
        /*[in]*/ long controlIndex,
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall raw_CreateResetFormAction (
        /*[out,retval]*/ long * createdActionIndex ) = 0;
      virtual HRESULT __stdcall raw_CreateImportDataAction (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ long * createdActionIndex ) = 0;
      virtual HRESULT __stdcall raw_CreateSubmitFormAction (
        /*[in]*/ BSTR url,
        /*[in]*/ VARIANT_BOOL sendEmptyFields,
        /*[in]*/ TxPDFSubmitType submitType,
        /*[out,retval]*/ long * createdActionIndex ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_UnicodeTextOut (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double orientation,
        /*[in]*/ BSTR unicodeText ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_BorderStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_BorderStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Charset (
        /*[out,retval]*/ TxFontCharset * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Charset (
        /*[in]*/ TxFontCharset pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Hint_Caption (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Hint_Caption (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PDFANNOTATION_Hint_Charset (
        /*[out,retval]*/ TxFontCharset * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_Hint_Charset (
        /*[in]*/ TxFontCharset pVal ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_CanvasOver (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFPAGE_CanvasOver (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OnePass (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OnePass (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SkewText (
        /*[in]*/ double alpha,
        /*[in]*/ double beta ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_GetUnicodeTextWidth (
        /*[in]*/ BSTR textString,
        /*[out,retval]*/ double * width ) = 0;
      virtual HRESULT __stdcall get_HDC (
        /*[out,retval]*/ long * value ) = 0;
      virtual HRESULT __stdcall raw_GetUsedDC (
        /*[out,retval]*/ long * value ) = 0;
      virtual HRESULT __stdcall raw_GetUsedDCResolution (
        /*[out,retval]*/ long * value ) = 0;
      virtual HRESULT __stdcall get_UseScreenDC (
        /*[out,retval]*/ VARIANT_BOOL * value ) = 0;
      virtual HRESULT __stdcall put_UseScreenDC (
        /*[in]*/ VARIANT_BOOL value ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_PlayMetaFile (
        /*[in]*/ long metafileHandle ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_PlayMetaFileEx (
        /*[in]*/ long metafileHandle,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double scaleX,
        /*[in]*/ double scaleY ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_PlayMetaFileFromFileName (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_PlayMetaFileExFromFileName (
        /*[in]*/ BSTR FileName,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double scaleX,
        /*[in]*/ double scaleY ) = 0;
      virtual HRESULT __stdcall raw_GlyphsToUnicodeStr (
        /*[in]*/ BSTR glyphs,
        /*[out,retval]*/ BSTR * unicode ) = 0;
      virtual HRESULT __stdcall raw_AddImageFromBuffer (
        /*[in]*/ VARIANT * imageBuffer,
        /*[in]*/ TxImageCompressionType compressionType,
        /*[out,retval]*/ long * addedImageIndex ) = 0;
      virtual HRESULT __stdcall raw_AddImageFromMemory (
        /*[in]*/ LPSTR imageBuffer,
        /*[in]*/ long bufferSizeInBytes,
        /*[in]*/ TxImageCompressionType compressionType,
        /*[out,retval]*/ long * addedImageIndex ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_CurrentTextPositionX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_CurrentTextPositionY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_UnicodeTextShow (
        /*[in]*/ BSTR unicodeText ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_UnicodeTextBox (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom,
        /*[in]*/ BSTR text,
        /*[in]*/ TxHorJust horizontalJustification,
        /*[in]*/ TxVertJust verticalJustification ) = 0;
      virtual HRESULT __stdcall raw_AddImageWithColorMask (
        /*[in]*/ BSTR FileName,
        /*[in]*/ OLE_COLOR colorMask,
        /*[out,retval]*/ long * addedImageIndex ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_InPath (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_CanvasCurrentPointX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_CanvasCurrentPointY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddTTFFontFromFile (
        /*[in]*/ BSTR fontFile,
        /*[in]*/ TxFontCharset charset,
        /*[out,retval]*/ BSTR * fontName ) = 0;
      virtual HRESULT __stdcall get_FontEmbedStyle (
        /*[out,retval]*/ TxFontEmbeddingType * pVal ) = 0;
      virtual HRESULT __stdcall put_FontEmbedStyle (
        /*[in]*/ TxFontEmbeddingType pVal ) = 0;
      virtual HRESULT __stdcall get_EmbedCommercialFonts (
        /*[out,retval]*/ VARIANT_BOOL * embed ) = 0;
      virtual HRESULT __stdcall put_EmbedCommercialFonts (
        /*[in]*/ VARIANT_BOOL embed ) = 0;
      virtual HRESULT __stdcall raw_NotEmbedAnyFonts ( ) = 0;
      virtual HRESULT __stdcall get_AutoCreateURL (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoCreateURL (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_TextOutBox (
        /*[in]*/ long left,
        /*[in]*/ long top,
        /*[in]*/ long interval,
        /*[in]*/ long boxWidth,
        /*[in]*/ long boxHeight,
        /*[in]*/ BSTR text,
        /*[out,retval]*/ long * charactersInOutput ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_TextOutBox2 (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double boxWidth,
        /*[in]*/ double boxHeight,
        /*[in]*/ TxHorJust horizontalJustification,
        /*[in]*/ TxVertJust verticalJustification,
        /*[in]*/ BSTR contents,
        /*[out,retval]*/ long * charactersInOutput ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_UnicodeTextOutBox (
        /*[in]*/ long left,
        /*[in]*/ long top,
        /*[in]*/ long interval,
        /*[in]*/ long boxWidth,
        /*[in]*/ long boxHeight,
        /*[in]*/ BSTR textString,
        /*[out,retval]*/ long * charactersInOutput ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_UnicodeTextOutBox2 (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double boxWidth,
        /*[in]*/ double boxHeight,
        /*[in]*/ TxHorJust horizontalJustification,
        /*[in]*/ TxVertJust verticalJustification,
        /*[in]*/ BSTR cContents,
        /*[out,retval]*/ long * charactersInOutput ) = 0;
      virtual HRESULT __stdcall raw_StartEngine (
        /*[in]*/ BSTR userName,
        /*[in]*/ BSTR password ) = 0;
      virtual HRESULT __stdcall get_PDFPAGE_Thumbnail (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFPAGE_Thumbnail (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_Concat (
        /*[in]*/ double A,
        /*[in]*/ double b,
        /*[in]*/ double c,
        /*[in]*/ double D,
        /*[in]*/ double E,
        /*[in]*/ double F ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ TxPDFVersion * pVal ) = 0;
      virtual HRESULT __stdcall put_Version (
        /*[in]*/ TxPDFVersion pVal ) = 0;
      virtual HRESULT __stdcall get_MetafileImagesJpegCompression (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MetafileImagesJpegCompression (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MetafileImagesCompressionType (
        /*[out,retval]*/ TxImageCompressionType * pVal ) = 0;
      virtual HRESULT __stdcall put_MetafileImagesCompressionType (
        /*[in]*/ TxImageCompressionType pVal ) = 0;
      virtual HRESULT __stdcall raw_AddType1FontFromFile (
        /*[in]*/ BSTR afmFontFile,
        /*[in]*/ BSTR pfbFontFile,
        /*[in]*/ TxFontCharset charset,
        /*[out,retval]*/ BSTR * fontName ) = 0;
      virtual HRESULT __stdcall raw_AddTTFFontFromFile2 (
        /*[in]*/ BSTR fontFile,
        /*[out,retval]*/ BSTR * fontName ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetPixel (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ OLE_COLOR color ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_ArcTo (
        /*[in]*/ double left,
        /*[in]*/ double top,
        /*[in]*/ double right,
        /*[in]*/ double bottom,
        /*[in]*/ double firstX,
        /*[in]*/ double firstY,
        /*[in]*/ double secondX,
        /*[in]*/ double secondY,
        /*[in]*/ VARIANT_BOOL isClockwise,
        /*[out]*/ double * currentX,
        /*[out]*/ double * currentY ) = 0;
      virtual HRESULT __stdcall raw_LogTextOperations (
        /*[in]*/ BSTR logFileName,
        /*[in]*/ VARIANT_BOOL asXML ) = 0;
      virtual HRESULT __stdcall raw_PlayEMF (
        /*[in]*/ long metafileHandle,
        /*[in]*/ long reserved,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double scaleX,
        /*[in]*/ double scaleY ) = 0;
      virtual HRESULT __stdcall raw_AddImageFromFile (
        /*[in]*/ BSTR imageFileName,
        /*[out,retval]*/ long * lastAddedImageIndex ) = 0;
      virtual HRESULT __stdcall raw_GetImageWidth (
        /*[in]*/ long imageIndex,
        /*[out,retval]*/ long * width ) = 0;
      virtual HRESULT __stdcall raw_GetImageHeight (
        /*[in]*/ long imageIndex,
        /*[out,retval]*/ long * height ) = 0;
      virtual HRESULT __stdcall raw_GetImageResolution (
        /*[in]*/ long imageIndex,
        /*[out,retval]*/ long * Resolution ) = 0;
      virtual HRESULT __stdcall raw_GetImageCount (
        /*[out,retval]*/ long * imageCount ) = 0;
      virtual HRESULT __stdcall raw_PlaceImageToCurrentPage (
        /*[in]*/ long imageIndex,
        /*[in]*/ double left,
        /*[in]*/ double top ) = 0;
      virtual HRESULT __stdcall raw_MakeImageNegative (
        /*[in]*/ long imageIndex ) = 0;
      virtual HRESULT __stdcall raw_FlipImage (
        /*[in]*/ long imageIndex ) = 0;
      virtual HRESULT __stdcall raw_MakeImageGrayScale (
        /*[in]*/ long imageIndex ) = 0;
      virtual HRESULT __stdcall raw_AddImageWithMask (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR maskFileName,
        /*[out,retval]*/ long * addedImageIndex ) = 0;
      virtual HRESULT __stdcall get_PrinterForVirtualDC (
        /*[out,retval]*/ BSTR * printerName ) = 0;
      virtual HRESULT __stdcall put_PrinterForVirtualDC (
        /*[in]*/ BSTR printerName ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_GetTextHeight (
        /*[in]*/ BSTR text,
        /*[out,retval]*/ double * height ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_GetUnicodeTextHeight (
        /*[in]*/ BSTR text,
        /*[out,retval]*/ double * height ) = 0;
      virtual HRESULT __stdcall get_InitialZoom (
        /*[out,retval]*/ int * percent ) = 0;
      virtual HRESULT __stdcall put_InitialZoom (
        /*[in]*/ int percent ) = 0;
      virtual HRESULT __stdcall get_InitialZoom2 (
        /*[out,retval]*/ TxZoomLevel * level ) = 0;
      virtual HRESULT __stdcall put_InitialZoom2 (
        /*[in]*/ TxZoomLevel level ) = 0;
      virtual HRESULT __stdcall raw_LoadICCProfile (
        /*[in]*/ BSTR iccFileName,
        /*[out,retval]*/ long * profileHandle ) = 0;
      virtual HRESULT __stdcall raw_SetPDFAOutputIntent (
        /*[in]*/ long profileHandle ) = 0;
      virtual HRESULT __stdcall raw_SetPDFXOutputIntent (
        /*[in]*/ long profileHandle ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_GetColorSpace (
        /*[out,retval]*/ long * profileHandle ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_GetColorSpaceType (
        /*[out,retval]*/ TxColorSpaceType * type ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetColorSpace (
        /*[in]*/ long profileHandle ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetDefaultGrayColorSpace ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetDefaultRGBColorSpace ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetDefaultCMYKColorSpace ( ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetColor (
        /*[in]*/ double colorComponent1,
        /*[in]*/ double colorComponent2,
        /*[in]*/ double colorComponent3,
        /*[in]*/ double colorComponent4 ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetColorFill (
        /*[in]*/ double colorComponent1,
        /*[in]*/ double colorComponent2,
        /*[in]*/ double colorComponent3,
        /*[in]*/ double colorComponent4 ) = 0;
      virtual HRESULT __stdcall raw_PDFPAGE_SetColorStroke (
        /*[in]*/ double colorComponent1,
        /*[in]*/ double colorComponent2,
        /*[in]*/ double colorComponent3,
        /*[in]*/ double colorComponent4 ) = 0;
      virtual HRESULT __stdcall raw_TransformColors (
        /*[in]*/ BSTR colorspaceFile ) = 0;
      virtual HRESULT __stdcall raw_AddColorTransformationRule (
        /*[in]*/ float originalColor1,
        /*[in]*/ float originalColor2,
        /*[in]*/ float originalColor3,
        /*[in]*/ float originalColor4,
        /*[in]*/ float transformedColor1,
        /*[in]*/ float transformedColor2,
        /*[in]*/ float transformedColor3,
        /*[in]*/ float transformedColor4 ) = 0;
      virtual HRESULT __stdcall get_ProducePDFA (
        /*[out,retval]*/ VARIANT_BOOL * produce ) = 0;
      virtual HRESULT __stdcall put_ProducePDFA (
        /*[in]*/ VARIANT_BOOL produce ) = 0;
      virtual HRESULT __stdcall raw_SetErrorMode (
        /*[in]*/ unsigned int uiLevel ) = 0;
      virtual HRESULT __stdcall put_PDFANNOTATION_CheckSymbol (
        /*[in]*/ TxCheckSymbol _arg1 ) = 0;
};

enum __MIDL_IPDFDocument3_0023
{
    chkCross = 0,
    chkCheckMark = 1
};

struct __declspec(uuid("465fe951-d267-4d90-a019-7994822e137e"))
PDFDocument4;
    // [ default ] interface IPDFDocument4

enum __MIDL_IPDFDocument4_0001
{
    coNone = 0,
    coFlate = 1
};

enum __MIDL_IPDFDocument4_0005
{
    fcANSI = 0,
    fcEastEurope = 238,
    fcRussian = 204,
    fcGreek = 161,
    fcTurkish = 162,
    fcBaltic = 186,
    fcShiftJIS = 128,
    fcHangeul = 129,
    fcGB2312 = 134,
    fcChineseBIG5 = 136,
    fcDefault = 1,
    fcSymbol = 2,
    fcMac = 77,
    fcJohab = 130,
    fcVietnamese = 163,
    fcHebrew = 177,
    fcArabic = 178,
    fcThai = 222,
    fcOEM = 255
};

enum __MIDL_IPDFDocument4_0002
{
    znFitPage = 0,
    znFitWidth = 1,
    znFitHeight = 2,
    znFitVisible = 3
};

enum __MIDL_IPDFDocument4_0003
{
    mtUseNone = 0,
    mtUseOutlines = 1,
    mtUseThumbnails = 2,
    mtFullScreen = 3,
    mtUseOptionalContent = 4,
    mtUseAttachments = 5
};

enum __MIDL_IPDFDocument4_0004
{
    ltSinglePage = 0,
    ltOneColumn = 1,
    ltTwoColumnLeft = 2,
    ltTwoColumnRight = 3,
    ltTwoPageLeft = 4,
    ltTwoPageRight = 5
};

enum __MIDL_IPDFDocument4_0033
{
    dtNone = 0,
    dtSimplex = 1,
    dtDuplexFlipShortEdge = 2,
    dtDuplexFlipLongEdge = 3
};

enum __MIDL_IPDFDocument4_0024
{
    el40bitRC4 = 0,
    el128bitRC4 = 1
};

enum __MIDL_IPDFDocument4_0025
{
    DisallowPrint = 0,
    AllowLowPrintQualityOnly = 1,
    AllowAnyPrintQuality = 2
};

enum __MIDL_IPDFDocument4_0026
{
    DisallowChanges = 0,
    AllowLevel1Changes = 1,
    AllowLevel2Changes = 2,
    AllowLevel3Changes = 3,
    AllowLevel4Changes = 4
};

enum __MIDL_IPDFDocument4_0027
{
    DisallowCopy = 0,
    AllowCopyForAccessibilityOnly = 1,
    AllowCopy = 2
};

enum __MIDL_IPDFDocument4_0006
{
    bfTimesRoman = 0,
    bfHelvetica = 1,
    bfCourier = 2,
    bfSymbol = 3,
    bfTimesBold = 4,
    bfHelveticaBold = 5,
    bfCourierBold = 6,
    bfZapfDingbats = 7,
    bfTimesItalic = 8,
    bfHelveticaOblique = 9,
    bfCourierOblique = 10,
    bfTimesBoldItalic = 11,
    bfHelveticaBoldOblique = 12,
    bfCourierBoldOblique = 13
};

enum __MIDL_IPDFDocument4_0007
{
    esFullFont = 0,
    esUsedGlyphsOnly = 1,
    esNotEmbed = 2
};

enum __MIDL_IPDFDocument4_0008
{
    pfUserDefined = 0,
    pfLetter = 1,
    pfA4 = 2,
    pfA3 = 3,
    pfLegal = 4,
    pfB5 = 5,
    pfC5 = 6,
    pf8x11 = 7,
    pfB4 = 8,
    pfA5 = 9,
    pfFolio = 10,
    pfExecutive = 11,
    pfEnvB4 = 12,
    pfEnvB5 = 13,
    pfEnvC6 = 14,
    pfEnvDL = 15,
    pfEnvMonarch = 16,
    pfEnv9 = 17,
    pfEnv10 = 18,
    pfEnv11 = 19
};

enum __MIDL_IPDFDocument4_0009
{
    pPortrait = 0,
    pLandscape = 1
};

enum __MIDL_IPDFDocument4_0010
{
    ra0 = 0,
    ra90 = 1,
    ra180 = 2,
    ra270 = 3
};

enum __MIDL_IPDFDocument4_0011
{
    cstDefaultGray = 0,
    cstDefaultRGB = 1,
    cstDefaultCMYK = 2,
    cstICCBasedRGB = 3,
    cstICCBasedCMYK = 4
};

enum __MIDL_IPDFDocument4_0012
{
    lcsButtEnd = 0,
    lcsRound = 1,
    lcsProjectingSquare = 2
};

enum __MIDL_IPDFDocument4_0013
{
    ljsMiter = 0,
    ljsRound = 1,
    ljsBevel = 2
};

enum __MIDL_IPDFDocument4_0014
{
    trFillText = 0,
    trStrokeText = 1,
    trFillAndStroke = 2,
    trNeitherFillNorStoke = 3,
    trFillTextAndAddPathForClipping = 4,
    trStrokeTextAndAddPathForClipping = 5,
    trFillStrokeAndAddPathForClipping = 6,
    trAddTextToPathForClipping = 7
};

enum __MIDL_IPDFDocument4_0018
{
    tdLeftToRight = 0,
    tdRightToLeft = 1
};

enum __MIDL_IPDFDocument4_0015
{
    taLeft = 0,
    taCenter = 1,
    taRight = 2
};

enum __MIDL_IPDFDocument4_0016
{
    vaTop = 0,
    vaCenter = 1,
    vaBottom = 2
};

enum __MIDL_IPDFDocument4_0017
{
    paLeft = 0,
    paCenter = 1,
    paRight = 2,
    paJustify = 3
};

enum __MIDL_IPDFDocument4_0019
{
    itFlip = 0,
    itNegative = 1,
    itGrayscale = 2
};

enum __MIDL_IPDFDocument4_0020
{
    smGet = 0,
    smPost = 1,
    smFDF = 2
};

enum __MIDL_IPDFDocument4_0021
{
    atUndefined = 0,
    atActionAnnotation = 1,
    atTextAnnotation = 2,
    atCheckBox = 3,
    atComboBox = 4,
    atRadioButton = 5,
    atEdit = 6,
    atButton = 7
};

enum __MIDL_IPDFDocument4_0023
{
    bsSolid = 0,
    bsDashed = 1,
    bsBeveled = 2,
    bsInset = 3,
    bsUnderline = 4
};

enum __MIDL_IPDFDocument4_0034
{
    chCross = 0,
    chCheckMark = 1
};

enum __MIDL_IPDFDocument4_0022
{
    aiUndefined = 0,
    aiComment = 1,
    aiKey = 2,
    aiNote = 3,
    aiHelp = 4,
    aiNewParagraph = 5,
    aiParagraph = 6,
    aiInsert = 7,
    aiRightPointer = 8,
    aiRightArrow = 9,
    aiUpLeftArrow = 10,
    aiUpArrow = 11,
    aiStar = 12,
    aiCheckmark = 13,
    aiCross = 14,
    aiCircle = 15
};

enum __MIDL_IPDFDocument4_0030
{
    faaiUndefined = 0,
    faaiPushPin = 1,
    faaiGraph = 2,
    faaiPaperclip = 3,
    faaiTag = 4
};

enum __MIDL_IPDFDocument4_0031
{
    saiUndefined = 0,
    saiSpeaker = 1,
    saiMic = 2,
    saiEar = 3
};

enum __MIDL_IPDFDocument4_0032
{
    efRaw = 0,
    efSigned = 1,
    efmuLaw = 2,
    efALaw = 3
};

enum __MIDL_IPDFDocument4_0028
{
    pttConstantSpacing = 0,
    pttNoDistortion = 1,
    pttConstantSpacingAndFasterTiling = 2
};

struct __declspec(uuid("a6af52ae-5767-49fa-8a9e-7d22643d6301"))
IPDFDocument4 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentAnnotation,put=PutCurrentAnnotation))
    long CurrentAnnotation;
    __declspec(property(get=GetOnControlBeforeFormatting,put=PutOnControlBeforeFormatting))
    long OnControlBeforeFormatting;
    __declspec(property(get=GetOnControlChange,put=PutOnControlChange))
    long OnControlChange;
    __declspec(property(get=GetOnControlKeyPress,put=PutOnControlKeyPress))
    long OnControlKeyPress;
    __declspec(property(get=GetAutoCreateURL,put=PutAutoCreateURL))
    VARIANT_BOOL AutoCreateURL;
    __declspec(property(get=GetOnControlSetFocus,put=PutOnControlSetFocus))
    long OnControlSetFocus;
    __declspec(property(get=GetOnControlLostFocus,put=PutOnControlLostFocus))
    long OnControlLostFocus;
    __declspec(property(get=GetOnControlMouseDown,put=PutOnControlMouseDown))
    long OnControlMouseDown;
    __declspec(property(get=GetOnControlMouseUp,put=PutOnControlMouseUp))
    long OnControlMouseUp;
    __declspec(property(get=GetOnControlMouseEnter,put=PutOnControlMouseEnter))
    long OnControlMouseEnter;
    __declspec(property(get=GetOnControlMouseExit,put=PutOnControlMouseExit))
    long OnControlMouseExit;
    __declspec(property(get=GetOnControlOtherChanged,put=PutOnControlOtherChanged))
    long OnControlOtherChanged;
    __declspec(property(get=GetAnnotAction,put=PutAnnotAction))
    long AnnotAction;
    __declspec(property(get=GetControlBackColor,put=PutControlBackColor))
    OLE_COLOR ControlBackColor;
    __declspec(property(get=GetProducePDFA,put=PutProducePDFA))
    VARIANT_BOOL ProducePDFA;
    __declspec(property(get=GetAnnotBorderColor,put=PutAnnotBorderColor))
    OLE_COLOR AnnotBorderColor;
    __declspec(property(get=GetAnnotBorderStyle,put=PutAnnotBorderStyle))
    AnnotationBorderStyle AnnotBorderStyle;
    __declspec(property(get=GetAnnotLeft,put=PutAnnotLeft))
    float AnnotLeft;
    __declspec(property(get=GetAnnotTop,put=PutAnnotTop))
    float AnnotTop;
    __declspec(property(get=GetAnnotWidth,put=PutAnnotWidth))
    float AnnotWidth;
    __declspec(property(get=GetAnnotHeight,put=PutAnnotHeight))
    float AnnotHeight;
    __declspec(property(get=GetControlChecked,put=PutControlChecked))
    VARIANT_BOOL ControlChecked;
    __declspec(property(get=GetComboBoxEditEnabled,put=PutComboBoxEditEnabled))
    VARIANT_BOOL ComboBoxEditEnabled;
    __declspec(property(get=GetRadioButtonExportValue,put=PutRadioButtonExportValue))
    _bstr_t RadioButtonExportValue;
    __declspec(property(get=GetAnnotInvisible,put=PutAnnotInvisible))
    VARIANT_BOOL AnnotInvisible;
    __declspec(property(get=GetAnnotHidden,put=PutAnnotHidden))
    VARIANT_BOOL AnnotHidden;
    __declspec(property(get=GetAnnotPrint,put=PutAnnotPrint))
    VARIANT_BOOL AnnotPrint;
    __declspec(property(get=GetAnnotNoZoom,put=PutAnnotNoZoom))
    VARIANT_BOOL AnnotNoZoom;
    __declspec(property(get=GetAnnotNoRotate,put=PutAnnotNoRotate))
    VARIANT_BOOL AnnotNoRotate;
    __declspec(property(get=GetAnnotNoView,put=PutAnnotNoView))
    VARIANT_BOOL AnnotNoView;
    __declspec(property(get=GetAnnotReadOnly,put=PutAnnotReadOnly))
    VARIANT_BOOL AnnotReadOnly;
    __declspec(property(get=GetAnnotLocked,put=PutAnnotLocked))
    VARIANT_BOOL AnnotLocked;
    __declspec(property(get=GetAnnotToggleNoView,put=PutAnnotToggleNoView))
    VARIANT_BOOL AnnotToggleNoView;
    __declspec(property(get=GetAnnotLockedContents,put=PutAnnotLockedContents))
    VARIANT_BOOL AnnotLockedContents;
    __declspec(property(get=GetControlTextColor,put=PutControlTextColor))
    OLE_COLOR ControlTextColor;
    __declspec(property(get=GetControlFont,put=PutControlFont))
    long ControlFont;
    __declspec(property(get=GetControlFontSize,put=PutControlFontSize))
    float ControlFontSize;
    __declspec(property(get=GetAnnotBorderDashPattern,put=PutAnnotBorderDashPattern))
    _bstr_t AnnotBorderDashPattern;
    __declspec(property(get=GetWasWrongPassword))
    VARIANT_BOOL WasWrongPassword;
    __declspec(property(get=GetPlayMetafileMethodResult))
    VARIANT_BOOL PlayMetafileMethodResult;
    __declspec(property(get=GetIsPasswordEditBox,put=PutIsPasswordEditBox))
    VARIANT_BOOL IsPasswordEditBox;
    __declspec(property(get=GetIsOpenedTextAnnot,put=PutIsOpenedTextAnnot))
    VARIANT_BOOL IsOpenedTextAnnot;
    __declspec(property(get=GetIsReadOnlyControl,put=PutIsReadOnlyControl))
    VARIANT_BOOL IsReadOnlyControl;
    __declspec(property(get=GetIsRequiredControl,put=PutIsRequiredControl))
    VARIANT_BOOL IsRequiredControl;
    __declspec(property(get=GetCompression,put=PutCompression))
    compressionType Compression;
    __declspec(property(get=GetIsMultilineEditBox,put=PutIsMultilineEditBox))
    VARIANT_BOOL IsMultilineEditBox;
    __declspec(property(get=GetAnnotBorderWidth,put=PutAnnotBorderWidth))
    long AnnotBorderWidth;
    __declspec(property(get=GetIsRichTextEditBox,put=PutIsRichTextEditBox))
    VARIANT_BOOL IsRichTextEditBox;
    __declspec(property(get=GetRawControlBits,put=PutRawControlBits))
    long RawControlBits;
    __declspec(property(put=PutCheckSymbol))
    CheckSymbol _CheckSymbol;
    __declspec(property(get=GetControlTextAlign,put=PutControlTextAlign))
    TextAlign ControlTextAlign;
    __declspec(property(get=GetControlVerticalAlign,put=PutControlVerticalAlign))
    VerticalAlign ControlVerticalAlign;
    __declspec(property(get=GetEditBoxMaxLength,put=PutEditBoxMaxLength))
    long EditBoxMaxLength;
    __declspec(property(get=GetControlName,put=PutControlName))
    _bstr_t ControlName;
    __declspec(property(get=GetControlShowBorder,put=PutControlShowBorder))
    VARIANT_BOOL ControlShowBorder;
    __declspec(property(get=GetUseLogging,put=PutUseLogging))
    VARIANT_BOOL UseLogging;
    __declspec(property(get=GetTextAngle,put=PutTextAngle))
    float TextAngle;
    __declspec(property(get=GetTextAnnotIcon,put=PutTextAnnotIcon))
    TextAnnotationIcon TextAnnotIcon;
    __declspec(property(get=GetComboBoxUnicodeItems,put=PutComboBoxUnicodeItems))
    _bstr_t ComboBoxUnicodeItems;
    __declspec(property(get=GetAnnotUnicodeCaption,put=PutAnnotUnicodeCaption))
    _bstr_t AnnotUnicodeCaption;
    __declspec(property(get=GetControlUnicodeHint,put=PutControlUnicodeHint))
    _bstr_t ControlUnicodeHint;
    __declspec(property(get=GetAnnotUnicodeText,put=PutAnnotUnicodeText))
    _bstr_t AnnotUnicodeText;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    long CurrentPage;
    __declspec(property(get=GetFileAttachmentAnnotIcon,put=PutFileAttachmentAnnotIcon))
    FileAttachmentAnnotationIcon FileAttachmentAnnotIcon;
    __declspec(property(get=GetSoundAnnotIcon,put=PutSoundAnnotIcon))
    SoundAnnotationIcon SoundAnnotIcon;
    __declspec(property(get=GetAnnotSamplingRate,put=PutAnnotSamplingRate))
    float AnnotSamplingRate;
    __declspec(property(get=GetAnnotNumberOfSoundChannels,put=PutAnnotNumberOfSoundChannels))
    long AnnotNumberOfSoundChannels;
    __declspec(property(get=GetAnnotNumberOfBitsPerSample,put=PutAnnotNumberOfBitsPerSample))
    long AnnotNumberOfBitsPerSample;
    __declspec(property(get=GetAnnotEncodingFormat,put=PutAnnotEncodingFormat))
    EncodingFormat AnnotEncodingFormat;
    __declspec(property(get=GetAttachmentAnnotationFileName))
    _bstr_t AttachmentAnnotationFileName;
    __declspec(property(get=GetUnicodeAuthor,put=PutUnicodeAuthor))
    _bstr_t UnicodeAuthor;
    __declspec(property(get=GetUnicodeCreator,put=PutUnicodeCreator))
    _bstr_t UnicodeCreator;
    __declspec(property(get=GetUnicodeKeywords,put=PutUnicodeKeywords))
    _bstr_t UnicodeKeywords;
    __declspec(property(get=GetUnicodeProducer,put=PutUnicodeProducer))
    _bstr_t UnicodeProducer;
    __declspec(property(get=GetUnicodeSubject,put=PutUnicodeSubject))
    _bstr_t UnicodeSubject;
    __declspec(property(get=GetUnicodeTitle,put=PutUnicodeTitle))
    _bstr_t UnicodeTitle;
    __declspec(property(get=GetCreationDate,put=PutCreationDate))
    DATE CreationDate;
    __declspec(property(get=GetInitialZoom,put=PutInitialZoom))
    ZoomName InitialZoom;
    __declspec(property(get=GetInitialZoomPercent,put=PutInitialZoomPercent))
    long InitialZoomPercent;
    __declspec(property(get=GetCenterWindow,put=PutCenterWindow))
    VARIANT_BOOL CenterWindow;
    __declspec(property(get=GetFitWindow,put=PutFitWindow))
    VARIANT_BOOL FitWindow;
    __declspec(property(get=GetHideViewerMenuBar,put=PutHideViewerMenuBar))
    VARIANT_BOOL HideViewerMenuBar;
    __declspec(property(get=GetHideViewerToolBar,put=PutHideViewerToolBar))
    VARIANT_BOOL HideViewerToolBar;
    __declspec(property(get=GetHideViewerUI,put=PutHideViewerUI))
    VARIANT_BOOL HideViewerUI;
    __declspec(property(get=GetViewerMode,put=PutViewerMode))
    ModeType ViewerMode;
    __declspec(property(get=GetViewerPageLayout,put=PutViewerPageLayout))
    LayoutType ViewerPageLayout;
    __declspec(property(get=GetViewerDuplex,put=PutViewerDuplex))
    DuplexType ViewerDuplex;
    __declspec(property(get=GetDocumentEncryption,put=PutDocumentEncryption))
    EncryptionLevel DocumentEncryption;
    __declspec(property(get=GetAllowPrintDocument,put=PutAllowPrintDocument))
    AllowedPrintQuality AllowPrintDocument;
    __declspec(property(get=GetAllowChangeDocument,put=PutAllowChangeDocument))
    AllowedChanges AllowChangeDocument;
    __declspec(property(get=GetAllowCopyContent,put=PutAllowCopyContent))
    AllowedCopyLevel AllowCopyContent;
    __declspec(property(get=GetOwnerPassword,put=PutOwnerPassword))
    _bstr_t OwnerPassword;
    __declspec(property(get=GetUserPassword,put=PutUserPassword))
    _bstr_t UserPassword;
    __declspec(property(get=GetFontEmbedStyle,put=PutFontEmbedStyle))
    EmbedStyle FontEmbedStyle;
    __declspec(property(get=GetEmbedCommercialFonts,put=PutEmbedCommercialFonts))
    VARIANT_BOOL EmbedCommercialFonts;
    __declspec(property(get=GetPrinterNameForDC,put=PutPrinterNameForDC))
    _bstr_t PrinterNameForDC;
    __declspec(property(get=GetUseScreenBasedDC,put=PutUseScreenBasedDC))
    VARIANT_BOOL UseScreenBasedDC;
    __declspec(property(get=GetOnOpenDocument,put=PutOnOpenDocument))
    long OnOpenDocument;
    __declspec(property(get=GetOffsetXForDC,put=PutOffsetXForDC))
    float OffsetXForDC;
    __declspec(property(get=GetOffsetYForDC,put=PutOffsetYForDC))
    float OffsetYForDC;
    __declspec(property(get=GetScaleXForDC,put=PutScaleXForDC))
    float ScaleXForDC;
    __declspec(property(get=GetScaleYForDC,put=PutScaleYForDC))
    float ScaleYForDC;
    __declspec(property(put=PutDefaultFontFace))
    _bstr_t DefaultFontFace;
    __declspec(property(get=GetPageHeight,put=PutPageHeight))
    long PageHeight;
    __declspec(property(get=GetPageWidth,put=PutPageWidth))
    long PageWidth;
    __declspec(property(get=GetPageSize,put=PutPageSize))
    PaperFormat PageSize;
    __declspec(property(get=GetPageOrientation,put=PutPageOrientation))
    PaperOrientation PageOrientation;
    __declspec(property(get=GetPageRotate,put=PutPageRotate))
    RotateAngle PageRotate;
    __declspec(property(get=GetPageResolution,put=PutPageResolution))
    long PageResolution;
    __declspec(property(get=GetThumbnail,put=PutThumbnail))
    long Thumbnail;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetLicenseData (
        _bstr_t name,
        _bstr_t key );
    VARIANT_BOOL GetAutoCreateURL ( );
    void PutAutoCreateURL (
        VARIANT_BOOL createURL );
    VARIANT_BOOL GetProducePDFA ( );
    void PutProducePDFA (
        VARIANT_BOOL pdfa );
    HRESULT SetPDFAOutputIntent (
        long intentNumber );
    HRESULT SetPDFXOutputIntent (
        long intentNumber );
    HRESULT SaveToFile (
        _bstr_t name,
        VARIANT_BOOL AutoLaunch );
    long GetBufferSize ( );
    _variant_t GetBuffer ( );
    _bstr_t GetBufferAsBSTR ( );
    HRESULT SaveRangeToFile (
        _bstr_t name,
        long startPageIndex,
        long endPageIndex,
        VARIANT_BOOL AutoLaunch );
    HRESULT Clear ( );
    HRESULT Open (
        _bstr_t FileName,
        _bstr_t password );
    HRESULT Append (
        _bstr_t FileName,
        _bstr_t password );
    HRESULT OpenFromBLOB (
        VARIANT * document,
        _bstr_t password );
    HRESULT AppendFromBLOB (
        VARIANT * document,
        _bstr_t password );
    HRESULT OpenScale (
        _bstr_t FileName,
        _bstr_t password,
        float scaleX,
        float scaleY );
    VARIANT_BOOL GetWasWrongPassword ( );
    compressionType GetCompression ( );
    void PutCompression (
        compressionType type );
    _bstr_t GetLastError ( );
    VARIANT_BOOL GetUseLogging ( );
    void PutUseLogging (
        VARIANT_BOOL use );
    long GetCurrentPage ( );
    void PutCurrentPage (
        long PageNumber );
    long GetPageCount ( );
    HRESULT NewPage ( );
    HRESULT AddPage ( );
    HRESULT InsertPage (
        long insertPosition );
    HRESULT DeletePage (
        long PageNumber );
    HRESULT ClearCanvas ( );
    HRESULT MovePage (
        long PageNumber,
        long newPagePosition );
    HRESULT ConvertToA3 ( );
    HRESULT DrawPageOnPage (
        long srcPageIndex,
        long destPageIndex,
        float left,
        float top,
        float width,
        float height );
    _bstr_t GetUnicodeAuthor ( );
    void PutUnicodeAuthor (
        _bstr_t author );
    HRESULT SetAuthor (
        _bstr_t author,
        fontCharset charset );
    _bstr_t GetUnicodeCreator ( );
    void PutUnicodeCreator (
        _bstr_t creator );
    HRESULT SetCreator (
        _bstr_t creator,
        fontCharset charset );
    _bstr_t GetUnicodeKeywords ( );
    void PutUnicodeKeywords (
        _bstr_t keywords );
    HRESULT SetKeywords (
        _bstr_t keywords,
        fontCharset charset );
    _bstr_t GetUnicodeProducer ( );
    void PutUnicodeProducer (
        _bstr_t producer );
    HRESULT SetProducer (
        _bstr_t producer,
        fontCharset charset );
    _bstr_t GetUnicodeSubject ( );
    void PutUnicodeSubject (
        _bstr_t subject );
    HRESULT SetSubject (
        _bstr_t subject,
        fontCharset charset );
    _bstr_t GetUnicodeTitle ( );
    void PutUnicodeTitle (
        _bstr_t title );
    HRESULT SetTitle (
        _bstr_t author,
        fontCharset charset );
    DATE GetCreationDate ( );
    void PutCreationDate (
        DATE CreationDate );
    ZoomName GetInitialZoom ( );
    void PutInitialZoom (
        ZoomName ZoomName );
    long GetInitialZoomPercent ( );
    void PutInitialZoomPercent (
        long percent );
    VARIANT_BOOL GetCenterWindow ( );
    void PutCenterWindow (
        VARIANT_BOOL CenterWindow );
    VARIANT_BOOL GetFitWindow ( );
    void PutFitWindow (
        VARIANT_BOOL FitWindow );
    VARIANT_BOOL GetHideViewerMenuBar ( );
    void PutHideViewerMenuBar (
        VARIANT_BOOL HideViewerMenuBar );
    VARIANT_BOOL GetHideViewerToolBar ( );
    void PutHideViewerToolBar (
        VARIANT_BOOL HideViewerToolBar );
    VARIANT_BOOL GetHideViewerUI ( );
    void PutHideViewerUI (
        VARIANT_BOOL HideViewerUI );
    ModeType GetViewerMode ( );
    void PutViewerMode (
        ModeType mode );
    LayoutType GetViewerPageLayout ( );
    void PutViewerPageLayout (
        LayoutType layout );
    DuplexType GetViewerDuplex ( );
    void PutViewerDuplex (
        DuplexType duplex );
    EncryptionLevel GetDocumentEncryption ( );
    void PutDocumentEncryption (
        EncryptionLevel level );
    AllowedPrintQuality GetAllowPrintDocument ( );
    void PutAllowPrintDocument (
        AllowedPrintQuality printQuality );
    AllowedChanges GetAllowChangeDocument ( );
    void PutAllowChangeDocument (
        AllowedChanges AllowedChanges );
    AllowedCopyLevel GetAllowCopyContent ( );
    void PutAllowCopyContent (
        AllowedCopyLevel allowedLevel );
    HRESULT SetSecurityFlagsRaw (
        long flags );
    _bstr_t GetOwnerPassword ( );
    void PutOwnerPassword (
        _bstr_t OwnerPassword );
    _bstr_t GetUserPassword ( );
    void PutUserPassword (
        _bstr_t UserPassword );
    long AddFont (
        _bstr_t fontFace,
        VARIANT_BOOL bold,
        VARIANT_BOOL italic,
        VARIANT_BOOL underline,
        VARIANT_BOOL strikeout,
        fontCharset charset );
    long AddFontFromFile (
        _bstr_t fontFileName,
        VARIANT_BOOL bold,
        VARIANT_BOOL italic,
        VARIANT_BOOL underline,
        VARIANT_BOOL strikeout );
    long AddBuiltInFont (
        BuiltInFont font,
        VARIANT_BOOL underline,
        VARIANT_BOOL strikeout );
    EmbedStyle GetFontEmbedStyle ( );
    void PutFontEmbedStyle (
        EmbedStyle style );
    long GetFontCount ( );
    _bstr_t GetFontName (
        long fontNumber );
    long GetFontDataSize (
        long fontNumber );
    _variant_t GetFontData (
        long fontNumber );
    HRESULT SaveFontToFile (
        long fontNumber,
        _bstr_t name );
    VARIANT_BOOL GetEmbedCommercialFonts ( );
    void PutEmbedCommercialFonts (
        VARIANT_BOOL embed );
    long GetDCResolution ( );
    OLE_HANDLE GetDC ( );
    _bstr_t GetPrinterNameForDC ( );
    void PutPrinterNameForDC (
        _bstr_t name );
    VARIANT_BOOL GetUseScreenBasedDC ( );
    void PutUseScreenBasedDC (
        VARIANT_BOOL use );
    HRESULT FlushDC ( );
    float GetOffsetXForDC ( );
    void PutOffsetXForDC (
        float offsetX );
    float GetOffsetYForDC ( );
    void PutOffsetYForDC (
        float offsetY );
    float GetScaleXForDC ( );
    void PutScaleXForDC (
        float scaleX );
    float GetScaleYForDC ( );
    void PutScaleYForDC (
        float scaleY );
    void PutDefaultFontFace (
        _bstr_t _arg1 );
    long AddWatermark ( );
    HRESULT SwitchToWatermark (
        long watermarkNumber );
    HRESULT SwitchToCurrentPage ( );
    HRESULT AttachWatermark (
        long PageNumber,
        long watermarkNumber );
    long AddWatermark2 (
        VARIANT_BOOL showOnBackground );
    HRESULT AddComment (
        _bstr_t Comment );
    HRESULT SaveGraphicsState ( );
    HRESULT RestoreGraphicsState ( );
    long GetPageHeight ( );
    void PutPageHeight (
        long height );
    long GetPageWidth ( );
    void PutPageWidth (
        long width );
    PaperFormat GetPageSize ( );
    void PutPageSize (
        PaperFormat size );
    PaperOrientation GetPageOrientation ( );
    void PutPageOrientation (
        PaperOrientation orientation );
    RotateAngle GetPageRotate ( );
    void PutPageRotate (
        RotateAngle angle );
    long GetPageResolution ( );
    void PutPageResolution (
        long Resolution );
    long GetThumbnail ( );
    void PutThumbnail (
        long imageNumber );
    HRESULT AddLinkToPage (
        float left,
        float top,
        float right,
        float bottom,
        long PageNumber,
        float topOffset );
    HRESULT AddHyperLink (
        float left,
        float top,
        float right,
        float bottom,
        _bstr_t url );
    long AddButton (
        float left,
        float top,
        float right,
        float bottom,
        _bstr_t name );
    long AddCheckBox (
        float left,
        float top,
        float right,
        float bottom,
        _bstr_t name );
    long AddComboBox (
        float left,
        float top,
        float right,
        float bottom,
        _bstr_t name );
    long AddEditBox (
        float left,
        float top,
        float right,
        float bottom,
        _bstr_t name );
    long AddRadioButton (
        float left,
        float top,
        float right,
        float bottom,
        _bstr_t name );
    long AddActionArea (
        float left,
        float top,
        float right,
        float bottom,
        long actionNumber );
    long AddTextAnnotation (
        float x,
        float y,
        _bstr_t title,
        _bstr_t contents,
        fontCharset charset );
    long AddUnicodeTextAnnotation (
        float x,
        float y,
        _bstr_t title,
        _bstr_t contents );
    long AddFileAttachmentAnnotation (
        float x,
        float y,
        _bstr_t title,
        _bstr_t contents,
        _bstr_t filePath,
        fontCharset charset );
    long AddUnicodeFileAttachmentAnnotation (
        float x,
        float y,
        _bstr_t title,
        _bstr_t contents,
        _bstr_t filePath );
    long AddSoundAnnotation (
        float x,
        float y,
        _bstr_t title,
        _bstr_t contents,
        _bstr_t filePath,
        fontCharset charset );
    long AddUnicodeSoundAnnotation (
        float x,
        float y,
        _bstr_t title,
        _bstr_t contents,
        _bstr_t filePath );
    HRESULT PlayMetaFile (
        _bstr_t metafileName,
        float x,
        float y,
        float scaleX,
        float scaleY );
    HRESULT PlayMetaFileFromHandle (
        OLE_HANDLE metafileHandle,
        float x,
        float y,
        float scaleX,
        float scaleY );
    HRESULT PlayMetaFileFromBuffer (
        VARIANT * metafileBuffer,
        long metafileBufferSize,
        float x,
        float y,
        float scaleX,
        float scaleY );
    VARIANT_BOOL GetPlayMetafileMethodResult ( );
    HRESULT SetColor (
        float component1,
        float component2,
        float component3,
        float component4 );
    HRESULT SetColorFill (
        float component1,
        float component2,
        float component3,
        float component4 );
    HRESULT SetColorStroke (
        float component1,
        float component2,
        float component3,
        float component4 );
    long AddColorSpace (
        _bstr_t colorspaceFile );
    HRESULT SetColorSpace (
        long colorspaceNumber );
    HRESULT SetColorSpaceType (
        ColorSpaceType colorspace );
    HRESULT SetColorSpaceFill (
        long colorspaceNumber );
    HRESULT SetColorSpaceStroke (
        long colorspaceNumber );
    HRESULT SetColorSpaceTypeFill (
        ColorSpaceType colorspace );
    HRESULT SetColorSpaceTypeStroke (
        ColorSpaceType colorspace );
    HRESULT TransformColors (
        _bstr_t colorspaceFile );
    HRESULT AddColorTransformationRule (
        float originalColor1,
        float originalColor2,
        float originalColor3,
        float originalColor4,
        float transformedColor1,
        float transformedColor2,
        float transformedColor3,
        float transformedColor4 );
    HRESULT DrawArc (
        float left,
        float top,
        float right,
        float bottom,
        float firstX,
        float firstY,
        float secondX,
        float secondY );
    HRESULT DrawAngleArc (
        float centerX,
        float centerY,
        float radiusX,
        float radiusY,
        float degreeStartAngle,
        float degreeSweepAngle );
    HRESULT DrawArcTo (
        float left,
        float top,
        float right,
        float bottom,
        float firstX,
        float firstY,
        float secondX,
        float secondY,
        VARIANT_BOOL isClockwise );
    float GetCurrentX ( );
    float GetCurrentY ( );
    HRESULT DrawCircle (
        float centerX,
        float centerY,
        float radius );
    HRESULT ClosePath ( );
    HRESULT DrawCurveTo (
        float firstX,
        float firstY,
        float secondX,
        float secondY,
        float thirdX,
        float thirdY );
    HRESULT DrawEllipse (
        float left,
        float top,
        float right,
        float bottom );
    HRESULT AlternateClip ( );
    HRESULT AlternateFill ( );
    HRESULT AlternateFillAndStroke ( );
    HRESULT Clip ( );
    HRESULT Fill ( );
    HRESULT Stroke ( );
    HRESULT FillAndStroke ( );
    VARIANT_BOOL InPath ( );
    HRESULT DrawLineTo (
        float x,
        float y );
    HRESULT MoveTo (
        float x,
        float y );
    HRESULT ResetPath ( );
    HRESULT DrawPie (
        float left,
        float top,
        float right,
        float bottom,
        float firstX,
        float firstY,
        float secondX,
        float secondY );
    HRESULT DrawAnglePie (
        float left,
        float top,
        float right,
        float bottom,
        float degreeStartAngle,
        float degreeSweepAngle );
    HRESULT DrawRectangle (
        float left,
        float top,
        float width,
        float height,
        float RotateAngle );
    HRESULT DrawRoundRectangle (
        float left,
        float top,
        float width,
        float height,
        float cornerWidth,
        float cornerHeight );
    HRESULT RotateCoords (
        float angle );
    HRESULT ScaleCoords (
        float scaleX,
        float scaleY );
    HRESULT TranslateCoords (
        float x,
        float y );
    HRESULT SetLineDash (
        _bstr_t dashString );
    HRESULT SetFlatness (
        long flatness );
    HRESULT SetLineCapStyle (
        LineCapStyle lineCap );
    HRESULT SetLineJoinStyle (
        LineJoinStyle lineJoin );
    HRESULT SetLineWidth (
        float lineWidth );
    HRESULT SetMiterLimit (
        float miterLimit );
    HRESULT DrawImage (
        long imageNumber,
        float left,
        float top,
        float width,
        float height,
        float angle );
    HRESULT ShowImage (
        long imageNumber,
        float left,
        float top );
    HRESULT SkewCoords (
        float xAngle,
        float yAngle );
    HRESULT UseFont (
        long fontNumber,
        float fontSizePt );
    float GetCurrentTextX ( );
    float GetCurrentTextY ( );
    float GetTextHeight (
        _bstr_t text );
    float GetTextWidth (
        _bstr_t text );
    float GetUnicodeTextHeight (
        _bstr_t text );
    float GetUnicodeTextWidth (
        _bstr_t text );
    float GetTextAngle ( );
    void PutTextAngle (
        float angleDegrees );
    HRESULT SetCharacterSpacing (
        float spacing );
    HRESULT SetTextHorizontalScaling (
        float scaling );
    HRESULT SetTextPosition (
        float x,
        float y );
    HRESULT SetTextRenderingMode (
        TextRenderingMode mode );
    HRESULT SetTextRise (
        float Rise );
    HRESULT SetWordSpacing (
        float spacing );
    HRESULT UseFont2 (
        long fontNumber,
        float fontSizePt,
        VARIANT_BOOL underline,
        VARIANT_BOOL strikeout );
    TextDirection GetTextDirection ( );
    HRESULT SetTextDirection (
        TextDirection TextDirection );
    HRESULT ShowText (
        _bstr_t text );
    HRESULT ShowTextAligned (
        float left,
        float top,
        float right,
        float bottom,
        TextAlign align,
        VerticalAlign VerticalAlign,
        _bstr_t text );
    HRESULT ShowTextAt (
        float x,
        float y,
        _bstr_t text );
    long ShowTextLines (
        float left,
        float top,
        float right,
        float bottom,
        float interval,
        TextAlign align,
        VerticalAlign VerticalAlign,
        _bstr_t text );
    HRESULT ShowTextParagraph (
        float x,
        float y,
        ParagraphAlign pAlign,
        float interval,
        float marginLeft,
        float marginTop,
        float marginRight,
        float marginBottom,
        _bstr_t text );
    HRESULT ShowUnicodeText (
        _bstr_t text );
    HRESULT ShowUnicodeTextAligned (
        float left,
        float top,
        float right,
        float bottom,
        TextAlign align,
        VerticalAlign VerticalAlign,
        _bstr_t text );
    HRESULT ShowUnicodeTextAt (
        float x,
        float y,
        _bstr_t text );
    long ShowUnicodeTextLines (
        float left,
        float top,
        float right,
        float bottom,
        float interval,
        TextAlign align,
        VerticalAlign VerticalAlign,
        _bstr_t text );
    HRESULT ShowUnicodeTextParagraph (
        float x,
        float y,
        ParagraphAlign pAlign,
        float interval,
        float marginLeft,
        float marginTop,
        float marginRight,
        float marginBottom,
        _bstr_t text );
    _bstr_t GetDocumentText ( );
    _bstr_t GetPageText (
        long PageNumber );
    long AddImageFromHandle (
        OLE_HANDLE handle );
    long AddImageFromBuffer (
        LPSTR imageBuffer,
        long bufferSizeInBytes );
    long AddImageFromBLOB (
        VARIANT * image );
    long AddImageFromFile (
        _bstr_t name );
    long AddImageWithColorMask (
        _bstr_t FileName,
        OLE_COLOR rgbColor );
    long AddImageWithMask (
        _bstr_t FileName,
        _bstr_t maskFileName );
    HRESULT TransformImage (
        long imageNumber,
        ImageTransformation transformation );
    long GetImageCount ( );
    long GetImageHeight (
        long imageNumber );
    long GetImageWidth (
        long imageNumber );
    long GetImageResolution (
        long imageNumber );
    long AddImageFromHandleWithColorMask (
        OLE_HANDLE handle,
        OLE_COLOR rgbColor );
    void PutCompressMonochromeImages (
        VARIANT_BOOL _arg1 );
    long GetImageDataSize (
        long imageNumber );
    _variant_t GetImageData (
        long imageNumber );
    HRESULT AddControlToAction (
        long actionNumber,
        long controlNumber );
    long CreateGoToPageAction (
        long PageNumber,
        float topOffset );
    long CreateImportDataAction (
        _bstr_t FileName );
    long CreateJavascriptAction (
        _bstr_t scriptContents );
    long CreateResetFormAction ( );
    long CreateSubmitFormAction (
        _bstr_t url,
        VARIANT_BOOL sendEmptyFields,
        SubmitMethod SubmitMethod );
    long CreateHyperLinkAction (
        _bstr_t url );
    long CreateShowControlAction ( );
    long CreateHideControlAction ( );
    long GetOnOpenDocument ( );
    void PutOnOpenDocument (
        long actionNumber );
    long GetCurrentAnnotation ( );
    void PutCurrentAnnotation (
        long annotNumber );
    long GetOnControlBeforeFormatting ( );
    void PutOnControlBeforeFormatting (
        long actionNumber );
    long GetOnControlChange ( );
    void PutOnControlChange (
        long actionNumber );
    long GetOnControlKeyPress ( );
    void PutOnControlKeyPress (
        long actionNumber );
    long GetOnControlSetFocus ( );
    void PutOnControlSetFocus (
        long actionNumber );
    long GetOnControlLostFocus ( );
    void PutOnControlLostFocus (
        long actionNumber );
    long GetOnControlMouseDown ( );
    void PutOnControlMouseDown (
        long actionNumber );
    long GetOnControlMouseUp ( );
    void PutOnControlMouseUp (
        long actionNumber );
    long GetOnControlMouseEnter ( );
    void PutOnControlMouseEnter (
        long actionNumber );
    long GetOnControlMouseExit ( );
    void PutOnControlMouseExit (
        long actionNumber );
    long GetOnControlOtherChanged ( );
    void PutOnControlOtherChanged (
        long actionNumber );
    AnnotationType GetAnnotType ( );
    long GetAnnotAction ( );
    void PutAnnotAction (
        long actionNumber );
    OLE_COLOR GetControlBackColor ( );
    void PutControlBackColor (
        OLE_COLOR color );
    OLE_COLOR GetAnnotBorderColor ( );
    void PutAnnotBorderColor (
        OLE_COLOR color );
    AnnotationBorderStyle GetAnnotBorderStyle ( );
    void PutAnnotBorderStyle (
        AnnotationBorderStyle style );
    float GetAnnotLeft ( );
    void PutAnnotLeft (
        float left );
    float GetAnnotTop ( );
    void PutAnnotTop (
        float top );
    float GetAnnotWidth ( );
    void PutAnnotWidth (
        float width );
    float GetAnnotHeight ( );
    void PutAnnotHeight (
        float height );
    VARIANT_BOOL GetControlChecked ( );
    void PutControlChecked (
        VARIANT_BOOL checked );
    VARIANT_BOOL GetComboBoxEditEnabled ( );
    void PutComboBoxEditEnabled (
        VARIANT_BOOL enabled );
    _bstr_t GetRadioButtonExportValue ( );
    void PutRadioButtonExportValue (
        _bstr_t exportValue );
    VARIANT_BOOL GetAnnotInvisible ( );
    void PutAnnotInvisible (
        VARIANT_BOOL invisible );
    VARIANT_BOOL GetAnnotHidden ( );
    void PutAnnotHidden (
        VARIANT_BOOL hidden );
    VARIANT_BOOL GetAnnotPrint ( );
    void PutAnnotPrint (
        VARIANT_BOOL print );
    VARIANT_BOOL GetAnnotNoZoom ( );
    void PutAnnotNoZoom (
        VARIANT_BOOL noZoom );
    VARIANT_BOOL GetAnnotNoRotate ( );
    void PutAnnotNoRotate (
        VARIANT_BOOL noRotate );
    VARIANT_BOOL GetAnnotNoView ( );
    void PutAnnotNoView (
        VARIANT_BOOL noView );
    VARIANT_BOOL GetAnnotReadOnly ( );
    void PutAnnotReadOnly (
        VARIANT_BOOL readOnly );
    VARIANT_BOOL GetAnnotLocked ( );
    void PutAnnotLocked (
        VARIANT_BOOL locked );
    VARIANT_BOOL GetAnnotToggleNoView ( );
    void PutAnnotToggleNoView (
        VARIANT_BOOL toggleNoView );
    VARIANT_BOOL GetAnnotLockedContents ( );
    void PutAnnotLockedContents (
        VARIANT_BOOL lockedContents );
    OLE_COLOR GetControlTextColor ( );
    void PutControlTextColor (
        OLE_COLOR color );
    long GetControlFont ( );
    void PutControlFont (
        long fontNumber );
    float GetControlFontSize ( );
    void PutControlFontSize (
        float sizePt );
    _bstr_t GetAnnotBorderDashPattern ( );
    void PutAnnotBorderDashPattern (
        _bstr_t dashPattern );
    VARIANT_BOOL GetIsPasswordEditBox ( );
    void PutIsPasswordEditBox (
        VARIANT_BOOL password );
    VARIANT_BOOL GetIsOpenedTextAnnot ( );
    void PutIsOpenedTextAnnot (
        VARIANT_BOOL opened );
    VARIANT_BOOL GetIsReadOnlyControl ( );
    void PutIsReadOnlyControl (
        VARIANT_BOOL readOnly );
    VARIANT_BOOL GetIsRequiredControl ( );
    void PutIsRequiredControl (
        VARIANT_BOOL required );
    VARIANT_BOOL GetIsMultilineEditBox ( );
    void PutIsMultilineEditBox (
        VARIANT_BOOL multiline );
    long GetAnnotBorderWidth ( );
    void PutAnnotBorderWidth (
        long width );
    VARIANT_BOOL GetIsRichTextEditBox ( );
    void PutIsRichTextEditBox (
        VARIANT_BOOL richText );
    long GetRawControlBits ( );
    void PutRawControlBits (
        long value );
    void PutCheckSymbol (
        CheckSymbol _arg1 );
    TextAlign GetControlTextAlign ( );
    void PutControlTextAlign (
        TextAlign align );
    VerticalAlign GetControlVerticalAlign ( );
    void PutControlVerticalAlign (
        VerticalAlign align );
    long GetEditBoxMaxLength ( );
    void PutEditBoxMaxLength (
        long maxLength );
    _bstr_t GetControlName ( );
    void PutControlName (
        _bstr_t name );
    VARIANT_BOOL GetControlShowBorder ( );
    void PutControlShowBorder (
        VARIANT_BOOL show );
    TextAnnotationIcon GetTextAnnotIcon ( );
    void PutTextAnnotIcon (
        TextAnnotationIcon icon );
    _bstr_t GetComboBoxUnicodeItems ( );
    void PutComboBoxUnicodeItems (
        _bstr_t items );
    HRESULT SetComboBoxItems (
        _bstr_t items,
        fontCharset charset );
    _bstr_t GetAnnotUnicodeCaption ( );
    void PutAnnotUnicodeCaption (
        _bstr_t caption );
    HRESULT SetAnnotCaption (
        _bstr_t caption,
        fontCharset charset );
    _bstr_t GetControlUnicodeHint ( );
    void PutControlUnicodeHint (
        _bstr_t hint );
    HRESULT SetControlHint (
        _bstr_t hint,
        fontCharset charset );
    _bstr_t GetAnnotUnicodeText ( );
    void PutAnnotUnicodeText (
        _bstr_t text );
    HRESULT SetAnnotText (
        _bstr_t text,
        fontCharset charset );
    long GetAnnotCount ( );
    FileAttachmentAnnotationIcon GetFileAttachmentAnnotIcon ( );
    void PutFileAttachmentAnnotIcon (
        FileAttachmentAnnotationIcon icon );
    SoundAnnotationIcon GetSoundAnnotIcon ( );
    void PutSoundAnnotIcon (
        SoundAnnotationIcon icon );
    float GetAnnotSamplingRate ( );
    void PutAnnotSamplingRate (
        float rate );
    long GetAnnotNumberOfSoundChannels ( );
    void PutAnnotNumberOfSoundChannels (
        long numberChannels );
    long GetAnnotNumberOfBitsPerSample ( );
    void PutAnnotNumberOfBitsPerSample (
        long numberBits );
    EncodingFormat GetAnnotEncodingFormat ( );
    void PutAnnotEncodingFormat (
        EncodingFormat format );
    HRESULT RemoveAnnotation (
        long annotNumber );
    long GetAnnotationPage (
        long annotNumber );
    _bstr_t GetAttachmentAnnotationFileName ( );
    HRESULT SaveAttachmentAnnotationToFile (
        _bstr_t FileName );
    VARIANT_BOOL IsControlNameVacant (
        _bstr_t name );
    long GetRootOutline ( );
    long GetOutlineCount ( );
    long GetOutlineChildCount (
        long outlineNode );
    long GetOutlineChild (
        long outlineNode,
        long childIndex );
    long GetOutlineFirstChild (
        long outlineNode );
    long GetOutlineLastChild (
        long outlineNode );
    long GetNextOutline (
        long outlineNode );
    long GetNextSiblingOutline (
        long outlineNode );
    long GetPrevOutline (
        long outlineNode );
    long GetPrevSiblingOutline (
        long outlineNode );
    long AddOutlineBefore (
        long outlineNode,
        _bstr_t title,
        fontCharset charset );
    long AddUnicodeOutlineBefore (
        long outlineNode,
        _bstr_t title );
    long AddOutlineAfter (
        long outlineNode,
        _bstr_t title,
        fontCharset charset );
    long AddUnicodeOutlineAfter (
        long outlineNode,
        _bstr_t title );
    long AddOutlineChild (
        long outlineNode,
        _bstr_t title,
        fontCharset charset );
    long AddUnicodeOutlineChild (
        long outlineNode,
        _bstr_t title );
    long GetOutlineAction (
        long outlineNode );
    HRESULT SetOutlineAction (
        long outlineNode,
        long actionNumber );
    VARIANT_BOOL IsOutlineExpanded (
        long outlineNode );
    HRESULT SetOutlineExpanded (
        long outlineNode,
        VARIANT_BOOL expanded );
    _bstr_t GetOutlineUnicodeTitle (
        long outlineNode );
    HRESULT SetOutlineUnicodeTitle (
        long outlineNode,
        _bstr_t title );
    HRESULT SetOutlineTitle (
        long outlineNode,
        _bstr_t title,
        fontCharset charset );
    HRESULT DeleteOutline (
        long outlineNode,
        VARIANT_BOOL onlyChildren );
    HRESULT RemoveOutlines ( );
    long AddColoredPattern (
        PatternTilingType tilingType );
    long AddUnColoredPattern (
        PatternTilingType tilingType,
        ColorSpaceType type );
    HRESULT SwitchToPattern (
        long patternNumber );
    HRESULT SetPattern (
        long patternNumber );
    HRESULT SetOpacity (
        float opacity );
    HRESULT SetOpacityFill (
        float opacity );
    HRESULT SetOpacityStroke (
        float opacity );
    HRESULT SetBlendMode (
        BlendMode mode );
    long CreateContentGroup (
        _bstr_t groupName );
    HRESULT BeginMarkedContent (
        long groupIndex );
    HRESULT EndMarkedContent ( );
    VARIANT_BOOL GetContentGroupState (
        long groupIndex );
    HRESULT SetContentGroupState (
        long groupIndex,
        VARIANT_BOOL groupState );
    long GetContentGroupCount ( );
    _bstr_t GetContentGroupName (
        long groupIndex );
    HRESULT SetContentGroupName (
        long groupIndex,
        _bstr_t groupName );
    HRESULT BeginOrder (
        _bstr_t orderName );
    HRESULT EndOrder ( );
    HRESULT AddContentGroup (
        long groupIndex );
    HRESULT RemoveOrders ( );
    HRESULT DrawPageToDC (
        OLE_HANDLE HDC,
        long PageNumber,
        float zoomX,
        float zoomY,
        VARIANT_BOOL drawControls );
    HRESULT SavePageAsBMP (
        long PageNumber,
        _bstr_t FileName,
        long dpiX,
        long dpiY );
    HRESULT SavePageAsJPEG (
        long PageNumber,
        _bstr_t FileName,
        long dpiX,
        long dpiY );
    HRESULT SavePageAsGIF (
        long PageNumber,
        _bstr_t FileName,
        long dpiX,
        long dpiY );
    HRESULT SavePageAsPNG (
        long PageNumber,
        _bstr_t FileName,
        long dpiX,
        long dpiY );
    HRESULT SavePageAsTIFF (
        long PageNumber,
        _bstr_t FileName,
        long dpiX,
        long dpiY );
    HRESULT SavePageAsEMF (
        long PageNumber,
        _bstr_t FileName,
        long dpiX,
        long dpiY );
    HRESULT SaveDocumentAsTIFF (
        _bstr_t FileName,
        long dpiX,
        long dpiY );
    long AddTable (
        long nColumn,
        long nRow,
        long defaultFont,
        float defaultFontSize );
    HRESULT ShowTable (
        long tableNumber,
        float left,
        float top,
        float scaleX,
        float scaleY );
    HRESULT SetTableColumnSize (
        long tableNumber,
        long columnNumber,
        float width );
    HRESULT SetTableRowSize (
        long tableNumber,
        long rowNumber,
        float height );
    HRESULT SetCellTableFont (
        long tableNumber,
        long columnNumber,
        long rowNumber,
        long fontNumber );
    HRESULT SetCellTableFontSize (
        long tableNumber,
        long columnNumber,
        long rowNumber,
        float fontSize );
    HRESULT SetCellTableText (
        long tableNumber,
        long columnNumber,
        long rowNumber,
        _bstr_t text );
    HRESULT SetCellTableTextAlign (
        long tableNumber,
        long columnNumber,
        long rowNumber,
        TextAlign align );
    HRESULT SetColumnTableFont (
        long tableNumber,
        long columnNumber,
        long fontNumber );
    HRESULT SetRowTableFont (
        long tableNumber,
        long rowNumber,
        long fontNumber );
    HRESULT SetColumnTableFontSize (
        long tableNumber,
        long columnNumber,
        float fontSize );
    HRESULT SetRowTableFontSize (
        long tableNumber,
        long rowNumber,
        float fontSize );
    HRESULT SetColumnTableTextAlign (
        long tableNumber,
        long columnNumber,
        TextAlign align );
    HRESULT SetRowTableTextAlign (
        long tableNumber,
        long rowNumber,
        TextAlign align );
    HRESULT SetTableLineWidth (
        long tableNumber,
        float lineWidth );
    HRESULT SetTableLineColor (
        long tableNumber,
        float colorComponent1,
        float colorComponent2,
        float colorComponent3,
        float colorComponent4 );
    HRESULT SetCellTableTextColor (
        long tableNumber,
        long columnNumber,
        long rowNumber,
        float colorComponent1,
        float colorComponent2,
        float colorComponent3,
        float colorComponent4 );
    HRESULT SetRowTableTextColor (
        long tableNumber,
        long rowNumber,
        float colorComponent1,
        float colorComponent2,
        float colorComponent3,
        float colorComponent4 );
    HRESULT SetColumnTableTextColor (
        long tableNumber,
        long columnNumber,
        float colorComponent1,
        float colorComponent2,
        float colorComponent3,
        float colorComponent4 );
    HRESULT SetErrorMode (
        unsigned int uiLevel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetLicenseData (
        /*[in]*/ BSTR name,
        /*[in]*/ BSTR key ) = 0;
      virtual HRESULT __stdcall get_AutoCreateURL (
        /*[out,retval]*/ VARIANT_BOOL * createURL ) = 0;
      virtual HRESULT __stdcall put_AutoCreateURL (
        /*[in]*/ VARIANT_BOOL createURL ) = 0;
      virtual HRESULT __stdcall get_ProducePDFA (
        /*[out,retval]*/ VARIANT_BOOL * pdfa ) = 0;
      virtual HRESULT __stdcall put_ProducePDFA (
        /*[in]*/ VARIANT_BOOL pdfa ) = 0;
      virtual HRESULT __stdcall raw_SetPDFAOutputIntent (
        /*[in]*/ long intentNumber ) = 0;
      virtual HRESULT __stdcall raw_SetPDFXOutputIntent (
        /*[in]*/ long intentNumber ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR name,
        /*[in]*/ VARIANT_BOOL AutoLaunch ) = 0;
      virtual HRESULT __stdcall raw_GetBufferSize (
        /*[out,retval]*/ long * bufferSize ) = 0;
      virtual HRESULT __stdcall raw_GetBuffer (
        /*[out,retval]*/ VARIANT * buffer ) = 0;
      virtual HRESULT __stdcall raw_GetBufferAsBSTR (
        /*[out,retval]*/ BSTR * buffer ) = 0;
      virtual HRESULT __stdcall raw_SaveRangeToFile (
        /*[in]*/ BSTR name,
        /*[in]*/ long startPageIndex,
        /*[in]*/ long endPageIndex,
        /*[in]*/ VARIANT_BOOL AutoLaunch ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR password ) = 0;
      virtual HRESULT __stdcall raw_Append (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR password ) = 0;
      virtual HRESULT __stdcall raw_OpenFromBLOB (
        /*[in]*/ VARIANT * document,
        /*[in]*/ BSTR password ) = 0;
      virtual HRESULT __stdcall raw_AppendFromBLOB (
        /*[in]*/ VARIANT * document,
        /*[in]*/ BSTR password ) = 0;
      virtual HRESULT __stdcall raw_OpenScale (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR password,
        /*[in]*/ float scaleX,
        /*[in]*/ float scaleY ) = 0;
      virtual HRESULT __stdcall get_WasWrongPassword (
        /*[out,retval]*/ VARIANT_BOOL * wrong ) = 0;
      virtual HRESULT __stdcall get_Compression (
        /*[out,retval]*/ compressionType * type ) = 0;
      virtual HRESULT __stdcall put_Compression (
        /*[in]*/ compressionType type ) = 0;
      virtual HRESULT __stdcall raw_GetLastError (
        /*[out,retval]*/ BSTR * error ) = 0;
      virtual HRESULT __stdcall get_UseLogging (
        /*[out,retval]*/ VARIANT_BOOL * use ) = 0;
      virtual HRESULT __stdcall put_UseLogging (
        /*[in]*/ VARIANT_BOOL use ) = 0;
      virtual HRESULT __stdcall get_CurrentPage (
        /*[out,retval]*/ long * PageNumber ) = 0;
      virtual HRESULT __stdcall put_CurrentPage (
        /*[in]*/ long PageNumber ) = 0;
      virtual HRESULT __stdcall raw_GetPageCount (
        /*[out,retval]*/ long * count ) = 0;
      virtual HRESULT __stdcall raw_NewPage ( ) = 0;
      virtual HRESULT __stdcall raw_AddPage ( ) = 0;
      virtual HRESULT __stdcall raw_InsertPage (
        /*[in]*/ long insertPosition ) = 0;
      virtual HRESULT __stdcall raw_DeletePage (
        /*[in]*/ long PageNumber ) = 0;
      virtual HRESULT __stdcall raw_ClearCanvas ( ) = 0;
      virtual HRESULT __stdcall raw_MovePage (
        /*[in]*/ long PageNumber,
        /*[in]*/ long newPagePosition ) = 0;
      virtual HRESULT __stdcall raw_ConvertToA3 ( ) = 0;
      virtual HRESULT __stdcall raw_DrawPageOnPage (
        /*[in]*/ long srcPageIndex,
        /*[in]*/ long destPageIndex,
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float width,
        /*[in]*/ float height ) = 0;
      virtual HRESULT __stdcall get_UnicodeAuthor (
        /*[out,retval]*/ BSTR * author ) = 0;
      virtual HRESULT __stdcall put_UnicodeAuthor (
        /*[in]*/ BSTR author ) = 0;
      virtual HRESULT __stdcall raw_SetAuthor (
        /*[in]*/ BSTR author,
        /*[in]*/ fontCharset charset ) = 0;
      virtual HRESULT __stdcall get_UnicodeCreator (
        /*[out,retval]*/ BSTR * creator ) = 0;
      virtual HRESULT __stdcall put_UnicodeCreator (
        /*[in]*/ BSTR creator ) = 0;
      virtual HRESULT __stdcall raw_SetCreator (
        /*[in]*/ BSTR creator,
        /*[in]*/ fontCharset charset ) = 0;
      virtual HRESULT __stdcall get_UnicodeKeywords (
        /*[out,retval]*/ BSTR * keywords ) = 0;
      virtual HRESULT __stdcall put_UnicodeKeywords (
        /*[in]*/ BSTR keywords ) = 0;
      virtual HRESULT __stdcall raw_SetKeywords (
        /*[in]*/ BSTR keywords,
        /*[in]*/ fontCharset charset ) = 0;
      virtual HRESULT __stdcall get_UnicodeProducer (
        /*[out,retval]*/ BSTR * producer ) = 0;
      virtual HRESULT __stdcall put_UnicodeProducer (
        /*[in]*/ BSTR producer ) = 0;
      virtual HRESULT __stdcall raw_SetProducer (
        /*[in]*/ BSTR producer,
        /*[in]*/ fontCharset charset ) = 0;
      virtual HRESULT __stdcall get_UnicodeSubject (
        /*[out,retval]*/ BSTR * subject ) = 0;
      virtual HRESULT __stdcall put_UnicodeSubject (
        /*[in]*/ BSTR subject ) = 0;
      virtual HRESULT __stdcall raw_SetSubject (
        /*[in]*/ BSTR subject,
        /*[in]*/ fontCharset charset ) = 0;
      virtual HRESULT __stdcall get_UnicodeTitle (
        /*[out,retval]*/ BSTR * title ) = 0;
      virtual HRESULT __stdcall put_UnicodeTitle (
        /*[in]*/ BSTR title ) = 0;
      virtual HRESULT __stdcall raw_SetTitle (
        /*[in]*/ BSTR author,
        /*[in]*/ fontCharset charset ) = 0;
      virtual HRESULT __stdcall get_CreationDate (
        /*[out,retval]*/ DATE * CreationDate ) = 0;
      virtual HRESULT __stdcall put_CreationDate (
        /*[in]*/ DATE CreationDate ) = 0;
      virtual HRESULT __stdcall get_InitialZoom (
        /*[out,retval]*/ ZoomName * ZoomName ) = 0;
      virtual HRESULT __stdcall put_InitialZoom (
        /*[in]*/ ZoomName ZoomName ) = 0;
      virtual HRESULT __stdcall get_InitialZoomPercent (
        /*[out,retval]*/ long * percent ) = 0;
      virtual HRESULT __stdcall put_InitialZoomPercent (
        /*[in]*/ long percent ) = 0;
      virtual HRESULT __stdcall get_CenterWindow (
        /*[out,retval]*/ VARIANT_BOOL * CenterWindow ) = 0;
      virtual HRESULT __stdcall put_CenterWindow (
        /*[in]*/ VARIANT_BOOL CenterWindow ) = 0;
      virtual HRESULT __stdcall get_FitWindow (
        /*[out,retval]*/ VARIANT_BOOL * FitWindow ) = 0;
      virtual HRESULT __stdcall put_FitWindow (
        /*[in]*/ VARIANT_BOOL FitWindow ) = 0;
      virtual HRESULT __stdcall get_HideViewerMenuBar (
        /*[out,retval]*/ VARIANT_BOOL * HideViewerMenuBar ) = 0;
      virtual HRESULT __stdcall put_HideViewerMenuBar (
        /*[in]*/ VARIANT_BOOL HideViewerMenuBar ) = 0;
      virtual HRESULT __stdcall get_HideViewerToolBar (
        /*[out,retval]*/ VARIANT_BOOL * HideViewerToolBar ) = 0;
      virtual HRESULT __stdcall put_HideViewerToolBar (
        /*[in]*/ VARIANT_BOOL HideViewerToolBar ) = 0;
      virtual HRESULT __stdcall get_HideViewerUI (
        /*[out,retval]*/ VARIANT_BOOL * HideViewerUI ) = 0;
      virtual HRESULT __stdcall put_HideViewerUI (
        /*[in]*/ VARIANT_BOOL HideViewerUI ) = 0;
      virtual HRESULT __stdcall get_ViewerMode (
        /*[out,retval]*/ ModeType * mode ) = 0;
      virtual HRESULT __stdcall put_ViewerMode (
        /*[in]*/ ModeType mode ) = 0;
      virtual HRESULT __stdcall get_ViewerPageLayout (
        /*[out,retval]*/ LayoutType * layout ) = 0;
      virtual HRESULT __stdcall put_ViewerPageLayout (
        /*[in]*/ LayoutType layout ) = 0;
      virtual HRESULT __stdcall get_ViewerDuplex (
        /*[out,retval]*/ DuplexType * duplex ) = 0;
      virtual HRESULT __stdcall put_ViewerDuplex (
        /*[in]*/ DuplexType duplex ) = 0;
      virtual HRESULT __stdcall get_DocumentEncryption (
        /*[out,retval]*/ EncryptionLevel * level ) = 0;
      virtual HRESULT __stdcall put_DocumentEncryption (
        /*[in]*/ EncryptionLevel level ) = 0;
      virtual HRESULT __stdcall get_AllowPrintDocument (
        /*[out,retval]*/ AllowedPrintQuality * printQuality ) = 0;
      virtual HRESULT __stdcall put_AllowPrintDocument (
        /*[in]*/ AllowedPrintQuality printQuality ) = 0;
      virtual HRESULT __stdcall get_AllowChangeDocument (
        /*[out,retval]*/ AllowedChanges * AllowedChanges ) = 0;
      virtual HRESULT __stdcall put_AllowChangeDocument (
        /*[in]*/ AllowedChanges AllowedChanges ) = 0;
      virtual HRESULT __stdcall get_AllowCopyContent (
        /*[out,retval]*/ AllowedCopyLevel * allowedLevel ) = 0;
      virtual HRESULT __stdcall put_AllowCopyContent (
        /*[in]*/ AllowedCopyLevel allowedLevel ) = 0;
      virtual HRESULT __stdcall raw_SetSecurityFlagsRaw (
        /*[in]*/ long flags ) = 0;
      virtual HRESULT __stdcall get_OwnerPassword (
        /*[out,retval]*/ BSTR * OwnerPassword ) = 0;
      virtual HRESULT __stdcall put_OwnerPassword (
        /*[in]*/ BSTR OwnerPassword ) = 0;
      virtual HRESULT __stdcall get_UserPassword (
        /*[out,retval]*/ BSTR * UserPassword ) = 0;
      virtual HRESULT __stdcall put_UserPassword (
        /*[in]*/ BSTR UserPassword ) = 0;
      virtual HRESULT __stdcall raw_AddFont (
        /*[in]*/ BSTR fontFace,
        /*[in]*/ VARIANT_BOOL bold,
        /*[in]*/ VARIANT_BOOL italic,
        /*[in]*/ VARIANT_BOOL underline,
        /*[in]*/ VARIANT_BOOL strikeout,
        /*[in]*/ fontCharset charset,
        /*[out,retval]*/ long * fontNumber ) = 0;
      virtual HRESULT __stdcall raw_AddFontFromFile (
        /*[in]*/ BSTR fontFileName,
        /*[in]*/ VARIANT_BOOL bold,
        /*[in]*/ VARIANT_BOOL italic,
        /*[in]*/ VARIANT_BOOL underline,
        /*[in]*/ VARIANT_BOOL strikeout,
        /*[out,retval]*/ long * fontNumber ) = 0;
      virtual HRESULT __stdcall raw_AddBuiltInFont (
        /*[in]*/ BuiltInFont font,
        /*[in]*/ VARIANT_BOOL underline,
        /*[in]*/ VARIANT_BOOL strikeout,
        /*[out,retval]*/ long * fontNumber ) = 0;
      virtual HRESULT __stdcall get_FontEmbedStyle (
        /*[out,retval]*/ EmbedStyle * style ) = 0;
      virtual HRESULT __stdcall put_FontEmbedStyle (
        /*[in]*/ EmbedStyle style ) = 0;
      virtual HRESULT __stdcall raw_GetFontCount (
        /*[out,retval]*/ long * count ) = 0;
      virtual HRESULT __stdcall raw_GetFontName (
        /*[in]*/ long fontNumber,
        /*[out,retval]*/ BSTR * fontName ) = 0;
      virtual HRESULT __stdcall raw_GetFontDataSize (
        /*[in]*/ long fontNumber,
        /*[out,retval]*/ long * bufferSize ) = 0;
      virtual HRESULT __stdcall raw_GetFontData (
        /*[in]*/ long fontNumber,
        /*[out,retval]*/ VARIANT * buffer ) = 0;
      virtual HRESULT __stdcall raw_SaveFontToFile (
        /*[in]*/ long fontNumber,
        /*[in]*/ BSTR name ) = 0;
      virtual HRESULT __stdcall get_EmbedCommercialFonts (
        /*[out,retval]*/ VARIANT_BOOL * embed ) = 0;
      virtual HRESULT __stdcall put_EmbedCommercialFonts (
        /*[in]*/ VARIANT_BOOL embed ) = 0;
      virtual HRESULT __stdcall raw_GetDCResolution (
        /*[out,retval]*/ long * Resolution ) = 0;
      virtual HRESULT __stdcall raw_GetDC (
        /*[out,retval]*/ OLE_HANDLE * HDC ) = 0;
      virtual HRESULT __stdcall get_PrinterNameForDC (
        /*[out,retval]*/ BSTR * name ) = 0;
      virtual HRESULT __stdcall put_PrinterNameForDC (
        /*[in]*/ BSTR name ) = 0;
      virtual HRESULT __stdcall get_UseScreenBasedDC (
        /*[out,retval]*/ VARIANT_BOOL * use ) = 0;
      virtual HRESULT __stdcall put_UseScreenBasedDC (
        /*[in]*/ VARIANT_BOOL use ) = 0;
      virtual HRESULT __stdcall raw_FlushDC ( ) = 0;
      virtual HRESULT __stdcall get_OffsetXForDC (
        /*[out,retval]*/ float * offsetX ) = 0;
      virtual HRESULT __stdcall put_OffsetXForDC (
        /*[in]*/ float offsetX ) = 0;
      virtual HRESULT __stdcall get_OffsetYForDC (
        /*[out,retval]*/ float * offsetY ) = 0;
      virtual HRESULT __stdcall put_OffsetYForDC (
        /*[in]*/ float offsetY ) = 0;
      virtual HRESULT __stdcall get_ScaleXForDC (
        /*[out,retval]*/ float * scaleX ) = 0;
      virtual HRESULT __stdcall put_ScaleXForDC (
        /*[in]*/ float scaleX ) = 0;
      virtual HRESULT __stdcall get_ScaleYForDC (
        /*[out,retval]*/ float * scaleY ) = 0;
      virtual HRESULT __stdcall put_ScaleYForDC (
        /*[in]*/ float scaleY ) = 0;
      virtual HRESULT __stdcall put_DefaultFontFace (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall raw_AddWatermark (
        /*[out,retval]*/ long * watermarkNumber ) = 0;
      virtual HRESULT __stdcall raw_SwitchToWatermark (
        /*[in]*/ long watermarkNumber ) = 0;
      virtual HRESULT __stdcall raw_SwitchToCurrentPage ( ) = 0;
      virtual HRESULT __stdcall raw_AttachWatermark (
        /*[in]*/ long PageNumber,
        /*[in]*/ long watermarkNumber ) = 0;
      virtual HRESULT __stdcall raw_AddWatermark2 (
        /*[in]*/ VARIANT_BOOL showOnBackground,
        /*[out,retval]*/ long * watermarkNumber ) = 0;
      virtual HRESULT __stdcall raw_AddComment (
        /*[in]*/ BSTR Comment ) = 0;
      virtual HRESULT __stdcall raw_SaveGraphicsState ( ) = 0;
      virtual HRESULT __stdcall raw_RestoreGraphicsState ( ) = 0;
      virtual HRESULT __stdcall get_PageHeight (
        /*[out,retval]*/ long * height ) = 0;
      virtual HRESULT __stdcall put_PageHeight (
        /*[in]*/ long height ) = 0;
      virtual HRESULT __stdcall get_PageWidth (
        /*[out,retval]*/ long * width ) = 0;
      virtual HRESULT __stdcall put_PageWidth (
        /*[in]*/ long width ) = 0;
      virtual HRESULT __stdcall get_PageSize (
        /*[out,retval]*/ PaperFormat * size ) = 0;
      virtual HRESULT __stdcall put_PageSize (
        /*[in]*/ PaperFormat size ) = 0;
      virtual HRESULT __stdcall get_PageOrientation (
        /*[out,retval]*/ PaperOrientation * orientation ) = 0;
      virtual HRESULT __stdcall put_PageOrientation (
        /*[in]*/ PaperOrientation orientation ) = 0;
      virtual HRESULT __stdcall get_PageRotate (
        /*[out,retval]*/ RotateAngle * angle ) = 0;
      virtual HRESULT __stdcall put_PageRotate (
        /*[in]*/ RotateAngle angle ) = 0;
      virtual HRESULT __stdcall get_PageResolution (
        /*[out,retval]*/ long * Resolution ) = 0;
      virtual HRESULT __stdcall put_PageResolution (
        /*[in]*/ long Resolution ) = 0;
      virtual HRESULT __stdcall get_Thumbnail (
        /*[out,retval]*/ long * imageNumber ) = 0;
      virtual HRESULT __stdcall put_Thumbnail (
        /*[in]*/ long imageNumber ) = 0;
      virtual HRESULT __stdcall raw_AddLinkToPage (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ long PageNumber,
        /*[in]*/ float topOffset ) = 0;
      virtual HRESULT __stdcall raw_AddHyperLink (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ BSTR url ) = 0;
      virtual HRESULT __stdcall raw_AddButton (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_AddCheckBox (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_AddComboBox (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_AddEditBox (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_AddRadioButton (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_AddActionArea (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ long actionNumber,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_AddTextAnnotation (
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ BSTR title,
        /*[in]*/ BSTR contents,
        /*[in]*/ fontCharset charset,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_AddUnicodeTextAnnotation (
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ BSTR title,
        /*[in]*/ BSTR contents,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_AddFileAttachmentAnnotation (
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ BSTR title,
        /*[in]*/ BSTR contents,
        /*[in]*/ BSTR filePath,
        /*[in]*/ fontCharset charset,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_AddUnicodeFileAttachmentAnnotation (
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ BSTR title,
        /*[in]*/ BSTR contents,
        /*[in]*/ BSTR filePath,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_AddSoundAnnotation (
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ BSTR title,
        /*[in]*/ BSTR contents,
        /*[in]*/ BSTR filePath,
        /*[in]*/ fontCharset charset,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_AddUnicodeSoundAnnotation (
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ BSTR title,
        /*[in]*/ BSTR contents,
        /*[in]*/ BSTR filePath,
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall raw_PlayMetaFile (
        /*[in]*/ BSTR metafileName,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ float scaleX,
        /*[in]*/ float scaleY ) = 0;
      virtual HRESULT __stdcall raw_PlayMetaFileFromHandle (
        /*[in]*/ OLE_HANDLE metafileHandle,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ float scaleX,
        /*[in]*/ float scaleY ) = 0;
      virtual HRESULT __stdcall raw_PlayMetaFileFromBuffer (
        /*[in]*/ VARIANT * metafileBuffer,
        /*[in]*/ long metafileBufferSize,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ float scaleX,
        /*[in]*/ float scaleY ) = 0;
      virtual HRESULT __stdcall get_PlayMetafileMethodResult (
        /*[out,retval]*/ VARIANT_BOOL * result ) = 0;
      virtual HRESULT __stdcall raw_SetColor (
        /*[in]*/ float component1,
        /*[in]*/ float component2,
        /*[in]*/ float component3,
        /*[in]*/ float component4 ) = 0;
      virtual HRESULT __stdcall raw_SetColorFill (
        /*[in]*/ float component1,
        /*[in]*/ float component2,
        /*[in]*/ float component3,
        /*[in]*/ float component4 ) = 0;
      virtual HRESULT __stdcall raw_SetColorStroke (
        /*[in]*/ float component1,
        /*[in]*/ float component2,
        /*[in]*/ float component3,
        /*[in]*/ float component4 ) = 0;
      virtual HRESULT __stdcall raw_AddColorSpace (
        /*[in]*/ BSTR colorspaceFile,
        /*[out,retval]*/ long * colorspaceNumber ) = 0;
      virtual HRESULT __stdcall raw_SetColorSpace (
        /*[in]*/ long colorspaceNumber ) = 0;
      virtual HRESULT __stdcall raw_SetColorSpaceType (
        /*[in]*/ ColorSpaceType colorspace ) = 0;
      virtual HRESULT __stdcall raw_SetColorSpaceFill (
        /*[in]*/ long colorspaceNumber ) = 0;
      virtual HRESULT __stdcall raw_SetColorSpaceStroke (
        /*[in]*/ long colorspaceNumber ) = 0;
      virtual HRESULT __stdcall raw_SetColorSpaceTypeFill (
        /*[in]*/ ColorSpaceType colorspace ) = 0;
      virtual HRESULT __stdcall raw_SetColorSpaceTypeStroke (
        /*[in]*/ ColorSpaceType colorspace ) = 0;
      virtual HRESULT __stdcall raw_TransformColors (
        /*[in]*/ BSTR colorspaceFile ) = 0;
      virtual HRESULT __stdcall raw_AddColorTransformationRule (
        /*[in]*/ float originalColor1,
        /*[in]*/ float originalColor2,
        /*[in]*/ float originalColor3,
        /*[in]*/ float originalColor4,
        /*[in]*/ float transformedColor1,
        /*[in]*/ float transformedColor2,
        /*[in]*/ float transformedColor3,
        /*[in]*/ float transformedColor4 ) = 0;
      virtual HRESULT __stdcall raw_DrawArc (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ float firstX,
        /*[in]*/ float firstY,
        /*[in]*/ float secondX,
        /*[in]*/ float secondY ) = 0;
      virtual HRESULT __stdcall raw_DrawAngleArc (
        /*[in]*/ float centerX,
        /*[in]*/ float centerY,
        /*[in]*/ float radiusX,
        /*[in]*/ float radiusY,
        /*[in]*/ float degreeStartAngle,
        /*[in]*/ float degreeSweepAngle ) = 0;
      virtual HRESULT __stdcall raw_DrawArcTo (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ float firstX,
        /*[in]*/ float firstY,
        /*[in]*/ float secondX,
        /*[in]*/ float secondY,
        /*[in]*/ VARIANT_BOOL isClockwise ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentX (
        /*[out,retval]*/ float * x ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentY (
        /*[out,retval]*/ float * y ) = 0;
      virtual HRESULT __stdcall raw_DrawCircle (
        /*[in]*/ float centerX,
        /*[in]*/ float centerY,
        /*[in]*/ float radius ) = 0;
      virtual HRESULT __stdcall raw_ClosePath ( ) = 0;
      virtual HRESULT __stdcall raw_DrawCurveTo (
        /*[in]*/ float firstX,
        /*[in]*/ float firstY,
        /*[in]*/ float secondX,
        /*[in]*/ float secondY,
        /*[in]*/ float thirdX,
        /*[in]*/ float thirdY ) = 0;
      virtual HRESULT __stdcall raw_DrawEllipse (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom ) = 0;
      virtual HRESULT __stdcall raw_AlternateClip ( ) = 0;
      virtual HRESULT __stdcall raw_AlternateFill ( ) = 0;
      virtual HRESULT __stdcall raw_AlternateFillAndStroke ( ) = 0;
      virtual HRESULT __stdcall raw_Clip ( ) = 0;
      virtual HRESULT __stdcall raw_Fill ( ) = 0;
      virtual HRESULT __stdcall raw_Stroke ( ) = 0;
      virtual HRESULT __stdcall raw_FillAndStroke ( ) = 0;
      virtual HRESULT __stdcall raw_InPath (
        /*[out,retval]*/ VARIANT_BOOL * InPath ) = 0;
      virtual HRESULT __stdcall raw_DrawLineTo (
        /*[in]*/ float x,
        /*[in]*/ float y ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ float x,
        /*[in]*/ float y ) = 0;
      virtual HRESULT __stdcall raw_ResetPath ( ) = 0;
      virtual HRESULT __stdcall raw_DrawPie (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ float firstX,
        /*[in]*/ float firstY,
        /*[in]*/ float secondX,
        /*[in]*/ float secondY ) = 0;
      virtual HRESULT __stdcall raw_DrawAnglePie (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ float degreeStartAngle,
        /*[in]*/ float degreeSweepAngle ) = 0;
      virtual HRESULT __stdcall raw_DrawRectangle (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float width,
        /*[in]*/ float height,
        /*[in]*/ float RotateAngle ) = 0;
      virtual HRESULT __stdcall raw_DrawRoundRectangle (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float width,
        /*[in]*/ float height,
        /*[in]*/ float cornerWidth,
        /*[in]*/ float cornerHeight ) = 0;
      virtual HRESULT __stdcall raw_RotateCoords (
        /*[in]*/ float angle ) = 0;
      virtual HRESULT __stdcall raw_ScaleCoords (
        /*[in]*/ float scaleX,
        /*[in]*/ float scaleY ) = 0;
      virtual HRESULT __stdcall raw_TranslateCoords (
        /*[in]*/ float x,
        /*[in]*/ float y ) = 0;
      virtual HRESULT __stdcall raw_SetLineDash (
        /*[in]*/ BSTR dashString ) = 0;
      virtual HRESULT __stdcall raw_SetFlatness (
        /*[in]*/ long flatness ) = 0;
      virtual HRESULT __stdcall raw_SetLineCapStyle (
        /*[in]*/ LineCapStyle lineCap ) = 0;
      virtual HRESULT __stdcall raw_SetLineJoinStyle (
        /*[in]*/ LineJoinStyle lineJoin ) = 0;
      virtual HRESULT __stdcall raw_SetLineWidth (
        /*[in]*/ float lineWidth ) = 0;
      virtual HRESULT __stdcall raw_SetMiterLimit (
        /*[in]*/ float miterLimit ) = 0;
      virtual HRESULT __stdcall raw_DrawImage (
        /*[in]*/ long imageNumber,
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float width,
        /*[in]*/ float height,
        /*[in]*/ float angle ) = 0;
      virtual HRESULT __stdcall raw_ShowImage (
        /*[in]*/ long imageNumber,
        /*[in]*/ float left,
        /*[in]*/ float top ) = 0;
      virtual HRESULT __stdcall raw_SkewCoords (
        /*[in]*/ float xAngle,
        /*[in]*/ float yAngle ) = 0;
      virtual HRESULT __stdcall raw_UseFont (
        /*[in]*/ long fontNumber,
        /*[in]*/ float fontSizePt ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentTextX (
        /*[out,retval]*/ float * x ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentTextY (
        /*[out,retval]*/ float * y ) = 0;
      virtual HRESULT __stdcall raw_GetTextHeight (
        /*[in]*/ BSTR text,
        /*[out,retval]*/ float * height ) = 0;
      virtual HRESULT __stdcall raw_GetTextWidth (
        /*[in]*/ BSTR text,
        /*[out,retval]*/ float * width ) = 0;
      virtual HRESULT __stdcall raw_GetUnicodeTextHeight (
        /*[in]*/ BSTR text,
        /*[out,retval]*/ float * height ) = 0;
      virtual HRESULT __stdcall raw_GetUnicodeTextWidth (
        /*[in]*/ BSTR text,
        /*[out,retval]*/ float * width ) = 0;
      virtual HRESULT __stdcall get_TextAngle (
        /*[out,retval]*/ float * angleDegrees ) = 0;
      virtual HRESULT __stdcall put_TextAngle (
        /*[in]*/ float angleDegrees ) = 0;
      virtual HRESULT __stdcall raw_SetCharacterSpacing (
        /*[in]*/ float spacing ) = 0;
      virtual HRESULT __stdcall raw_SetTextHorizontalScaling (
        /*[in]*/ float scaling ) = 0;
      virtual HRESULT __stdcall raw_SetTextPosition (
        /*[in]*/ float x,
        /*[in]*/ float y ) = 0;
      virtual HRESULT __stdcall raw_SetTextRenderingMode (
        /*[in]*/ TextRenderingMode mode ) = 0;
      virtual HRESULT __stdcall raw_SetTextRise (
        /*[in]*/ float Rise ) = 0;
      virtual HRESULT __stdcall raw_SetWordSpacing (
        /*[in]*/ float spacing ) = 0;
      virtual HRESULT __stdcall raw_UseFont2 (
        /*[in]*/ long fontNumber,
        /*[in]*/ float fontSizePt,
        /*[in]*/ VARIANT_BOOL underline,
        /*[in]*/ VARIANT_BOOL strikeout ) = 0;
      virtual HRESULT __stdcall raw_GetTextDirection (
        /*[out,retval]*/ TextDirection * TextDirection ) = 0;
      virtual HRESULT __stdcall raw_SetTextDirection (
        /*[in]*/ TextDirection TextDirection ) = 0;
      virtual HRESULT __stdcall raw_ShowText (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_ShowTextAligned (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ TextAlign align,
        /*[in]*/ VerticalAlign VerticalAlign,
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_ShowTextAt (
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_ShowTextLines (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ float interval,
        /*[in]*/ TextAlign align,
        /*[in]*/ VerticalAlign VerticalAlign,
        /*[in]*/ BSTR text,
        /*[out,retval]*/ long * linesShown ) = 0;
      virtual HRESULT __stdcall raw_ShowTextParagraph (
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ ParagraphAlign pAlign,
        /*[in]*/ float interval,
        /*[in]*/ float marginLeft,
        /*[in]*/ float marginTop,
        /*[in]*/ float marginRight,
        /*[in]*/ float marginBottom,
        BSTR text ) = 0;
      virtual HRESULT __stdcall raw_ShowUnicodeText (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_ShowUnicodeTextAligned (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ TextAlign align,
        /*[in]*/ VerticalAlign VerticalAlign,
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_ShowUnicodeTextAt (
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_ShowUnicodeTextLines (
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float right,
        /*[in]*/ float bottom,
        /*[in]*/ float interval,
        /*[in]*/ TextAlign align,
        /*[in]*/ VerticalAlign VerticalAlign,
        /*[in]*/ BSTR text,
        /*[out,retval]*/ long * linesShown ) = 0;
      virtual HRESULT __stdcall raw_ShowUnicodeTextParagraph (
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ ParagraphAlign pAlign,
        /*[in]*/ float interval,
        /*[in]*/ float marginLeft,
        /*[in]*/ float marginTop,
        /*[in]*/ float marginRight,
        /*[in]*/ float marginBottom,
        BSTR text ) = 0;
      virtual HRESULT __stdcall raw_GetDocumentText (
        /*[out,retval]*/ BSTR * text ) = 0;
      virtual HRESULT __stdcall raw_GetPageText (
        /*[in]*/ long PageNumber,
        /*[out,retval]*/ BSTR * text ) = 0;
      virtual HRESULT __stdcall raw_AddImageFromHandle (
        /*[in]*/ OLE_HANDLE handle,
        /*[out,retval]*/ long * imageNumber ) = 0;
      virtual HRESULT __stdcall raw_AddImageFromBuffer (
        /*[in]*/ LPSTR imageBuffer,
        /*[in]*/ long bufferSizeInBytes,
        /*[out,retval]*/ long * imageNumber ) = 0;
      virtual HRESULT __stdcall raw_AddImageFromBLOB (
        /*[in]*/ VARIANT * image,
        /*[out,retval]*/ long * imageNumber ) = 0;
      virtual HRESULT __stdcall raw_AddImageFromFile (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ long * imageNumber ) = 0;
      virtual HRESULT __stdcall raw_AddImageWithColorMask (
        /*[in]*/ BSTR FileName,
        /*[in]*/ OLE_COLOR rgbColor,
        /*[out,retval]*/ long * imageNumber ) = 0;
      virtual HRESULT __stdcall raw_AddImageWithMask (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR maskFileName,
        /*[out,retval]*/ long * imageNumber ) = 0;
      virtual HRESULT __stdcall raw_TransformImage (
        /*[in]*/ long imageNumber,
        /*[in]*/ ImageTransformation transformation ) = 0;
      virtual HRESULT __stdcall raw_GetImageCount (
        /*[out,retval]*/ long * imageCount ) = 0;
      virtual HRESULT __stdcall raw_GetImageHeight (
        /*[in]*/ long imageNumber,
        /*[out,retval]*/ long * height ) = 0;
      virtual HRESULT __stdcall raw_GetImageWidth (
        /*[in]*/ long imageNumber,
        /*[out,retval]*/ long * width ) = 0;
      virtual HRESULT __stdcall raw_GetImageResolution (
        /*[in]*/ long imageNumber,
        /*[out,retval]*/ long * Resolution ) = 0;
      virtual HRESULT __stdcall raw_AddImageFromHandleWithColorMask (
        /*[in]*/ OLE_HANDLE handle,
        /*[in]*/ OLE_COLOR rgbColor,
        /*[out,retval]*/ long * imageNumber ) = 0;
      virtual HRESULT __stdcall put_CompressMonochromeImages (
        VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall raw_GetImageDataSize (
        /*[in]*/ long imageNumber,
        /*[out,retval]*/ long * bufferSize ) = 0;
      virtual HRESULT __stdcall raw_GetImageData (
        /*[in]*/ long imageNumber,
        /*[out,retval]*/ VARIANT * buffer ) = 0;
      virtual HRESULT __stdcall raw_AddControlToAction (
        /*[in]*/ long actionNumber,
        /*[in]*/ long controlNumber ) = 0;
      virtual HRESULT __stdcall raw_CreateGoToPageAction (
        /*[in]*/ long PageNumber,
        /*[in]*/ float topOffset,
        /*[out,retval]*/ long * createdActionNumber ) = 0;
      virtual HRESULT __stdcall raw_CreateImportDataAction (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ long * createdActionNumber ) = 0;
      virtual HRESULT __stdcall raw_CreateJavascriptAction (
        /*[in]*/ BSTR scriptContents,
        /*[out,retval]*/ long * createdActionNumber ) = 0;
      virtual HRESULT __stdcall raw_CreateResetFormAction (
        /*[out,retval]*/ long * createdActionNumber ) = 0;
      virtual HRESULT __stdcall raw_CreateSubmitFormAction (
        /*[in]*/ BSTR url,
        /*[in]*/ VARIANT_BOOL sendEmptyFields,
        /*[in]*/ SubmitMethod SubmitMethod,
        /*[out,retval]*/ long * createdActionNumber ) = 0;
      virtual HRESULT __stdcall raw_CreateHyperLinkAction (
        /*[in]*/ BSTR url,
        /*[out,retval]*/ long * createdActionNumber ) = 0;
      virtual HRESULT __stdcall raw_CreateShowControlAction (
        /*[out,retval]*/ long * createdActionNumber ) = 0;
      virtual HRESULT __stdcall raw_CreateHideControlAction (
        /*[out,retval]*/ long * createdActionNumber ) = 0;
      virtual HRESULT __stdcall get_OnOpenDocument (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_OnOpenDocument (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall get_CurrentAnnotation (
        /*[out,retval]*/ long * annotNumber ) = 0;
      virtual HRESULT __stdcall put_CurrentAnnotation (
        /*[in]*/ long annotNumber ) = 0;
      virtual HRESULT __stdcall get_OnControlBeforeFormatting (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_OnControlBeforeFormatting (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall get_OnControlChange (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_OnControlChange (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall get_OnControlKeyPress (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_OnControlKeyPress (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall get_OnControlSetFocus (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_OnControlSetFocus (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall get_OnControlLostFocus (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_OnControlLostFocus (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall get_OnControlMouseDown (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_OnControlMouseDown (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall get_OnControlMouseUp (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_OnControlMouseUp (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall get_OnControlMouseEnter (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_OnControlMouseEnter (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall get_OnControlMouseExit (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_OnControlMouseExit (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall get_OnControlOtherChanged (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_OnControlOtherChanged (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall raw_GetAnnotType (
        /*[out,retval]*/ AnnotationType * type ) = 0;
      virtual HRESULT __stdcall get_AnnotAction (
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall put_AnnotAction (
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall get_ControlBackColor (
        /*[out,retval]*/ OLE_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_ControlBackColor (
        /*[in]*/ OLE_COLOR color ) = 0;
      virtual HRESULT __stdcall get_AnnotBorderColor (
        /*[out,retval]*/ OLE_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_AnnotBorderColor (
        /*[in]*/ OLE_COLOR color ) = 0;
      virtual HRESULT __stdcall get_AnnotBorderStyle (
        /*[out,retval]*/ AnnotationBorderStyle * style ) = 0;
      virtual HRESULT __stdcall put_AnnotBorderStyle (
        /*[in]*/ AnnotationBorderStyle style ) = 0;
      virtual HRESULT __stdcall get_AnnotLeft (
        /*[out,retval]*/ float * left ) = 0;
      virtual HRESULT __stdcall put_AnnotLeft (
        /*[in]*/ float left ) = 0;
      virtual HRESULT __stdcall get_AnnotTop (
        /*[out,retval]*/ float * top ) = 0;
      virtual HRESULT __stdcall put_AnnotTop (
        /*[in]*/ float top ) = 0;
      virtual HRESULT __stdcall get_AnnotWidth (
        /*[out,retval]*/ float * width ) = 0;
      virtual HRESULT __stdcall put_AnnotWidth (
        /*[in]*/ float width ) = 0;
      virtual HRESULT __stdcall get_AnnotHeight (
        /*[out,retval]*/ float * height ) = 0;
      virtual HRESULT __stdcall put_AnnotHeight (
        /*[in]*/ float height ) = 0;
      virtual HRESULT __stdcall get_ControlChecked (
        /*[out,retval]*/ VARIANT_BOOL * checked ) = 0;
      virtual HRESULT __stdcall put_ControlChecked (
        /*[in]*/ VARIANT_BOOL checked ) = 0;
      virtual HRESULT __stdcall get_ComboBoxEditEnabled (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_ComboBoxEditEnabled (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_RadioButtonExportValue (
        /*[out,retval]*/ BSTR * exportValue ) = 0;
      virtual HRESULT __stdcall put_RadioButtonExportValue (
        /*[in]*/ BSTR exportValue ) = 0;
      virtual HRESULT __stdcall get_AnnotInvisible (
        /*[out,retval]*/ VARIANT_BOOL * invisible ) = 0;
      virtual HRESULT __stdcall put_AnnotInvisible (
        /*[in]*/ VARIANT_BOOL invisible ) = 0;
      virtual HRESULT __stdcall get_AnnotHidden (
        /*[out,retval]*/ VARIANT_BOOL * hidden ) = 0;
      virtual HRESULT __stdcall put_AnnotHidden (
        /*[in]*/ VARIANT_BOOL hidden ) = 0;
      virtual HRESULT __stdcall get_AnnotPrint (
        /*[out,retval]*/ VARIANT_BOOL * print ) = 0;
      virtual HRESULT __stdcall put_AnnotPrint (
        /*[in]*/ VARIANT_BOOL print ) = 0;
      virtual HRESULT __stdcall get_AnnotNoZoom (
        /*[out,retval]*/ VARIANT_BOOL * noZoom ) = 0;
      virtual HRESULT __stdcall put_AnnotNoZoom (
        /*[in]*/ VARIANT_BOOL noZoom ) = 0;
      virtual HRESULT __stdcall get_AnnotNoRotate (
        /*[out,retval]*/ VARIANT_BOOL * noRotate ) = 0;
      virtual HRESULT __stdcall put_AnnotNoRotate (
        /*[in]*/ VARIANT_BOOL noRotate ) = 0;
      virtual HRESULT __stdcall get_AnnotNoView (
        /*[out,retval]*/ VARIANT_BOOL * noView ) = 0;
      virtual HRESULT __stdcall put_AnnotNoView (
        /*[in]*/ VARIANT_BOOL noView ) = 0;
      virtual HRESULT __stdcall get_AnnotReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * readOnly ) = 0;
      virtual HRESULT __stdcall put_AnnotReadOnly (
        /*[in]*/ VARIANT_BOOL readOnly ) = 0;
      virtual HRESULT __stdcall get_AnnotLocked (
        /*[out,retval]*/ VARIANT_BOOL * locked ) = 0;
      virtual HRESULT __stdcall put_AnnotLocked (
        /*[in]*/ VARIANT_BOOL locked ) = 0;
      virtual HRESULT __stdcall get_AnnotToggleNoView (
        /*[out,retval]*/ VARIANT_BOOL * toggleNoView ) = 0;
      virtual HRESULT __stdcall put_AnnotToggleNoView (
        /*[in]*/ VARIANT_BOOL toggleNoView ) = 0;
      virtual HRESULT __stdcall get_AnnotLockedContents (
        /*[out,retval]*/ VARIANT_BOOL * lockedContents ) = 0;
      virtual HRESULT __stdcall put_AnnotLockedContents (
        /*[in]*/ VARIANT_BOOL lockedContents ) = 0;
      virtual HRESULT __stdcall get_ControlTextColor (
        /*[out,retval]*/ OLE_COLOR * color ) = 0;
      virtual HRESULT __stdcall put_ControlTextColor (
        /*[in]*/ OLE_COLOR color ) = 0;
      virtual HRESULT __stdcall get_ControlFont (
        /*[out,retval]*/ long * fontNumber ) = 0;
      virtual HRESULT __stdcall put_ControlFont (
        /*[in]*/ long fontNumber ) = 0;
      virtual HRESULT __stdcall get_ControlFontSize (
        /*[out,retval]*/ float * sizePt ) = 0;
      virtual HRESULT __stdcall put_ControlFontSize (
        /*[in]*/ float sizePt ) = 0;
      virtual HRESULT __stdcall get_AnnotBorderDashPattern (
        /*[out,retval]*/ BSTR * dashPattern ) = 0;
      virtual HRESULT __stdcall put_AnnotBorderDashPattern (
        /*[in]*/ BSTR dashPattern ) = 0;
      virtual HRESULT __stdcall get_IsPasswordEditBox (
        /*[out,retval]*/ VARIANT_BOOL * password ) = 0;
      virtual HRESULT __stdcall put_IsPasswordEditBox (
        /*[in]*/ VARIANT_BOOL password ) = 0;
      virtual HRESULT __stdcall get_IsOpenedTextAnnot (
        /*[out,retval]*/ VARIANT_BOOL * opened ) = 0;
      virtual HRESULT __stdcall put_IsOpenedTextAnnot (
        /*[in]*/ VARIANT_BOOL opened ) = 0;
      virtual HRESULT __stdcall get_IsReadOnlyControl (
        /*[out,retval]*/ VARIANT_BOOL * readOnly ) = 0;
      virtual HRESULT __stdcall put_IsReadOnlyControl (
        /*[in]*/ VARIANT_BOOL readOnly ) = 0;
      virtual HRESULT __stdcall get_IsRequiredControl (
        /*[out,retval]*/ VARIANT_BOOL * required ) = 0;
      virtual HRESULT __stdcall put_IsRequiredControl (
        /*[in]*/ VARIANT_BOOL required ) = 0;
      virtual HRESULT __stdcall get_IsMultilineEditBox (
        /*[out,retval]*/ VARIANT_BOOL * multiline ) = 0;
      virtual HRESULT __stdcall put_IsMultilineEditBox (
        /*[in]*/ VARIANT_BOOL multiline ) = 0;
      virtual HRESULT __stdcall get_AnnotBorderWidth (
        /*[out,retval]*/ long * width ) = 0;
      virtual HRESULT __stdcall put_AnnotBorderWidth (
        /*[in]*/ long width ) = 0;
      virtual HRESULT __stdcall get_IsRichTextEditBox (
        /*[out,retval]*/ VARIANT_BOOL * richText ) = 0;
      virtual HRESULT __stdcall put_IsRichTextEditBox (
        /*[in]*/ VARIANT_BOOL richText ) = 0;
      virtual HRESULT __stdcall get_RawControlBits (
        /*[out,retval]*/ long * value ) = 0;
      virtual HRESULT __stdcall put_RawControlBits (
        /*[in]*/ long value ) = 0;
      virtual HRESULT __stdcall put_CheckSymbol (
        /*[in]*/ CheckSymbol _arg1 ) = 0;
      virtual HRESULT __stdcall get_ControlTextAlign (
        /*[out,retval]*/ TextAlign * align ) = 0;
      virtual HRESULT __stdcall put_ControlTextAlign (
        /*[in]*/ TextAlign align ) = 0;
      virtual HRESULT __stdcall get_ControlVerticalAlign (
        /*[out,retval]*/ VerticalAlign * align ) = 0;
      virtual HRESULT __stdcall put_ControlVerticalAlign (
        /*[in]*/ VerticalAlign align ) = 0;
      virtual HRESULT __stdcall get_EditBoxMaxLength (
        /*[out,retval]*/ long * maxLength ) = 0;
      virtual HRESULT __stdcall put_EditBoxMaxLength (
        /*[in]*/ long maxLength ) = 0;
      virtual HRESULT __stdcall get_ControlName (
        /*[out,retval]*/ BSTR * name ) = 0;
      virtual HRESULT __stdcall put_ControlName (
        /*[in]*/ BSTR name ) = 0;
      virtual HRESULT __stdcall get_ControlShowBorder (
        /*[out,retval]*/ VARIANT_BOOL * show ) = 0;
      virtual HRESULT __stdcall put_ControlShowBorder (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall get_TextAnnotIcon (
        /*[out,retval]*/ TextAnnotationIcon * icon ) = 0;
      virtual HRESULT __stdcall put_TextAnnotIcon (
        /*[in]*/ TextAnnotationIcon icon ) = 0;
      virtual HRESULT __stdcall get_ComboBoxUnicodeItems (
        /*[out,retval]*/ BSTR * items ) = 0;
      virtual HRESULT __stdcall put_ComboBoxUnicodeItems (
        /*[in]*/ BSTR items ) = 0;
      virtual HRESULT __stdcall raw_SetComboBoxItems (
        /*[in]*/ BSTR items,
        /*[in]*/ fontCharset charset ) = 0;
      virtual HRESULT __stdcall get_AnnotUnicodeCaption (
        /*[out,retval]*/ BSTR * caption ) = 0;
      virtual HRESULT __stdcall put_AnnotUnicodeCaption (
        /*[in]*/ BSTR caption ) = 0;
      virtual HRESULT __stdcall raw_SetAnnotCaption (
        /*[in]*/ BSTR caption,
        /*[in]*/ fontCharset charset ) = 0;
      virtual HRESULT __stdcall get_ControlUnicodeHint (
        /*[out,retval]*/ BSTR * hint ) = 0;
      virtual HRESULT __stdcall put_ControlUnicodeHint (
        /*[in]*/ BSTR hint ) = 0;
      virtual HRESULT __stdcall raw_SetControlHint (
        /*[in]*/ BSTR hint,
        /*[in]*/ fontCharset charset ) = 0;
      virtual HRESULT __stdcall get_AnnotUnicodeText (
        /*[out,retval]*/ BSTR * text ) = 0;
      virtual HRESULT __stdcall put_AnnotUnicodeText (
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_SetAnnotText (
        /*[in]*/ BSTR text,
        /*[in]*/ fontCharset charset ) = 0;
      virtual HRESULT __stdcall raw_GetAnnotCount (
        /*[out,retval]*/ long * annotCount ) = 0;
      virtual HRESULT __stdcall get_FileAttachmentAnnotIcon (
        /*[out,retval]*/ FileAttachmentAnnotationIcon * icon ) = 0;
      virtual HRESULT __stdcall put_FileAttachmentAnnotIcon (
        /*[in]*/ FileAttachmentAnnotationIcon icon ) = 0;
      virtual HRESULT __stdcall get_SoundAnnotIcon (
        /*[out,retval]*/ SoundAnnotationIcon * icon ) = 0;
      virtual HRESULT __stdcall put_SoundAnnotIcon (
        /*[in]*/ SoundAnnotationIcon icon ) = 0;
      virtual HRESULT __stdcall get_AnnotSamplingRate (
        /*[out,retval]*/ float * rate ) = 0;
      virtual HRESULT __stdcall put_AnnotSamplingRate (
        /*[in]*/ float rate ) = 0;
      virtual HRESULT __stdcall get_AnnotNumberOfSoundChannels (
        /*[out,retval]*/ long * numberChannels ) = 0;
      virtual HRESULT __stdcall put_AnnotNumberOfSoundChannels (
        /*[in]*/ long numberChannels ) = 0;
      virtual HRESULT __stdcall get_AnnotNumberOfBitsPerSample (
        /*[out,retval]*/ long * numberBits ) = 0;
      virtual HRESULT __stdcall put_AnnotNumberOfBitsPerSample (
        /*[in]*/ long numberBits ) = 0;
      virtual HRESULT __stdcall get_AnnotEncodingFormat (
        /*[out,retval]*/ EncodingFormat * format ) = 0;
      virtual HRESULT __stdcall put_AnnotEncodingFormat (
        /*[in]*/ EncodingFormat format ) = 0;
      virtual HRESULT __stdcall raw_RemoveAnnotation (
        /*[in]*/ long annotNumber ) = 0;
      virtual HRESULT __stdcall raw_GetAnnotationPage (
        /*[in]*/ long annotNumber,
        /*[out,retval]*/ long * PageNumber ) = 0;
      virtual HRESULT __stdcall get_AttachmentAnnotationFileName (
        /*[out,retval]*/ BSTR * FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveAttachmentAnnotationToFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_IsControlNameVacant (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ VARIANT_BOOL * vacant ) = 0;
      virtual HRESULT __stdcall raw_GetRootOutline (
        /*[out,retval]*/ long * outlineNode ) = 0;
      virtual HRESULT __stdcall raw_GetOutlineCount (
        /*[out,retval]*/ long * outlineCount ) = 0;
      virtual HRESULT __stdcall raw_GetOutlineChildCount (
        /*[in]*/ long outlineNode,
        /*[out,retval]*/ long * childCount ) = 0;
      virtual HRESULT __stdcall raw_GetOutlineChild (
        /*[in]*/ long outlineNode,
        /*[in]*/ long childIndex,
        /*[out,retval]*/ long * childNode ) = 0;
      virtual HRESULT __stdcall raw_GetOutlineFirstChild (
        /*[in]*/ long outlineNode,
        /*[out,retval]*/ long * firstChildNode ) = 0;
      virtual HRESULT __stdcall raw_GetOutlineLastChild (
        /*[in]*/ long outlineNode,
        /*[out,retval]*/ long * lastChildNode ) = 0;
      virtual HRESULT __stdcall raw_GetNextOutline (
        /*[in]*/ long outlineNode,
        /*[out,retval]*/ long * nextNode ) = 0;
      virtual HRESULT __stdcall raw_GetNextSiblingOutline (
        /*[in]*/ long outlineNode,
        /*[out,retval]*/ long * nextSiblingNode ) = 0;
      virtual HRESULT __stdcall raw_GetPrevOutline (
        /*[in]*/ long outlineNode,
        /*[out,retval]*/ long * prevNode ) = 0;
      virtual HRESULT __stdcall raw_GetPrevSiblingOutline (
        /*[in]*/ long outlineNode,
        /*[out,retval]*/ long * prevSiblingNode ) = 0;
      virtual HRESULT __stdcall raw_AddOutlineBefore (
        /*[in]*/ long outlineNode,
        /*[in]*/ BSTR title,
        /*[in]*/ fontCharset charset,
        /*[out,retval]*/ long * addedOutlineNode ) = 0;
      virtual HRESULT __stdcall raw_AddUnicodeOutlineBefore (
        /*[in]*/ long outlineNode,
        /*[in]*/ BSTR title,
        /*[out,retval]*/ long * addedOutlineNode ) = 0;
      virtual HRESULT __stdcall raw_AddOutlineAfter (
        /*[in]*/ long outlineNode,
        /*[in]*/ BSTR title,
        /*[in]*/ fontCharset charset,
        /*[out,retval]*/ long * addedOutlineNode ) = 0;
      virtual HRESULT __stdcall raw_AddUnicodeOutlineAfter (
        /*[in]*/ long outlineNode,
        /*[in]*/ BSTR title,
        /*[out,retval]*/ long * addedOutlineNode ) = 0;
      virtual HRESULT __stdcall raw_AddOutlineChild (
        /*[in]*/ long outlineNode,
        /*[in]*/ BSTR title,
        /*[in]*/ fontCharset charset,
        /*[out,retval]*/ long * addedOutlineNode ) = 0;
      virtual HRESULT __stdcall raw_AddUnicodeOutlineChild (
        /*[in]*/ long outlineNode,
        /*[in]*/ BSTR title,
        /*[out,retval]*/ long * addedOutlineNode ) = 0;
      virtual HRESULT __stdcall raw_GetOutlineAction (
        /*[in]*/ long outlineNode,
        /*[out,retval]*/ long * actionNumber ) = 0;
      virtual HRESULT __stdcall raw_SetOutlineAction (
        /*[in]*/ long outlineNode,
        /*[in]*/ long actionNumber ) = 0;
      virtual HRESULT __stdcall raw_IsOutlineExpanded (
        /*[in]*/ long outlineNode,
        /*[out,retval]*/ VARIANT_BOOL * expanded ) = 0;
      virtual HRESULT __stdcall raw_SetOutlineExpanded (
        /*[in]*/ long outlineNode,
        /*[in]*/ VARIANT_BOOL expanded ) = 0;
      virtual HRESULT __stdcall raw_GetOutlineUnicodeTitle (
        /*[in]*/ long outlineNode,
        /*[out,retval]*/ BSTR * title ) = 0;
      virtual HRESULT __stdcall raw_SetOutlineUnicodeTitle (
        /*[in]*/ long outlineNode,
        /*[in]*/ BSTR title ) = 0;
      virtual HRESULT __stdcall raw_SetOutlineTitle (
        /*[in]*/ long outlineNode,
        /*[in]*/ BSTR title,
        /*[in]*/ fontCharset charset ) = 0;
      virtual HRESULT __stdcall raw_DeleteOutline (
        /*[in]*/ long outlineNode,
        /*[in]*/ VARIANT_BOOL onlyChildren ) = 0;
      virtual HRESULT __stdcall raw_RemoveOutlines ( ) = 0;
      virtual HRESULT __stdcall raw_AddColoredPattern (
        /*[in]*/ PatternTilingType tilingType,
        /*[out,retval]*/ long * addedPatternNumber ) = 0;
      virtual HRESULT __stdcall raw_AddUnColoredPattern (
        /*[in]*/ PatternTilingType tilingType,
        /*[in]*/ ColorSpaceType type,
        /*[out,retval]*/ long * addedPatternNumber ) = 0;
      virtual HRESULT __stdcall raw_SwitchToPattern (
        /*[in]*/ long patternNumber ) = 0;
      virtual HRESULT __stdcall raw_SetPattern (
        /*[in]*/ long patternNumber ) = 0;
      virtual HRESULT __stdcall raw_SetOpacity (
        /*[in]*/ float opacity ) = 0;
      virtual HRESULT __stdcall raw_SetOpacityFill (
        /*[in]*/ float opacity ) = 0;
      virtual HRESULT __stdcall raw_SetOpacityStroke (
        /*[in]*/ float opacity ) = 0;
      virtual HRESULT __stdcall raw_SetBlendMode (
        /*[in]*/ BlendMode mode ) = 0;
      virtual HRESULT __stdcall raw_CreateContentGroup (
        /*[in]*/ BSTR groupName,
        /*[out,retval]*/ long * addedGroupIndex ) = 0;
      virtual HRESULT __stdcall raw_BeginMarkedContent (
        /*[in]*/ long groupIndex ) = 0;
      virtual HRESULT __stdcall raw_EndMarkedContent ( ) = 0;
      virtual HRESULT __stdcall raw_GetContentGroupState (
        /*[in]*/ long groupIndex,
        /*[out,retval]*/ VARIANT_BOOL * groupState ) = 0;
      virtual HRESULT __stdcall raw_SetContentGroupState (
        /*[in]*/ long groupIndex,
        /*[in]*/ VARIANT_BOOL groupState ) = 0;
      virtual HRESULT __stdcall raw_GetContentGroupCount (
        /*[out,retval]*/ long * contentGroupCount ) = 0;
      virtual HRESULT __stdcall raw_GetContentGroupName (
        /*[in]*/ long groupIndex,
        /*[out,retval]*/ BSTR * groupName ) = 0;
      virtual HRESULT __stdcall raw_SetContentGroupName (
        /*[in]*/ long groupIndex,
        /*[in]*/ BSTR groupName ) = 0;
      virtual HRESULT __stdcall raw_BeginOrder (
        /*[in]*/ BSTR orderName ) = 0;
      virtual HRESULT __stdcall raw_EndOrder ( ) = 0;
      virtual HRESULT __stdcall raw_AddContentGroup (
        /*[in]*/ long groupIndex ) = 0;
      virtual HRESULT __stdcall raw_RemoveOrders ( ) = 0;
      virtual HRESULT __stdcall raw_DrawPageToDC (
        /*[in]*/ OLE_HANDLE HDC,
        /*[in]*/ long PageNumber,
        /*[in]*/ float zoomX,
        /*[in]*/ float zoomY,
        /*[in]*/ VARIANT_BOOL drawControls ) = 0;
      virtual HRESULT __stdcall raw_SavePageAsBMP (
        /*[in]*/ long PageNumber,
        /*[in]*/ BSTR FileName,
        /*[in]*/ long dpiX,
        /*[in]*/ long dpiY ) = 0;
      virtual HRESULT __stdcall raw_SavePageAsJPEG (
        /*[in]*/ long PageNumber,
        /*[in]*/ BSTR FileName,
        /*[in]*/ long dpiX,
        /*[in]*/ long dpiY ) = 0;
      virtual HRESULT __stdcall raw_SavePageAsGIF (
        /*[in]*/ long PageNumber,
        /*[in]*/ BSTR FileName,
        /*[in]*/ long dpiX,
        /*[in]*/ long dpiY ) = 0;
      virtual HRESULT __stdcall raw_SavePageAsPNG (
        /*[in]*/ long PageNumber,
        /*[in]*/ BSTR FileName,
        /*[in]*/ long dpiX,
        /*[in]*/ long dpiY ) = 0;
      virtual HRESULT __stdcall raw_SavePageAsTIFF (
        /*[in]*/ long PageNumber,
        /*[in]*/ BSTR FileName,
        /*[in]*/ long dpiX,
        /*[in]*/ long dpiY ) = 0;
      virtual HRESULT __stdcall raw_SavePageAsEMF (
        /*[in]*/ long PageNumber,
        /*[in]*/ BSTR FileName,
        /*[in]*/ long dpiX,
        /*[in]*/ long dpiY ) = 0;
      virtual HRESULT __stdcall raw_SaveDocumentAsTIFF (
        /*[in]*/ BSTR FileName,
        /*[in]*/ long dpiX,
        /*[in]*/ long dpiY ) = 0;
      virtual HRESULT __stdcall raw_AddTable (
        /*[in]*/ long nColumn,
        /*[in]*/ long nRow,
        /*[in]*/ long defaultFont,
        /*[in]*/ float defaultFontSize,
        /*[out,retval]*/ long * tableIndex ) = 0;
      virtual HRESULT __stdcall raw_ShowTable (
        /*[in]*/ long tableNumber,
        /*[in]*/ float left,
        /*[in]*/ float top,
        /*[in]*/ float scaleX,
        /*[in]*/ float scaleY ) = 0;
      virtual HRESULT __stdcall raw_SetTableColumnSize (
        /*[in]*/ long tableNumber,
        /*[in]*/ long columnNumber,
        /*[in]*/ float width ) = 0;
      virtual HRESULT __stdcall raw_SetTableRowSize (
        /*[in]*/ long tableNumber,
        /*[in]*/ long rowNumber,
        /*[in]*/ float height ) = 0;
      virtual HRESULT __stdcall raw_SetCellTableFont (
        /*[in]*/ long tableNumber,
        /*[in]*/ long columnNumber,
        /*[in]*/ long rowNumber,
        /*[in]*/ long fontNumber ) = 0;
      virtual HRESULT __stdcall raw_SetCellTableFontSize (
        /*[in]*/ long tableNumber,
        /*[in]*/ long columnNumber,
        /*[in]*/ long rowNumber,
        /*[in]*/ float fontSize ) = 0;
      virtual HRESULT __stdcall raw_SetCellTableText (
        /*[in]*/ long tableNumber,
        /*[in]*/ long columnNumber,
        /*[in]*/ long rowNumber,
        /*[in]*/ BSTR text ) = 0;
      virtual HRESULT __stdcall raw_SetCellTableTextAlign (
        /*[in]*/ long tableNumber,
        /*[in]*/ long columnNumber,
        /*[in]*/ long rowNumber,
        /*[in]*/ TextAlign align ) = 0;
      virtual HRESULT __stdcall raw_SetColumnTableFont (
        /*[in]*/ long tableNumber,
        /*[in]*/ long columnNumber,
        /*[in]*/ long fontNumber ) = 0;
      virtual HRESULT __stdcall raw_SetRowTableFont (
        /*[in]*/ long tableNumber,
        /*[in]*/ long rowNumber,
        /*[in]*/ long fontNumber ) = 0;
      virtual HRESULT __stdcall raw_SetColumnTableFontSize (
        /*[in]*/ long tableNumber,
        /*[in]*/ long columnNumber,
        /*[in]*/ float fontSize ) = 0;
      virtual HRESULT __stdcall raw_SetRowTableFontSize (
        /*[in]*/ long tableNumber,
        /*[in]*/ long rowNumber,
        /*[in]*/ float fontSize ) = 0;
      virtual HRESULT __stdcall raw_SetColumnTableTextAlign (
        /*[in]*/ long tableNumber,
        /*[in]*/ long columnNumber,
        /*[in]*/ TextAlign align ) = 0;
      virtual HRESULT __stdcall raw_SetRowTableTextAlign (
        /*[in]*/ long tableNumber,
        /*[in]*/ long rowNumber,
        /*[in]*/ TextAlign align ) = 0;
      virtual HRESULT __stdcall raw_SetTableLineWidth (
        /*[in]*/ long tableNumber,
        /*[in]*/ float lineWidth ) = 0;
      virtual HRESULT __stdcall raw_SetTableLineColor (
        /*[in]*/ long tableNumber,
        /*[in]*/ float colorComponent1,
        /*[in]*/ float colorComponent2,
        /*[in]*/ float colorComponent3,
        /*[in]*/ float colorComponent4 ) = 0;
      virtual HRESULT __stdcall raw_SetCellTableTextColor (
        /*[in]*/ long tableNumber,
        /*[in]*/ long columnNumber,
        /*[in]*/ long rowNumber,
        /*[in]*/ float colorComponent1,
        /*[in]*/ float colorComponent2,
        /*[in]*/ float colorComponent3,
        /*[in]*/ float colorComponent4 ) = 0;
      virtual HRESULT __stdcall raw_SetRowTableTextColor (
        /*[in]*/ long tableNumber,
        /*[in]*/ long rowNumber,
        /*[in]*/ float colorComponent1,
        /*[in]*/ float colorComponent2,
        /*[in]*/ float colorComponent3,
        /*[in]*/ float colorComponent4 ) = 0;
      virtual HRESULT __stdcall raw_SetColumnTableTextColor (
        /*[in]*/ long tableNumber,
        /*[in]*/ long columnNumber,
        /*[in]*/ float colorComponent1,
        /*[in]*/ float colorComponent2,
        /*[in]*/ float colorComponent3,
        /*[in]*/ float colorComponent4 ) = 0;
      virtual HRESULT __stdcall raw_SetErrorMode (
        /*[in]*/ unsigned int uiLevel ) = 0;
};

enum __MIDL_IPDFDocument4_0029
{
    bmNormal = 0,
    bmMultiply = 1,
    bmScreen = 2,
    bmOverlay = 3,
    bmDarken = 4,
    bmLighten = 5,
    bmColorDodge = 6,
    bmColorBurn = 7,
    bmHardLight = 8,
    bmSoftLight = 9,
    bmDifference = 10,
    bmExclusion = 11,
    bmHue = 12,
    bmSaturation = 13,
    bmColor = 14,
    bmLuminosity = 15
};

//
// Wrapper method implementations
//

#include "c:\users\jozef\desktop\visionlab-fyzikalne-experimenty-sonka-almost-final\mfcapplication7\mfcapplication7\release\pdfcreatorpilot.tli"

} // namespace PDFCreatorPilotLib

#pragma pack(pop)
